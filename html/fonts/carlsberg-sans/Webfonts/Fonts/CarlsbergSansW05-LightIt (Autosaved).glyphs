{
.appVersion = "1230";
copyright = "The Carlsberg font family was designed by Kontrapunkt A/S in 2006, 2008, 2018 and the copyright belongs to Carlsberg A/S.";
customParameters = (
{
name = trademark;
value = "Carlsberg Sans is a trademark of Carlsberg A/S.";
},
{
name = licenseURL;
value = "http://www.monotype.com";
},
{
name = vendorID;
value = MONO;
},
{
name = panose;
value = (
2,
0,
5,
3,
0,
0,
0,
9,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
9,
29,
31,
60
);
},
{
name = codePageRanges;
value = (
1252,
1250,
1251,
1254,
1257,
1258,
bit 29
);
},
{
name = glyphOrder;
value = (
.notdef,
uni0000,
CR,
space,
A,
Aacute,
Abreve,
Abreveacute,
Abrevedotbelow,
Abrevegrave,
Abrevehookabove,
Abrevetilde,
Acircumflex,
Acircumflexacute,
Acircumflexdotbelow,
Acircumflexgrave,
Acircumflexhookabove,
Acircumflextilde,
Adieresis,
Adotbelow,
Agrave,
Ahookabove,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
B,
C,
Cacute,
Ccaron,
Ccedilla,
D,
Eth,
Dcaron,
Dcroat,
E,
Eacute,
Ecaron,
Ecircumflex,
Ecircumflexacute,
Ecircumflexdotbelow,
Ecircumflexgrave,
Ecircumflexhookabove,
Ecircumflextilde,
Edieresis,
Edotaccent,
Edotbelow,
Egrave,
Ehookabove,
Emacron,
Eogonek,
Etilde,
F,
G,
Gbreve,
Gcommaaccent,
H,
I,
Iacute,
Icircumflex,
Idieresis,
Idotaccent,
Idotbelow,
Igrave,
Ihookabove,
Imacron,
Iogonek,
Itilde,
J,
K,
Kcommaaccent,
L,
Lacute,
Lcaron,
Lcommaaccent,
Lslash,
M,
N,
Nacute,
Ncaron,
Ncommaaccent,
Ntilde,
O,
Oacute,
Ocircumflex,
Ocircumflexacute,
Ocircumflexdotbelow,
Ocircumflexgrave,
Ocircumflexhookabove,
Ocircumflextilde,
Odieresis,
Odotbelow,
Ograve,
Ohookabove,
Ohorn,
Ohornacute,
Ohorndotbelow,
Ohorngrave,
Ohornhookabove,
Ohorntilde,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
Rcommaaccent,
S,
Sacute,
Scaron,
Scedilla,
Scommaaccent,
Schwa,
T,
Tcaron,
Tcedilla,
Tcommaaccent,
U,
Uacute,
Ucircumflex,
Udieresis,
Udotbelow,
Ugrave,
Uhookabove,
Uhorn,
Uhornacute,
Uhorndotbelow,
Uhorngrave,
Uhornhookabove,
Uhorntilde,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
X,
Y,
Yacute,
Ydieresis,
Ydotbelow,
Ygrave,
Yhookabove,
Ytilde,
Z,
Zacute,
Zcaron,
Zdotaccent,
a,
aacute,
abreve,
abreveacute,
abrevedotbelow,
abrevegrave,
abrevehookabove,
abrevetilde,
acircumflex,
acircumflexacute,
acircumflexdotbelow,
acircumflexgrave,
acircumflexhookabove,
acircumflextilde,
adieresis,
adotbelow,
agrave,
ahookabove,
amacron,
aogonek,
aring,
atilde,
ae,
b,
c,
cacute,
ccaron,
ccedilla,
d,
eth,
dcaron,
dcroat,
e,
eacute,
ecaron,
ecircumflex,
ecircumflexacute,
ecircumflexdotbelow,
ecircumflexgrave,
ecircumflexhookabove,
ecircumflextilde,
edieresis,
edotaccent,
edotbelow,
egrave,
ehookabove,
emacron,
eogonek,
etilde,
schwa,
f,
g,
gbreve,
gcommaaccent,
h,
i,
idotless,
iacute,
icircumflex,
idieresis,
idotbelow,
igrave,
ihookabove,
imacron,
iogonek,
itilde,
j,
k,
kcommaaccent,
l,
lacute,
lcaron,
lcommaaccent,
lslash,
m,
n,
nacute,
ncaron,
ncommaaccent,
ntilde,
o,
oacute,
ocircumflex,
ocircumflexacute,
ocircumflexdotbelow,
ocircumflexgrave,
ocircumflexhookabove,
ocircumflextilde,
odieresis,
odotbelow,
ograve,
ohookabove,
ohorn,
ohornacute,
ohorndotbelow,
ohorngrave,
ohornhookabove,
ohorntilde,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
rcommaaccent,
s,
sacute,
scaron,
scedilla,
scommaaccent,
germandbls,
t,
tcaron,
tcedilla,
tcommaaccent,
u,
uacute,
ucircumflex,
udieresis,
udotbelow,
ugrave,
uhookabove,
uhorn,
uhornacute,
uhorndotbelow,
uhorngrave,
uhornhookabove,
uhorntilde,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
x,
y,
yacute,
ydieresis,
ydotbelow,
ygrave,
yhookabove,
ytilde,
z,
zacute,
zcaron,
zdotaccent,
i.locl,
fi,
fl,
ordfeminine,
ordmasculine,
"A-cy",
"Be-cy",
"Ve-cy",
"Ge-cy",
"Gje-cy",
"Gheupturn-cy",
"De-cy",
"Ie-cy",
"Io-cy",
"Zhe-cy",
"Ze-cy",
"Ii-cy",
"Iishort-cy",
"Ka-cy",
"Kje-cy",
"El-cy",
"Em-cy",
"En-cy",
"O-cy",
"Pe-cy",
"Er-cy",
"Es-cy",
"Te-cy",
"U-cy",
"Ushort-cy",
"Ef-cy",
"Ha-cy",
"Che-cy",
"Tse-cy",
"Sha-cy",
"Shcha-cy",
"Dzhe-cy",
"Softsign-cy",
"Hardsign-cy",
"Yeru-cy",
"Lje-cy",
"Nje-cy",
"Dze-cy",
"E-cy",
"Ereversed-cy",
"I-cy",
"Yi-cy",
"Je-cy",
"Tshe-cy",
"Iu-cy",
"Ia-cy",
"Dje-cy",
"Ghestroke-cy",
"Kadescender-cy",
"Kaverticalstroke-cy",
"Endescender-cy",
"Ustraight-cy",
"Ustraightstroke-cy",
"Hadescender-cy",
"Cheverticalstroke-cy",
"Shha-cy",
"Schwa-cy",
"Obarred-cy",
"a-cy",
"be-cy",
"ve-cy",
"ge-cy",
"gje-cy",
"gheupturn-cy",
"de-cy",
"ie-cy",
"io-cy",
"zhe-cy",
"ze-cy",
"ii-cy",
"iishort-cy",
"ka-cy",
"kje-cy",
"el-cy",
"em-cy",
"en-cy",
"o-cy",
"pe-cy",
"er-cy",
"es-cy",
"te-cy",
"u-cy",
"ushort-cy",
"ef-cy",
"ha-cy",
"che-cy",
"tse-cy",
"sha-cy",
"shcha-cy",
"dzhe-cy",
"softsign-cy",
"hardsign-cy",
"yeru-cy",
"lje-cy",
"nje-cy",
"dze-cy",
"e-cy",
"ereversed-cy",
"i-cy",
"yi-cy",
"je-cy",
"tshe-cy",
"iu-cy",
"ia-cy",
"dje-cy",
"ghestroke-cy",
"kadescender-cy",
"kaverticalstroke-cy",
"endescender-cy",
"ustraight-cy",
"ustraightstroke-cy",
"hadescender-cy",
"cheverticalstroke-cy",
"shha-cy",
"schwa-cy",
"obarred-cy",
Omega,
mu,
pi,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
zero.salt,
one.salt,
two.salt,
three.salt,
four.salt,
five.salt,
six.salt,
seven.salt,
eight.salt,
nine.salt,
onesuperior,
twosuperior,
threesuperior,
fraction,
onehalf,
onequarter,
threequarters,
onehalf.salt,
onequarter.salt,
threequarters.salt,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
period.salt,
comma.salt,
colon.salt,
semicolon.salt,
periodcentered.salt,
numbersign.salt,
slash.salt,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
hyphen,
softhyphen,
endash,
emdash,
underscore,
hyphen.salt,
underscore.salt,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemetleft,
guillemetright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
quotedbl.salt,
quotesingle.salt,
nbspace,
space.salt,
cent,
currency,
dollar,
dong,
euro,
florin,
sterling,
yen,
cent.salt,
currency.salt,
dollar.salt,
euro.salt,
florin.salt,
sterling.salt,
yen.salt,
bulletoperator,
divisionslash,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
integral,
Ohm,
increment,
product,
summation,
radical,
partialdiff,
micro,
percent,
perthousand,
plus.salt,
minus.salt,
multiply.salt,
divide.salt,
equal.salt,
notequal.salt,
greater.salt,
less.salt,
greaterequal.salt,
lessequal.salt,
plusminus.salt,
approxequal.salt,
summation.salt,
percent.salt,
lozenge,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
literSign,
daggerdbl,
estimated,
numero,
paragraph.salt,
section.salt,
degree.salt,
bar.salt,
firsttonechinese,
gravecomb,
acutecomb,
glyph00592,
tildecomb,
hookabovecomb,
commaturnedabovecomb,
dotbelowcomb,
uniF6C3,
gravetonecomb,
acutetonecomb,
acute,
breve,
caron,
cedilla,
circumflex,
dieresis,
dotaccent,
grave,
hungarumlaut,
macron,
ogonek,
ring,
tilde,
glyph00613,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE020,
uniE021,
uniE022,
uniE023,
uniE024,
uniE025,
uniE026,
uniE027,
Cacute.locl,
cacute.locl,
Nacute.locl,
nacute.locl,
Oacute.locl,
oacute.locl,
Sacute.locl,
sacute.locl,
Zacute.locl,
zacute.locl,
glyph00640,
glyph00641,
nonbreakinghyphen,
zeroWidthNoBreakSpace
);
}
);
date = "2018-07-27 07:45:44 +0000";
designerURL = "http://www.monotype.com";
disablesNiceNames = 1;
features = (
{
code = "lookup frac0 {\012	script cyrl;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012} frac0;\012lookup frac1 {\012	script latn;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	language AZE ;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	language PLK ;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	language ROM ;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	language TRK ;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012	sub zero fraction zero zero by perthousand;\012	sub zero slash zero zero by perthousand;\012	sub zero fraction zero by percent;\012	sub zero slash zero by percent;\012	sub one fraction two by onehalf;\012	sub one fraction four by onequarter;\012	sub one slash two by onehalf;\012	sub one slash four by onequarter;\012	sub three fraction four by threequarters;\012	sub three slash four by threequarters;\012} frac1;\012";
name = frac;
},
{
code = "script latn;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012language AZE ;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012language PLK ;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012language ROM ;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012language TRK ;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012sub A gravecomb by Agrave;\012sub A acutecomb by Aacute;\012sub A tildecomb by Atilde;\012sub A hookabovecomb by Ahookabove;\012sub A dotbelowcomb by Adotbelow;\012sub Abreve gravecomb by Abrevegrave;\012sub Abreve acutecomb by Abreveacute;\012sub Abreve tildecomb by Abrevetilde;\012sub Abreve hookabovecomb by Abrevehookabove;\012sub Abreve dotbelowcomb by Abrevedotbelow;\012sub Acircumflex gravecomb by Acircumflexgrave;\012sub Acircumflex acutecomb by Acircumflexacute;\012sub Acircumflex tildecomb by Acircumflextilde;\012sub Acircumflex hookabovecomb by Acircumflexhookabove;\012sub Acircumflex dotbelowcomb by Acircumflexdotbelow;\012sub E gravecomb by Egrave;\012sub E acutecomb by Eacute;\012sub E tildecomb by Etilde;\012sub E hookabovecomb by Ehookabove;\012sub E dotbelowcomb by Edotbelow;\012sub Ecircumflex gravecomb by Ecircumflexgrave;\012sub Ecircumflex acutecomb by Ecircumflexacute;\012sub Ecircumflex tildecomb by Ecircumflextilde;\012sub Ecircumflex hookabovecomb by Ecircumflexhookabove;\012sub Ecircumflex dotbelowcomb by Ecircumflexdotbelow;\012sub I tildecomb by Itilde;\012sub I hookabovecomb by Ihookabove;\012sub I dotbelowcomb by Idotbelow;\012sub O gravecomb by Ograve;\012sub O acutecomb by Oacute;\012sub O tildecomb by Otilde;\012sub O hookabovecomb by Ohookabove;\012sub O dotbelowcomb by Odotbelow;\012sub Ocircumflex gravecomb by Ocircumflexgrave;\012sub Ocircumflex acutecomb by Ocircumflexacute;\012sub Ocircumflex tildecomb by Ocircumflextilde;\012sub Ocircumflex hookabovecomb by Ocircumflexhookabove;\012sub Ocircumflex dotbelowcomb by Ocircumflexdotbelow;\012sub Ohorn gravecomb by Ohorngrave;\012sub Ohorn acutecomb by Ohornacute;\012sub Ohorn tildecomb by Ohorntilde;\012sub Ohorn hookabovecomb by Ohornhookabove;\012sub Ohorn dotbelowcomb by Ohorndotbelow;\012sub U gravecomb by Ugrave;\012sub U acutecomb by Uacute;\012sub U tildecomb by Utilde;\012sub U hookabovecomb by Uhookabove;\012sub U dotbelowcomb by Udotbelow;\012sub Uhorn gravecomb by Uhorngrave;\012sub Uhorn acutecomb by Uhornacute;\012sub Uhorn tildecomb by Uhorntilde;\012sub Uhorn hookabovecomb by Uhornhookabove;\012sub Uhorn dotbelowcomb by Uhorndotbelow;\012sub Y gravecomb by Ygrave;\012sub Y tildecomb by Ytilde;\012sub Y hookabovecomb by Yhookabove;\012sub Y dotbelowcomb by Ydotbelow;\012sub a gravecomb by agrave;\012sub a acutecomb by aacute;\012sub a tildecomb by atilde;\012sub a hookabovecomb by ahookabove;\012sub a dotbelowcomb by adotbelow;\012sub abreve gravecomb by abrevegrave;\012sub abreve acutecomb by abreveacute;\012sub abreve tildecomb by abrevetilde;\012sub abreve hookabovecomb by abrevehookabove;\012sub abreve dotbelowcomb by abrevedotbelow;\012sub acircumflex gravecomb by acircumflexgrave;\012sub acircumflex acutecomb by acircumflexacute;\012sub acircumflex tildecomb by acircumflextilde;\012sub acircumflex hookabovecomb by acircumflexhookabove;\012sub acircumflex dotbelowcomb by acircumflexdotbelow;\012sub e gravecomb by egrave;\012sub e acutecomb by eacute;\012sub e tildecomb by etilde;\012sub e hookabovecomb by ehookabove;\012sub e dotbelowcomb by edotbelow;\012sub ecircumflex gravecomb by ecircumflexgrave;\012sub ecircumflex acutecomb by ecircumflexacute;\012sub ecircumflex tildecomb by ecircumflextilde;\012sub ecircumflex hookabovecomb by ecircumflexhookabove;\012sub ecircumflex dotbelowcomb by ecircumflexdotbelow;\012sub f i by fi;\012sub f l by fl;\012sub i tildecomb by itilde;\012sub i hookabovecomb by ihookabove;\012sub i dotbelowcomb by idotbelow;\012sub idotless tildecomb by itilde;\012sub o gravecomb by ograve;\012sub o acutecomb by oacute;\012sub o tildecomb by otilde;\012sub o hookabovecomb by ohookabove;\012sub o dotbelowcomb by odotbelow;\012sub ocircumflex gravecomb by ocircumflexgrave;\012sub ocircumflex acutecomb by ocircumflexacute;\012sub ocircumflex tildecomb by ocircumflextilde;\012sub ocircumflex hookabovecomb by ocircumflexhookabove;\012sub ocircumflex dotbelowcomb by ocircumflexdotbelow;\012sub ohorn gravecomb by ohorngrave;\012sub ohorn acutecomb by Ocircumflexdotbelow;\012sub ohorn tildecomb by ohorntilde;\012sub ohorn hookabovecomb by ohornhookabove;\012sub ohorn dotbelowcomb by ohorndotbelow;\012sub u gravecomb by ugrave;\012sub u acutecomb by uacute;\012sub u tildecomb by utilde;\012sub u hookabovecomb by uhookabove;\012sub u dotbelowcomb by udotbelow;\012sub uhorn gravecomb by uhorngrave;\012sub uhorn acutecomb by uhornacute;\012sub uhorn tildecomb by uhorntilde;\012sub uhorn hookabovecomb by uhornhookabove;\012sub uhorn dotbelowcomb by uhorndotbelow;\012sub y gravecomb by ygrave;\012sub y tildecomb by ytilde;\012sub y hookabovecomb by yhookabove;\012sub y dotbelowcomb by ydotbelow;\012";
name = liga;
},
{
code = "script latn;\012language AZE ;\012sub i by i.locl;\012language PLK ;\012sub Cacute by Cacute.locl;\012sub Nacute by Nacute.locl;\012sub Oacute by Oacute.locl;\012sub Sacute by Sacute.locl;\012sub Zacute by Zacute.locl;\012sub cacute by cacute.locl;\012sub nacute by nacute.locl;\012sub oacute by oacute.locl;\012sub sacute by sacute.locl;\012sub zacute by zacute.locl;\012language ROM ;\012sub Scedilla by Scommaaccent;\012sub scedilla by scommaaccent;\012language TRK ;\012sub i by i.locl;\012";
name = locl;
},
{
code = "lookup ordn0 {\012	script cyrl;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012} ordn0;\012lookup ordn1 {\012	script latn;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	language AZE ;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	language PLK ;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	language ROM ;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	language TRK ;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012	sub a by ordfeminine;\012	sub o by ordmasculine;\012} ordn1;\012";
name = ordn;
},
{
code = "lookup salt0 {\012	script cyrl;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012} salt0;\012lookup salt1 {\012	script latn;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language AZE ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language PLK ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language ROM ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language TRK ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012} salt1;\012";
name = salt;
},
{
code = "lookup ss010 {\012	script cyrl;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012} ss010;\012lookup ss011 {\012	script latn;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language AZE ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language PLK ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language ROM ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	language TRK ;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012	sub space by space.salt;\012	sub zero by zero.salt;\012	sub one by one.salt;\012	sub two by two.salt;\012	sub three by three.salt;\012	sub four by four.salt;\012	sub five by five.salt;\012	sub six by six.salt;\012	sub seven by seven.salt;\012	sub eight by eight.salt;\012	sub nine by nine.salt;\012	sub onehalf by onehalf.salt;\012	sub onequarter by onequarter.salt;\012	sub threequarters by threequarters.salt;\012	sub period by period.salt;\012	sub comma by comma.salt;\012	sub colon by colon.salt;\012	sub semicolon by semicolon.salt;\012	sub periodcentered by periodcentered.salt;\012	sub numbersign by numbersign.salt;\012	sub slash by slash.salt;\012	sub hyphen by hyphen.salt;\012	sub underscore by underscore.salt;\012	sub quotedbl by quotedbl.salt;\012	sub quotesingle by quotesingle.salt;\012	sub cent by cent.salt;\012	sub currency by currency.salt;\012	sub dollar by dollar.salt;\012	sub euro by euro.salt;\012	sub florin by florin.salt;\012	sub sterling by sterling.salt;\012	sub yen by yen.salt;\012	sub plus by plus.salt;\012	sub minus by minus.salt;\012	sub multiply by multiply.salt;\012	sub divide by divide.salt;\012	sub equal by equal.salt;\012	sub notequal by notequal.salt;\012	sub greater by greater.salt;\012	sub less by less.salt;\012	sub greaterequal by greaterequal.salt;\012	sub lessequal by lessequal.salt;\012	sub plusminus by plusminus.salt;\012	sub approxequal by approxequal.salt;\012	sub summation by summation.salt;\012	sub percent by percent.salt;\012	sub paragraph by paragraph.salt;\012	sub section by section.salt;\012	sub degree by degree.salt;\012	sub bar by bar.salt;\012} ss011;\012";
name = ss01;
},
{
code = "lookup sups0 {\012	script cyrl;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012} sups0;\012lookup sups1 {\012	script latn;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	language AZE ;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	language PLK ;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	language ROM ;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	language TRK ;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012	sub one by onesuperior;\012	sub two by twosuperior;\012	sub three by threesuperior;\012} sups1;\012";
name = sups;
}
);
fontMaster = (
{
ascender = 1036;
capHeight = 724;
customParameters = (
{
name = typoAscender;
value = 1036;
},
{
name = typoDescender;
value = -225;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1036;
},
{
name = winDescent;
value = 225;
},
{
name = hheaAscender;
value = 1036;
},
{
name = hheaDescender;
value = -225;
},
{
name = strikeoutPosition;
value = 309;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "Prep Table Assembly";
value = "NPUSHB[ ]	/* 255 values pushed */\0129 19 43 18 85 17 43 16 85 32 89 32 1 16 85 18 89 16 89 95 16 1 31 16 1 175 16 1 127 16 1 111 16 1 63 16 1 255 16 1 191 16 1 79 16 1 15 16 1 13 239 32 8 85 238 32 2 85 237 54 236 85 235 54 2 85 233 54 232 85 231 54 230 85 236 89 0 236 1 57 208 236 1 96 236 1 207 236 1 191 236 1 255 236 1 192 236 1 144 236 1 96 236 1 234 89 234 255 2 85 232 89 230 89 255 230 1 207 230 1 143 230 1 95 230 1 239 230 1 127 230 1 47 230 1 191 230 1 143 230 1 111 230 1 79 230 1 13 43 12 85 5 43 4 85 12 89 4 89 4 255 2 85 30 22 14 85 15 43 14 85 11 43 10 85 7 43 6 85 1 43 0 85 14 89 16 14 1 176 14 1 0 14 1 160 14 1 48 14 64 14 80 14 3 10 89 6 89 207 6 1 239 6 1 127 6 1 95 6 1 63 6 1 31 6 1 255 6 1 191 6 1 0 89 159 0 1 95 0 1 239 0 1 191 0 1 175 0 1 127 0 1 63 0 1 \012NPUSHB[ ]	/* 56 values pushed */\012255 0 1 143 0 1 79 0 1 9 43 8 85 3 43 2 85 8 89 2 89 159 2 1 95 2 1 239 2 1 191 2 1 175 2 1 127 2 1 63 2 1 255 2 1 143 2 1 79 2 1 3 64 64 5 1 \012PUSHW[ ]	/* 2 values pushed */\012400 84 \012CALL[ ]	/* CallFunction */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0122047 \012GT[ ]	/* GreaterThan */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LT[ ]	/* LessThan */\012OR[ ]	/* LogicalOr */\012PUSHB[ ]	/* 1 value pushed */\0121 \012GETINFO[ ]	/* GetInfo */\012PUSHB[ ]	/* 1 value pushed */\01237 \012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0121 \012GETINFO[ ]	/* GetInfo */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GETINFO[ ]	/* GetInfo */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012AND[ ]	/* LogicalAnd */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012SCANCTRL[ ]	/* ScanConversionControl */\012SCANTYPE[ ]	/* ScanType */\012SCANTYPE[ ]	/* ScanType */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012SCVTCI[ ]	/* SetCVTCutIn */\012WS[ ]	/* WriteStore */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\012144 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0123 0 0 \012SCVTCI[ ]	/* SetCVTCutIn */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 3 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SDB[ ]	/* SetDeltaBaseInGState */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SDB[ ]	/* SetDeltaBaseInGState */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC1[ ]	/* DeltaExceptionC1 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC2[ ]	/* DeltaExceptionC2 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012DELTAC3[ ]	/* DeltaExceptionC3 */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012RTG[ ]	/* RoundToGrid */\012SDB[ ]	/* SetDeltaBaseInGState */";
},
{
name = "Fpgm Table Assembly";
value = "NPUSHB[ ]	/* 76 values pushed */\012153 152 151 150 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 81 80 79 78 77 76 75 74 73 72 71 70 69 68 40 31 16 10 9 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01211 10 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012NEG[ ]	/* Negate */\012SPVFS[ ]	/* SetPVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01210 11 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012SFVFS[ ]	/* SetFVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012NEG[ ]	/* Negate */\012SPVFS[ ]	/* SetPVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012SFVFS[ ]	/* SetFVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROUND[10]	/* Round */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROUND[10]	/* Round */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012SWAP[ ]	/* SwapTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012SWAP[ ]	/* SwapTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01270 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01271 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01272 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01273 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0120 3 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 3 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MAX[ ]	/* Maximum */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01298 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 0 \012GPV[ ]	/* GetPVector */\012POP[ ]	/* PopTopStack */\012EQ[ ]	/* Equal */\012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012GPV[ ]	/* GetPVector */\012POP[ ]	/* PopTopStack */\012EQ[ ]	/* Equal */\012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012DIV[ ]	/* Divide */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012EVEN[ ]	/* Even */\012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\012256 \012DIV[ ]	/* Divide */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012EVEN[ ]	/* Even */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012EIF[ ]	/* EndIf */\012SCFS[ ]	/* SetCoordFromStackFP */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHW[ ]	/* 1 value pushed */\01253 \012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 1 value pushed */\012-63 \012JMPR[ ]	/* Jump */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01235 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\01264 1 \012GETINFO[ ]	/* GetInfo */\012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0124096 32 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0128192 64 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 32 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 8 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\01216384 128 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 4 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 2 values pushed */\01216384 128 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\012256 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 8 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 2 values pushed */\01216384 256 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\012512 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 16 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01238 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\01216384 512 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 64 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 2 values pushed */\01216384 1024 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 128 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\01216384 2048 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122 256 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\0125 64 8 64 9 64 12 2 13 2 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 3 values pushed */\012256 9 256 \012PUSHB[ ]	/* 4 values pushed */\01212 1 13 1 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\012128 2 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 1 value pushed */\012384 \012PUSHB[ ]	/* 2 values pushed */\0129 64 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\012256 2 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 3 values pushed */\012384 9 320 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\012384 2 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 1 value pushed */\012512 \012PUSHB[ ]	/* 2 values pushed */\0129 64 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 3 values pushed */\012256 9 256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 2 values pushed */\01216384 128 \012GETINFO[ ]	/* GetInfo */\012NEQ[ ]	/* NotEqual */\012PUSHW[ ]	/* 2 values pushed */\01216384 512 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012GETINFO[ ]	/* GetInfo */\012NEQ[ ]	/* NotEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\01212 0 13 1 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\01212 0 13 1 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012NEG[ ]	/* Negate */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01220 20 \012ROLL[ ]	/* RollTopThreeStack */\012WCVTF[ ]	/* WriteCVTInFUnits */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 2 values pushed */\01297 6 \012MINDEX[ ]	/* MoveXToTopStack */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MAX[ ]	/* Maximum */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01298 \012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0122 3 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 4 \012CINDEX[ ]	/* CopyXToTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[0]	/* MoveIndirectAbsPt */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012SPVTL[0]	/* SetPVectorToLine */\012GPV[ ]	/* GetPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012NEG[ ]	/* Negate */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 3 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 4 \012CINDEX[ ]	/* CopyXToTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012SPVTL[0]	/* SetPVectorToLine */\012GPV[ ]	/* GetPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012NEG[ ]	/* Negate */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012RTG[ ]	/* RoundToGrid */\012ROUND[01]	/* Round */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012CEILING[ ]	/* Ceiling */\012ELSE[ ]	/* Else */\012FLOOR[ ]	/* Floor */\012EIF[ ]	/* EndIf */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0124 0 \012WS[ ]	/* WriteStore */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0120 78 \012CALL[ ]	/* CallFunction */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\01264 79 \012CALL[ ]	/* CallFunction */\012LT[ ]	/* LessThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\01264 4 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012WCVTP[ ]	/* WriteCVTInPixels */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\01264 79 \012CALL[ ]	/* CallFunction */\012LT[ ]	/* LessThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GTEQ[ ]	/* GreaterThanOrEqual */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 2 values pushed */\01264 79 \012CALL[ ]	/* CallFunction */\012EQ[ ]	/* Equal */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012GPV[ ]	/* GetPVector */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01264 64 \012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SFVTCA[1]	/* SetFVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01211 10 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012NEG[ ]	/* Negate */\012SPVFS[ ]	/* SetPVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 11 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012SFVFS[ ]	/* SetFVectorFromStack */\012SPVTCA[0]	/* SetPVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012CEILING[ ]	/* Ceiling */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[1]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[1]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012103 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012104 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\012128 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\012128 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012110 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012128 \012LT[ ]	/* LessThan */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\0120 3 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ROLL[ ]	/* RollTopThreeStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0127 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012112 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\012512 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\012512 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01293 \012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP1[ ]	/* SetRefPoint1 */\012ROLL[ ]	/* RollTopThreeStack */\012SRP2[ ]	/* SetRefPoint2 */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\01293 4096 4 \012MINDEX[ ]	/* MoveXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHW[ ]	/* 3 values pushed */\01293 4096 9 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012109 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01293 7 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012111 \012CALL[ ]	/* CallFunction */\012PUSHW[ ]	/* 3 values pushed */\01293 4096 8 \012MINDEX[ ]	/* MoveXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01280 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012GT[ ]	/* GreaterThan */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHW[ ]	/* 3 values pushed */\01293 4096 11 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012110 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012109 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012109 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01280 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\012-64 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 2 values pushed */\012-64 2 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012101 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012104 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SPVTL[0]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\0120 3 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SPVTL[1]	/* SetPVectorToLine */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01283 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 3 values pushed */\0122 0 1 \012SFVTL[0]	/* SetFVectorToLine */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 3 values pushed */\0122 0 1 \012SFVTL[1]	/* SetFVectorToLine */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0122 1 \012SPVTL[1]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012GFV[ ]	/* GetFVector */\012GPV[ ]	/* GetPVector */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012PUSHW[ ]	/* 2 values pushed */\01216384 1024 \012MUL[ ]	/* Multiply */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SPVTCA[1]	/* SetPVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012SPVTCA[0]	/* SetPVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01293 14 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01212 \012MINDEX[ ]	/* MoveXToTopStack */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012SRP2[ ]	/* SetRefPoint2 */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012IP[ ]	/* InterpolatePts */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012IP[ ]	/* InterpolatePts */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012124 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012124 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00001]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00001]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 2 values pushed */\012-1 118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 2 values pushed */\012-1 118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 12 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[0]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[1]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012ROLL[ ]	/* RollTopThreeStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012PUSHB[ ]	/* 2 values pushed */\0121 7 \012MINDEX[ ]	/* MoveXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[0]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[1]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\01216384 0 \012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\01216384 0 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SFVTL[0]	/* SetFVectorToLine */\012GFV[ ]	/* GetFVector */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\01216384 0 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 2 values pushed */\01216384 0 \012EIF[ ]	/* EndIf */\012GFV[ ]	/* GetFVector */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVTL[0]	/* SetFVectorToLine */\012GFV[ ]	/* GetFVector */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVTL[0]	/* SetFVectorToLine */\012GFV[ ]	/* GetFVector */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012RDTG[ ]	/* RoundDownToGrid */\012MDRP[00101]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012RTG[ ]	/* RoundToGrid */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012111 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012102 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012104 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012102 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012104 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00101]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00101]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012111 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012130 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012130 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROUND[01]	/* Round */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01296 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROUND[01]	/* Round */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROUND[01]	/* Round */\012SUB[ ]	/* Subtract */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012RS[ ]	/* ReadStore */\012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012ALIGNRP[ ]	/* AlignRelativePt */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012IF[ ]	/* If */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012IP[ ]	/* InterpolatePts */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHW[ ]	/* 1 value pushed */\012-23 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012EQ[ ]	/* Equal */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP2[ ]	/* SetRefPoint2 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\012133 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012EQ[ ]	/* Equal */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP2[ ]	/* SetRefPoint2 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012133 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012133 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012GPV[ ]	/* GetPVector */\012SPVTCA[0]	/* SetPVectorToAxis */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SPVFS[ ]	/* SetPVectorFromStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SPVFS[ ]	/* SetPVectorFromStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012152 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012GPV[ ]	/* GetPVector */\012SPVTCA[0]	/* SetPVectorToAxis */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SPVFS[ ]	/* SetPVectorFromStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SPVFS[ ]	/* SetPVectorFromStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01295 \012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01286 \012SWAP[ ]	/* SwapTopStack */\012JROF[ ]	/* JumpRelativeOnFalse */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 71 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 44 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 27 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 12 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\012-77 \012JMPR[ ]	/* Jump */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\012123 \012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012114 \012SWAP[ ]	/* SwapTopStack */\012JROF[ ]	/* JumpRelativeOnFalse */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01299 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012OR[ ]	/* LogicalOr */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\01254 0 \012SWAP[ ]	/* SwapTopStack */\012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012NOT[ ]	/* LogicalNot */\012ROLL[ ]	/* RollTopThreeStack */\012AND[ ]	/* LogicalAnd */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01229 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\012-104 \012JMPR[ ]	/* Jump */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
727,
12,
727,
12,
0,
12,
515,
12,
0,
-12,
0,
-12,
0,
-12,
-178,
-12,
727,
12,
0,
-12,
0,
727,
129,
515,
92,
727,
129,
727,
129,
0,
-40,
0,
34,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
417,
9,
0,
-9,
0,
9,
310,
-9,
16,
-30
);
}
);
descender = -225;
id = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
italicAngle = 11.95;
weight = Light;
weightValue = 300;
widthValue = 5;
xHeight = 516;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"99 665 LINE",
"-17 0 LINE",
"457 0 LINE",
"574 665 LINE"
);
},
{
closed = 1;
nodes = (
"286 375 LINE",
"167 618 LINE",
"490 618 LINE"
);
},
{
closed = 1;
nodes = (
"46 91 LINE",
"132 575 LINE",
"250 333 LINE"
);
},
{
closed = 1;
nodes = (
"307 333 LINE",
"512 575 LINE",
"426 90 LINE"
);
},
{
closed = 1;
nodes = (
"271 290 LINE",
"390 48 LINE",
"67 48 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 8 10 9 9 15 6 8 4 13 3 5 106 3 2 13 106 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SLOOP[ ]\011/* SetLoopVariable */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 500;
}
);
note = .notdef;
},
{
glyphname = uni0000;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 0 LINE"
);
}
);
width = 0;
}
);
note = uni0000;
},
{
glyphname = CR;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 0 LINE"
);
}
);
width = 250;
}
);
note = uni000D;
},
{
glyphname = space;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 0 LINE"
);
}
);
width = 250;
}
);
note = uni0020;
unicode = 0020;
},
{
glyphname = A;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"620 0 LINE",
"478 706 LINE SMOOTH",
"476 718 OFFCURVE",
"465 727 OFFCURVE",
"453 727 QCURVE SMOOTH",
"375 727 LINE",
"-27 0 LINE",
"32 0 LINE SMOOTH",
"44 0 OFFCURVE",
"58 9 OFFCURVE",
"65 21 QCURVE SMOOTH",
"141 161 LINE",
"509 161 LINE",
"536 21 LINE SMOOTH",
"538 9 OFFCURVE",
"549 0 OFFCURVE",
"561 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"412 657 LINE",
"494 232 LINE",
"180 232 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
4 17 106 19 4 4 9 10 2 114 16 9 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 655;
}
);
leftKerningGroup = A;
note = uni0041;
rightKerningGroup = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
name = A;
},
{
name = acute;
transform = "{1, 0, 0, 1, 313, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni00C1;
rightKerningGroup = A;
unicode = 00C1;
},
{
glyphname = Abreve;
layers = (
{
components = (
{
name = A;
},
{
name = breve;
transform = "{1, 0, 0, 1, 219, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni0102;
rightKerningGroup = A;
unicode = 0102;
},
{
glyphname = Abreveacute;
layers = (
{
components = (
{
name = A;
},
{
name = uniE024;
transform = "{1, 0, 0, 1, 171, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EAE;
rightKerningGroup = A;
unicode = 1EAE;
},
{
glyphname = Abrevedotbelow;
layers = (
{
components = (
{
name = A;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 578, 0}";
},
{
name = breve;
transform = "{1, 0, 0, 1, 219, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EB6;
rightKerningGroup = A;
unicode = 1EB6;
},
{
glyphname = Abrevegrave;
layers = (
{
components = (
{
name = A;
},
{
name = uniE025;
transform = "{1, 0, 0, 1, 184, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EB0;
rightKerningGroup = A;
unicode = 1EB0;
},
{
glyphname = Abrevehookabove;
layers = (
{
components = (
{
name = A;
},
{
name = uniE027;
transform = "{1, 0, 0, 1, 192, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EB2;
rightKerningGroup = A;
unicode = 1EB2;
},
{
glyphname = Abrevetilde;
layers = (
{
components = (
{
name = A;
},
{
name = uniE026;
transform = "{1, 0, 0, 1, 181, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EB4;
rightKerningGroup = A;
unicode = 1EB4;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
name = A;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 200, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni00C2;
rightKerningGroup = A;
unicode = 00C2;
},
{
glyphname = Acircumflexacute;
layers = (
{
components = (
{
name = A;
},
{
name = uniE020;
transform = "{1, 0, 0, 1, 182, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EA4;
rightKerningGroup = A;
unicode = 1EA4;
},
{
glyphname = Acircumflexdotbelow;
layers = (
{
components = (
{
name = A;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 578, 0}";
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 200, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EAC;
rightKerningGroup = A;
unicode = 1EAC;
},
{
glyphname = Acircumflexgrave;
layers = (
{
components = (
{
name = A;
},
{
name = uniE021;
transform = "{1, 0, 0, 1, 141, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EA6;
rightKerningGroup = A;
unicode = 1EA6;
},
{
glyphname = Acircumflexhookabove;
layers = (
{
components = (
{
name = A;
},
{
name = uniE022;
transform = "{1, 0, 0, 1, 155, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EA8;
rightKerningGroup = A;
unicode = 1EA8;
},
{
glyphname = Acircumflextilde;
layers = (
{
components = (
{
name = A;
},
{
name = uniE023;
transform = "{1, 0, 0, 1, 162, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EAA;
rightKerningGroup = A;
unicode = 1EAA;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
name = A;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 244, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni00C4;
rightKerningGroup = A;
unicode = 00C4;
},
{
glyphname = Adotbelow;
layers = (
{
components = (
{
name = A;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 578, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EA0;
rightKerningGroup = A;
unicode = 1EA0;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
name = A;
},
{
name = grave;
transform = "{1, 0, 0, 1, 175, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni00C0;
rightKerningGroup = A;
unicode = 00C0;
},
{
glyphname = Ahookabove;
layers = (
{
components = (
{
name = A;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 598, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni1EA2;
rightKerningGroup = A;
unicode = 1EA2;
},
{
glyphname = Amacron;
layers = (
{
components = (
{
name = A;
},
{
name = macron;
transform = "{1, 0, 0, 1, 230, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni0100;
rightKerningGroup = A;
unicode = 0100;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"478 706 LINE SMOOTH",
"476 718 OFFCURVE",
"465 727 OFFCURVE",
"453 727 QCURVE SMOOTH",
"375 727 LINE",
"-27 0 LINE",
"32 0 LINE SMOOTH",
"44 0 OFFCURVE",
"58 9 OFFCURVE",
"65 21 QCURVE SMOOTH",
"141 161 LINE",
"509 161 LINE",
"518 114 LINE",
"536 21 LINE SMOOTH",
"538 9 OFFCURVE",
"549 0 OFFCURVE",
"560 0 QCURVE",
"530 -17 OFFCURVE",
"478 -67 OFFCURVE",
"466 -94 QCURVE SMOOTH",
"457 -113 OFFCURVE",
"457 -133 QCURVE SMOOTH",
"457 -164 OFFCURVE",
"502 -187 OFFCURVE",
"531 -187 QCURVE SMOOTH",
"562 -187 OFFCURVE",
"600 -178 QCURVE",
"605 -147 LINE",
"605 -140 OFFCURVE",
"596 -132 OFFCURVE",
"589 -132 QCURVE SMOOTH",
"580 -132 OFFCURVE",
"566 -136 QCURVE",
"563 -136 OFFCURVE",
"557 -138 QCURVE",
"551 -139 OFFCURVE",
"546 -139 QCURVE SMOOTH",
"514 -139 OFFCURVE",
"514 -115 QCURVE SMOOTH",
"514 -96 OFFCURVE",
"549 -51 OFFCURVE",
"599 -12 OFFCURVE",
"620 0 QCURVE"
);
},
{
closed = 1;
nodes = (
"412 657 LINE",
"494 232 LINE",
"180 232 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
25 42 8 114 31 43 106 31 31 17 37 2 114 36 8 114 15 17 5 106 17 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 655;
}
);
leftKerningGroup = A;
note = uni0104;
rightKerningGroup = A;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"140 161 LINE",
"508 161 LINE",
"535 21 LINE SMOOTH",
"537 9 OFFCURVE",
"549 0 OFFCURVE",
"561 0 QCURVE SMOOTH",
"620 0 LINE",
"494 618 LINE",
"522 633 OFFCURVE",
"553 694 OFFCURVE",
"553 727 QCURVE SMOOTH",
"553 770 OFFCURVE",
"495 814 OFFCURVE",
"439 814 QCURVE SMOOTH",
"396 814 OFFCURVE",
"327 781 OFFCURVE",
"287 721 OFFCURVE",
"287 681 QCURVE SMOOTH",
"287 659 OFFCURVE",
"303 627 OFFCURVE",
"314 619 QCURVE",
"-27 0 LINE",
"32 0 LINE SMOOTH",
"44 0 OFFCURVE",
"58 9 OFFCURVE",
"64 21 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"383 637 OFFCURVE",
"350 664 OFFCURVE",
"350 689 QCURVE SMOOTH",
"350 713 OFFCURVE",
"373 749 OFFCURVE",
"410 769 OFFCURVE",
"431 769 QCURVE SMOOTH",
"458 769 OFFCURVE",
"490 743 OFFCURVE",
"490 718 QCURVE SMOOTH",
"490 694 OFFCURVE",
"467 657 OFFCURVE",
"429 637 OFFCURVE",
"408 637 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"494 232 LINE",
"180 232 LINE",
"377 595 LINE",
"385 594 OFFCURVE",
"400 594 QCURVE SMOOTH",
"415 594 OFFCURVE",
"423 595 QCURVE"
);
},
{
closed = 1;
nodes = (
"325 727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
24 44 106 17 4 11 39 41 106 32 11 106 32 39 24 39 24 39 3 47 2 114 19 3 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01110]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 655;
}
);
leftKerningGroup = A;
note = uni00C5;
rightKerningGroup = A;
unicode = 00C5;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
name = A;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 218, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = A;
note = uni00C3;
rightKerningGroup = A;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"846 0 LINE",
"859 72 LINE",
"532 72 LINE",
"579 338 LINE",
"868 338 LINE",
"880 405 LINE",
"591 405 LINE",
"636 658 LINE",
"949 658 LINE",
"961 727 LINE",
"569 727 LINE SMOOTH",
"487 727 OFFCURVE",
"410 718 OFFCURVE",
"359 684 OFFCURVE",
"338 645 QCURVE SMOOTH",
"-20 0 LINE",
"40 0 LINE SMOOTH",
"51 0 OFFCURVE",
"63 9 OFFCURVE",
"70 21 QCURVE",
"146 163 LINE SMOOTH",
"241 338 OFFCURVE",
"479 338 QCURVE SMOOTH",
"502 338 LINE",
"453 57 LINE",
"452 53 OFFCURVE",
"447 26 OFFCURVE",
"447 18 QCURVE SMOOTH",
"447 9 OFFCURVE",
"457 0 OFFCURVE",
"471 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"559 658 LINE",
"514 405 LINE",
"498 405 LINE SMOOTH",
"416 405 OFFCURVE",
"283 365 OFFCURVE",
"243 336 QCURVE",
"396 610 LINE SMOOTH",
"409 633 OFFCURVE",
"432 652 OFFCURVE",
"476 658 OFFCURVE",
"524 658 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
22 19 41 106 35 38 30 38 26 23 106 7 26 26 14 19 2 114 30 27 106 30 2 14 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 936;
}
);
leftKerningGroup = A;
note = uni00C6;
rightKerningGroup = AE;
unicode = 00C6;
},
{
glyphname = B;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"120 -3 OFFCURVE",
"214 -6 OFFCURVE",
"261 -6 QCURVE SMOOTH",
"389 -6 OFFCURVE",
"541 39 OFFCURVE",
"616 151 OFFCURVE",
"616 254 QCURVE SMOOTH",
"616 292 OFFCURVE",
"588 347 OFFCURVE",
"557 366 QCURVE SMOOTH",
"549 371 OFFCURVE",
"549 376 QCURVE SMOOTH",
"549 380 OFFCURVE",
"555 388 OFFCURVE",
"560 391 QCURVE",
"564 394 OFFCURVE",
"565 395 QCURVE",
"614 427 OFFCURVE",
"661 537 OFFCURVE",
"661 599 QCURVE SMOOTH",
"661 656 OFFCURVE",
"608 714 OFFCURVE",
"501 734 OFFCURVE",
"405 734 QCURVE SMOOTH",
"309 734 OFFCURVE",
"187 730 QCURVE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 10 OFFCURVE",
"72 1 OFFCURVE",
"86 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"207 405 LINE",
"253 668 LINE",
"311 672 OFFCURVE",
"404 672 QCURVE SMOOTH",
"471 672 OFFCURVE",
"546 655 OFFCURVE",
"578 618 OFFCURVE",
"578 584 QCURVE SMOOTH",
"578 545 OFFCURVE",
"554 462 OFFCURVE",
"505 405 OFFCURVE",
"470 405 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"195 338 LINE",
"452 338 LINE SMOOTH",
"475 338 OFFCURVE",
"493 336 OFFCURVE",
"505 325 OFFCURVE",
"513 312 QCURVE SMOOTH",
"520 300 OFFCURVE",
"529 260 OFFCURVE",
"529 239 QCURVE SMOOTH",
"529 166 OFFCURVE",
"472 86 OFFCURVE",
"371 58 OFFCURVE",
"294 58 QCURVE SMOOTH",
"223 58 OFFCURVE",
"146 62 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
20 59 43 106 59 59 8 29 47 106 32 29 8 114 8 40 106 6 8 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 659;
}
);
note = uni0042;
rightKerningGroup = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"642 705 LINE",
"601 720 OFFCURVE",
"496 742 OFFCURVE",
"443 742 QCURVE SMOOTH",
"315 742 OFFCURVE",
"147 583 OFFCURVE",
"70 346 OFFCURVE",
"70 226 QCURVE SMOOTH",
"70 141 OFFCURVE",
"124 36 OFFCURVE",
"232 -12 OFFCURVE",
"315 -12 QCURVE SMOOTH",
"374 -12 OFFCURVE",
"492 19 OFFCURVE",
"538 42 QCURVE",
"521 95 LINE",
"476 80 OFFCURVE",
"380 58 OFFCURVE",
"345 58 QCURVE SMOOTH",
"276 58 OFFCURVE",
"192 91 OFFCURVE",
"151 166 OFFCURVE",
"151 232 QCURVE SMOOTH",
"151 336 OFFCURVE",
"205 537 OFFCURVE",
"332 673 OFFCURVE",
"434 673 QCURVE SMOOTH",
"480 673 OFFCURVE",
"544 655 OFFCURVE",
"573 636 QCURVE",
"574 635 OFFCURVE",
"586 627 OFFCURVE",
"592 627 QCURVE SMOOTH",
"601 627 OFFCURVE",
"607 638 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
22 15 106 30 7 106 30 3 114 22 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 600;
}
);
leftKerningGroup = C;
note = uni0043;
rightKerningGroup = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
name = C;
},
{
name = acute;
transform = "{1, 0, 0, 1, 317, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 600;
}
);
leftKerningGroup = C;
note = uni0106;
rightKerningGroup = C;
unicode = 0106;
},
{
glyphname = Ccaron;
layers = (
{
components = (
{
name = C;
},
{
name = caron;
transform = "{1, 0, 0, 1, 226, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 600;
}
);
leftKerningGroup = C;
note = uni010C;
rightKerningGroup = C;
unicode = 010C;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"642 705 LINE",
"601 720 OFFCURVE",
"496 742 OFFCURVE",
"443 742 QCURVE SMOOTH",
"322 742 OFFCURVE",
"159 601 OFFCURVE",
"78 384 OFFCURVE",
"71 268 QCURVE SMOOTH",
"70 254 OFFCURVE",
"70 226 QCURVE SMOOTH",
"70 113 OFFCURVE",
"167 0 OFFCURVE",
"266 -9 QCURVE",
"241 -94 LINE",
"259 -94 LINE SMOOTH",
"298 -94 OFFCURVE",
"298 -115 QCURVE SMOOTH",
"298 -128 OFFCURVE",
"275 -143 OFFCURVE",
"256 -143 QCURVE SMOOTH",
"247 -143 OFFCURVE",
"233 -138 QCURVE SMOOTH",
"218 -133 OFFCURVE",
"214 -133 QCURVE SMOOTH",
"206 -133 OFFCURVE",
"197 -141 OFFCURVE",
"193 -151 QCURVE",
"182 -175 LINE",
"194 -180 OFFCURVE",
"227 -187 OFFCURVE",
"245 -187 QCURVE SMOOTH",
"273 -187 OFFCURVE",
"330 -162 OFFCURVE",
"345 -140 QCURVE SMOOTH",
"356 -124 OFFCURVE",
"356 -104 QCURVE SMOOTH",
"356 -61 OFFCURVE",
"298 -57 QCURVE",
"311 -12 LINE",
"365 -12 OFFCURVE",
"467 12 OFFCURVE",
"538 40 OFFCURVE",
"538 42 QCURVE",
"521 95 LINE",
"476 80 OFFCURVE",
"380 58 OFFCURVE",
"345 58 QCURVE SMOOTH",
"316 58 OFFCURVE",
"292 61 QCURVE SMOOTH",
"243 67 OFFCURVE",
"181 104 OFFCURVE",
"151 176 OFFCURVE",
"151 232 QCURVE SMOOTH",
"151 336 OFFCURVE",
"205 537 OFFCURVE",
"332 673 OFFCURVE",
"434 673 QCURVE SMOOTH",
"480 673 OFFCURVE",
"544 655 OFFCURVE",
"573 636 QCURVE",
"574 635 OFFCURVE",
"586 627 OFFCURVE",
"592 627 QCURVE SMOOTH",
"601 627 OFFCURVE",
"607 638 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHW[ ]\011/* 2 values pushed */
26 -16 
NPUSHB[ ]\011/* 28 values pushed */
26 65 63 50 79 50 2 50 50 33 65 60 7 106 60 3 114 33 44 106 36 33 51 25 17 106 25 9 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
RDTG[ ]\011/* RoundDownToGrid */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 600;
}
);
leftKerningGroup = C;
note = uni00C7;
rightKerningGroup = C;
unicode = 00C7;
},
{
glyphname = D;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"203 -6 OFFCURVE",
"270 -6 QCURVE SMOOTH",
"427 -6 OFFCURVE",
"616 140 OFFCURVE",
"693 367 OFFCURVE",
"693 500 QCURVE SMOOTH",
"693 622 OFFCURVE",
"562 734 OFFCURVE",
"439 734 QCURVE SMOOTH",
"187 733 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 10 OFFCURVE",
"72 1 OFFCURVE",
"86 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"254 669 LINE",
"428 671 LINE SMOOTH",
"516 671 OFFCURVE",
"607 587 OFFCURVE",
"607 488 QCURVE SMOOTH",
"607 359 OFFCURVE",
"536 167 OFFCURVE",
"397 62 OFFCURVE",
"299 62 QCURVE SMOOTH",
"215 62 OFFCURVE",
"148 65 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
16 14 18 106 7 25 106 7 3 114 14 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 702;
}
);
note = uni0044;
rightKerningGroup = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"50 341 LINE",
"129 341 LINE",
"78 57 LINE",
"77 53 OFFCURVE",
"72 26 OFFCURVE",
"72 18 QCURVE SMOOTH",
"72 10 OFFCURVE",
"82 1 OFFCURVE",
"96 0 QCURVE SMOOTH",
"213 -6 OFFCURVE",
"280 -6 QCURVE SMOOTH",
"437 -6 OFFCURVE",
"626 140 OFFCURVE",
"703 367 OFFCURVE",
"703 500 QCURVE SMOOTH",
"703 622 OFFCURVE",
"572 734 OFFCURVE",
"449 734 QCURVE SMOOTH",
"197 733 LINE",
"140 406 LINE",
"61 406 LINE"
);
},
{
closed = 1;
nodes = (
"207 341 LINE",
"350 341 LINE",
"361 406 LINE",
"218 406 LINE",
"264 669 LINE",
"268 668 OFFCURVE",
"278 669 QCURVE",
"287 669 OFFCURVE",
"298 669 QCURVE",
"318 670 OFFCURVE",
"370 670 QCURVE SMOOTH",
"438 671 LINE SMOOTH",
"526 671 OFFCURVE",
"617 587 OFFCURVE",
"617 488 QCURVE SMOOTH",
"617 359 OFFCURVE",
"546 167 OFFCURVE",
"407 62 OFFCURVE",
"309 62 QCURVE SMOOTH",
"207 62 OFFCURVE",
"158 65 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
12 10 22 106 0 20 40 37 106 40 40 10 3 29 106 3 3 114 10 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 712;
}
);
note = uni00D0;
rightKerningGroup = D;
unicode = 00D0;
},
{
glyphname = Dcaron;
layers = (
{
components = (
{
name = D;
},
{
name = caron;
transform = "{1, 0, 0, 1, 201, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 702;
}
);
note = uni010E;
rightKerningGroup = D;
unicode = 010E;
},
{
glyphname = Dcroat;
layers = (
{
components = (
{
name = Eth;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 712;
}
);
note = uni0110;
rightKerningGroup = D;
unicode = 0110;
},
{
glyphname = E;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"505 0 LINE",
"518 72 LINE",
"147 72 LINE",
"194 338 LINE",
"527 338 LINE",
"539 405 LINE",
"206 405 LINE",
"251 658 LINE",
"608 658 LINE",
"620 727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
13 10 7 106 6 3 106 6 6 10 17 2 106 17 2 114 10 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 595;
}
);
note = uni0045;
rightKerningGroup = AE;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
name = E;
},
{
name = acute;
transform = "{1, 0, 0, 1, 258, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni00C9;
rightKerningGroup = AE;
unicode = 00C9;
},
{
glyphname = Ecaron;
layers = (
{
components = (
{
name = E;
},
{
name = caron;
transform = "{1, 0, 0, 1, 175, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni011A;
rightKerningGroup = AE;
unicode = 011A;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
name = E;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 185, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni00CA;
rightKerningGroup = AE;
unicode = 00CA;
},
{
glyphname = Ecircumflexacute;
layers = (
{
components = (
{
name = E;
},
{
name = uniE020;
transform = "{1, 0, 0, 1, 161, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EBE;
unicode = 1EBE;
},
{
glyphname = Ecircumflexdotbelow;
lastChange = "2019-06-03 11:07:49 +0000";
layers = (
{
components = (
{
name = E;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 578, 0}";
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 185, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 596;
}
);
note = uni1EC6;
unicode = 1EC6;
changeCount = 1;
},
{
glyphname = Ecircumflexgrave;
layers = (
{
components = (
{
name = E;
},
{
name = uniE021;
transform = "{1, 0, 0, 1, 123, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EC0;
unicode = 1EC0;
},
{
glyphname = Ecircumflexhookabove;
layers = (
{
components = (
{
name = E;
},
{
name = uniE022;
transform = "{1, 0, 0, 1, 130, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EC2;
unicode = 1EC2;
},
{
glyphname = Ecircumflextilde;
layers = (
{
components = (
{
name = E;
},
{
name = uniE023;
transform = "{1, 0, 0, 1, 149, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EC4;
unicode = 1EC4;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
name = E;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 218, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni00CB;
rightKerningGroup = AE;
unicode = 00CB;
},
{
glyphname = Edotaccent;
layers = (
{
components = (
{
name = E;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 298, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni0116;
rightKerningGroup = AE;
unicode = 0116;
},
{
glyphname = Edotbelow;
layers = (
{
components = (
{
name = E;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 578, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EB8;
unicode = 1EB8;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
name = E;
},
{
name = grave;
transform = "{1, 0, 0, 1, 194, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni00C8;
rightKerningGroup = AE;
unicode = 00C8;
},
{
glyphname = Ehookabove;
layers = (
{
components = (
{
name = E;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 575, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EBA;
unicode = 1EBA;
},
{
glyphname = Emacron;
layers = (
{
components = (
{
name = E;
},
{
name = macron;
transform = "{1, 0, 0, 1, 208, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni0112;
rightKerningGroup = AE;
unicode = 0112;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"446 0 LINE",
"420 -15 OFFCURVE",
"373 -57 OFFCURVE",
"359 -81 QCURVE SMOOTH",
"343 -108 OFFCURVE",
"343 -133 QCURVE SMOOTH",
"343 -164 OFFCURVE",
"388 -187 OFFCURVE",
"417 -187 QCURVE SMOOTH",
"448 -187 OFFCURVE",
"486 -178 QCURVE",
"491 -147 LINE",
"491 -140 OFFCURVE",
"482 -132 OFFCURVE",
"475 -132 QCURVE SMOOTH",
"466 -132 OFFCURVE",
"452 -136 QCURVE",
"449 -136 OFFCURVE",
"443 -138 QCURVE",
"437 -139 OFFCURVE",
"432 -139 QCURVE SMOOTH",
"400 -139 OFFCURVE",
"400 -115 QCURVE SMOOTH",
"400 -96 OFFCURVE",
"435 -51 OFFCURVE",
"485 -12 OFFCURVE",
"506 0 QCURVE",
"518 72 LINE",
"147 72 LINE",
"194 338 LINE",
"527 338 LINE",
"539 405 LINE",
"206 405 LINE",
"251 658 LINE",
"608 658 LINE",
"620 727 LINE",
"186 727 LINE",
"167 615 OFFCURVE",
"127 393 QCURVE SMOOTH",
"73 87 LINE",
"62 23 LINE",
"61 19 OFFCURVE",
"61 16 QCURVE SMOOTH",
"61 9 OFFCURVE",
"64 6 QCURVE",
"68 0 OFFCURVE",
"79 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
19 46 17 106 46 8 114 13 16 106 13 13 9 35 37 25 106 37 9 12 106 9 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 596;
}
);
note = uni0118;
rightKerningGroup = AE;
unicode = 0118;
},
{
glyphname = Etilde;
layers = (
{
components = (
{
name = E;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 202, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni1EBC;
unicode = 1EBC;
},
{
glyphname = F;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"134 0 LINE",
"194 338 LINE",
"527 338 LINE",
"539 405 LINE",
"206 405 LINE",
"251 658 LINE",
"609 658 LINE",
"621 727 LINE",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
2 15 13 10 106 13 13 15 6 9 106 6 2 114 15 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 565;
}
);
note = uni0046;
rightKerningGroup = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"568 0 LINE",
"622 302 LINE",
"623 306 OFFCURVE",
"628 333 OFFCURVE",
"628 341 QCURVE SMOOTH",
"628 359 OFFCURVE",
"603 359 QCURVE SMOOTH",
"557 359 LINE",
"530 204 LINE SMOOTH",
"525 179 OFFCURVE",
"515 155 OFFCURVE",
"502 142 QCURVE",
"502 139 OFFCURVE",
"450 96 OFFCURVE",
"375 60 OFFCURVE",
"335 60 QCURVE SMOOTH",
"248 60 OFFCURVE",
"156 142 OFFCURVE",
"156 234 QCURVE SMOOTH",
"156 362 OFFCURVE",
"229 561 OFFCURVE",
"367 673 OFFCURVE",
"461 673 QCURVE SMOOTH",
"506 673 OFFCURVE",
"565 655 OFFCURVE",
"595 636 QCURVE",
"596 635 OFFCURVE",
"608 627 OFFCURVE",
"614 627 QCURVE SMOOTH",
"623 627 OFFCURVE",
"629 638 QCURVE SMOOTH",
"664 705 LINE",
"625 720 OFFCURVE",
"522 742 OFFCURVE",
"469 742 QCURVE SMOOTH",
"331 742 OFFCURVE",
"151 589 OFFCURVE",
"70 352 OFFCURVE",
"70 222 QCURVE SMOOTH",
"70 141 OFFCURVE",
"124 36 OFFCURVE",
"215 -12 OFFCURVE",
"274 -12 QCURVE SMOOTH",
"330 -12 OFFCURVE",
"409 8 OFFCURVE",
"452 34 OFFCURVE",
"473 51 QCURVE",
"481 57 OFFCURVE",
"495 67 OFFCURVE",
"500 67 QCURVE SMOOTH",
"507 67 OFFCURVE",
"507 58 QCURVE SMOOTH",
"507 53 OFFCURVE",
"505 40 QCURVE",
"502 27 OFFCURVE",
"502 20 QCURVE SMOOTH",
"502 0 OFFCURVE",
"521 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
57 8 114 51 51 15 23 35 106 23 3 114 15 42 106 15 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 675;
}
);
leftKerningGroup = G;
note = uni0047;
rightKerningGroup = G;
unicode = 0047;
},
{
glyphname = Gbreve;
layers = (
{
components = (
{
name = G;
},
{
name = breve;
transform = "{1, 0, 0, 1, 245, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 675;
}
);
leftKerningGroup = G;
note = uni011E;
rightKerningGroup = G;
unicode = 011E;
},
{
glyphname = Gcommaaccent;
layers = (
{
components = (
{
name = G;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 399, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 675;
}
);
leftKerningGroup = G;
note = uni0122;
rightKerningGroup = G;
unicode = 0122;
},
{
glyphname = H;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"609 0 LINE",
"729 670 LINE",
"730 674 OFFCURVE",
"735 701 OFFCURVE",
"735 709 QCURVE SMOOTH",
"735 718 OFFCURVE",
"725 727 OFFCURVE",
"711 727 QCURVE SMOOTH",
"662 727 LINE",
"605 406 LINE",
"207 406 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"195 335 LINE",
"593 335 LINE",
"542 57 LINE",
"541 53 OFFCURVE",
"536 26 OFFCURVE",
"536 18 QCURVE SMOOTH",
"536 9 OFFCURVE",
"546 0 OFFCURVE",
"560 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
35 3 13 10 21 31 28 17 8 25 106 8 8 10 17 2 114 10 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 733;
}
);
note = uni0048;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
11 8 3 15 2 114 8 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 258;
}
);
leftKerningGroup = I;
note = uni0049;
unicode = 0049;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
name = I;
},
{
name = acute;
transform = "{1, 0, 0, 1, 106, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni00CD;
unicode = 00CD;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
name = I;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, -10, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni00CE;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
name = I;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 41, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni00CF;
unicode = 00CF;
},
{
glyphname = Idotaccent;
layers = (
{
components = (
{
name = I;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 111, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni0130;
unicode = 0130;
},
{
glyphname = Idotbelow;
layers = (
{
components = (
{
name = I;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 384, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
note = uni1ECA;
unicode = 1ECA;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
name = I;
},
{
name = grave;
transform = "{1, 0, 0, 1, -26, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni00CC;
unicode = 00CC;
},
{
glyphname = Ihookabove;
layers = (
{
components = (
{
name = I;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 390, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
note = uni1EC8;
unicode = 1EC8;
},
{
glyphname = Imacron;
layers = (
{
components = (
{
name = I;
},
{
name = macron;
transform = "{1, 0, 0, 1, 29, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni012A;
unicode = 012A;
},
{
glyphname = Iogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"35 -24 OFFCURVE",
"-28 -96 OFFCURVE",
"-28 -133 QCURVE SMOOTH",
"-28 -164 OFFCURVE",
"17 -187 OFFCURVE",
"46 -187 QCURVE SMOOTH",
"77 -187 OFFCURVE",
"115 -178 QCURVE",
"120 -147 LINE",
"120 -140 OFFCURVE",
"111 -132 OFFCURVE",
"104 -132 QCURVE SMOOTH",
"95 -132 OFFCURVE",
"81 -136 QCURVE",
"78 -136 OFFCURVE",
"72 -138 QCURVE",
"66 -139 OFFCURVE",
"61 -139 QCURVE SMOOTH",
"29 -139 OFFCURVE",
"29 -115 QCURVE SMOOTH",
"29 -96 OFFCURVE",
"64 -51 OFFCURVE",
"114 -12 OFFCURVE",
"135 0 QCURVE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 10 OFFCURVE",
"70 0 OFFCURVE",
"77 0 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
30 32 20 106 32 38 14 8 10 6 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 258;
}
);
leftKerningGroup = I;
note = uni012E;
unicode = 012E;
},
{
glyphname = Itilde;
layers = (
{
components = (
{
name = I;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 9, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = I;
note = uni0128;
unicode = 0128;
},
{
glyphname = J;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"463 670 LINE",
"464 674 OFFCURVE",
"469 701 OFFCURVE",
"469 709 QCURVE SMOOTH",
"469 718 OFFCURVE",
"459 727 OFFCURVE",
"445 727 QCURVE SMOOTH",
"396 727 LINE",
"311 212 LINE SMOOTH",
"301 149 OFFCURVE",
"258 81 OFFCURVE",
"202 58 OFFCURVE",
"163 58 QCURVE SMOOTH",
"125 58 OFFCURVE",
"52 77 OFFCURVE",
"25 90 QCURVE",
"0 26 LINE",
"34 10 OFFCURVE",
"118 -12 OFFCURVE",
"157 -12 QCURVE SMOOTH",
"219 -12 OFFCURVE",
"310 25 OFFCURVE",
"375 127 OFFCURVE",
"390 220 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
19 15 3 10 106 15 2 114 3 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 467;
}
);
leftKerningGroup = J;
note = uni004A;
rightKerningGroup = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"135 0 LINE",
"196 343 LINE",
"304 343 LINE",
"500 20 LINE",
"508 8 OFFCURVE",
"520 0 OFFCURVE",
"531 0 QCURVE SMOOTH",
"613 0 LINE",
"378 385 LINE",
"690 727 LINE",
"618 727 LINE SMOOTH",
"607 727 OFFCURVE",
"591 719 OFFCURVE",
"580 707 QCURVE SMOOTH",
"313 413 LINE",
"208 413 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
21 28 14 106 28 28 6 26 23 2 30 8 114 20 16 10 6 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 646;
}
);
note = uni004B;
rightKerningGroup = K;
unicode = 004B;
},
{
glyphname = Kcommaaccent;
layers = (
{
components = (
{
name = K;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 376, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 646;
}
);
note = uni0136;
rightKerningGroup = K;
unicode = 0136;
},
{
glyphname = L;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"472 0 LINE",
"486 75 LINE",
"148 75 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
13 10 3 17 10 7 106 17 2 114 10 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 524;
}
);
note = uni004C;
rightKerningGroup = L;
unicode = 004C;
},
{
glyphname = Lacute;
layers = (
{
components = (
{
name = L;
},
{
name = acute;
transform = "{1, 0, 0, 1, 174, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 524;
}
);
note = uni0139;
rightKerningGroup = L;
unicode = 0139;
},
{
glyphname = Lcaron;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = glyph00592;
transform = "{1, 0, 0, 1, 624, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 524;
}
);
note = uni013D;
rightKerningGroup = L;
unicode = 013D;
changeCount = 2;
},
{
glyphname = Lcommaaccent;
layers = (
{
components = (
{
name = L;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 348, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 524;
}
);
note = uni013B;
rightKerningGroup = L;
unicode = 013B;
},
{
glyphname = Lslash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"28 244 LINE",
"110 292 LINE",
"69 57 LINE",
"68 53 OFFCURVE",
"63 26 OFFCURVE",
"63 18 QCURVE SMOOTH",
"63 9 OFFCURVE",
"73 0 OFFCURVE",
"87 0 QCURVE SMOOTH",
"473 0 LINE",
"487 75 LINE",
"149 75 LINE",
"194 329 LINE",
"316 397 LINE SMOOTH",
"331 405 OFFCURVE",
"340 422 OFFCURVE",
"343 437 QCURVE SMOOTH",
"353 488 LINE",
"207 402 LINE",
"255 670 LINE",
"256 674 OFFCURVE",
"261 701 OFFCURVE",
"261 709 QCURVE SMOOTH",
"261 718 OFFCURVE",
"251 727 OFFCURVE",
"237 727 QCURVE SMOOTH",
"187 727 LINE",
"123 363 LINE",
"40 317 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
16 2 23 20 17 106 20 8 114 6 2 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 525;
}
);
note = uni0141;
rightKerningGroup = L;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"836 0 LINE",
"878 687 LINE",
"879 710 LINE",
"879 720 OFFCURVE",
"872 727 OFFCURVE",
"862 727 QCURVE SMOOTH",
"755 727 LINE",
"444 70 LINE",
"368 706 LINE",
"366 718 OFFCURVE",
"358 727 OFFCURVE",
"347 727 QCURVE SMOOTH",
"241 727 LINE",
"27 0 LINE",
"82 0 LINE SMOOTH",
"93 0 OFFCURVE",
"104 10 OFFCURVE",
"108 23 QCURVE SMOOTH",
"296 657 LINE",
"379 21 LINE",
"381 9 OFFCURVE",
"389 0 OFFCURVE",
"400 0 QCURVE SMOOTH",
"481 0 LINE",
"799 657 LINE",
"766 39 LINE",
"765 16 LINE",
"765 7 OFFCURVE",
"772 0 OFFCURVE",
"781 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
4 10 10 23 16 2 114 21 6 6 29 2 15 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 926;
}
);
leftKerningGroup = M;
note = uni004D;
rightKerningGroup = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"185 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"131 0 LINE",
"247 657 LINE",
"497 28 LINE SMOOTH",
"504 12 OFFCURVE",
"517 0 OFFCURVE",
"534 0 QCURVE SMOOTH",
"628 0 LINE",
"747 670 LINE",
"748 674 OFFCURVE",
"753 701 OFFCURVE",
"753 709 QCURVE SMOOTH",
"753 718 OFFCURVE",
"743 727 OFFCURVE",
"729 727 QCURVE SMOOTH",
"684 727 LINE",
"568 70 LINE",
"323 699 LINE",
"316 715 OFFCURVE",
"303 727 OFFCURVE",
"286 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 5 26 2 114 3 13 13 22 19 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 751;
}
);
note = uni004E;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
name = N;
},
{
name = acute;
transform = "{1, 0, 0, 1, 348, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 751;
}
);
note = uni0143;
unicode = 0143;
},
{
glyphname = Ncaron;
layers = (
{
components = (
{
name = N;
},
{
name = caron;
transform = "{1, 0, 0, 1, 247, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 751;
}
);
note = uni0147;
unicode = 0147;
},
{
glyphname = Ncommaaccent;
layers = (
{
components = (
{
name = N;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 431, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 751;
}
);
note = uni0145;
unicode = 0145;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
name = N;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 278, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 751;
}
);
note = uni00D1;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"459 -16 OFFCURVE",
"631 135 OFFCURVE",
"707 368 OFFCURVE",
"707 495 QCURVE SMOOTH",
"707 620 OFFCURVE",
"584 740 OFFCURVE",
"456 740 QCURVE SMOOTH",
"321 740 OFFCURVE",
"148 590 OFFCURVE",
"70 359 OFFCURVE",
"70 233 QCURVE SMOOTH",
"70 107 OFFCURVE",
"195 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"243 55 OFFCURVE",
"155 142 OFFCURVE",
"155 241 QCURVE SMOOTH",
"155 368 OFFCURVE",
"223 563 OFFCURVE",
"352 672 OFFCURVE",
"443 672 QCURVE SMOOTH",
"506 672 OFFCURVE",
"586 635 OFFCURVE",
"625 555 OFFCURVE",
"625 489 QCURVE SMOOTH",
"625 360 OFFCURVE",
"559 165 OFFCURVE",
"429 55 OFFCURVE",
"334 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 28 106 6 21 106 6 3 114 13 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 715;
}
);
leftKerningGroup = O;
note = uni004F;
rightKerningGroup = O;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
name = O;
},
{
name = acute;
transform = "{1, 0, 0, 1, 311, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni00D3;
rightKerningGroup = O;
unicode = 00D3;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
name = O;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 231, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni00D4;
rightKerningGroup = O;
unicode = 00D4;
},
{
glyphname = Ocircumflexacute;
layers = (
{
components = (
{
name = O;
},
{
name = uniE020;
transform = "{1, 0, 0, 1, 209, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ED0;
rightKerningGroup = O;
unicode = 1ED0;
},
{
glyphname = Ocircumflexdotbelow;
layers = (
{
components = (
{
name = O;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 601, 0}";
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 231, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ED8;
rightKerningGroup = O;
unicode = 1ED8;
},
{
glyphname = Ocircumflexgrave;
layers = (
{
components = (
{
name = O;
},
{
name = uniE021;
transform = "{1, 0, 0, 1, 164, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ED2;
rightKerningGroup = O;
unicode = 1ED2;
},
{
glyphname = Ocircumflexhookabove;
layers = (
{
components = (
{
name = O;
},
{
name = uniE022;
transform = "{1, 0, 0, 1, 183, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ED4;
rightKerningGroup = O;
unicode = 1ED4;
},
{
glyphname = Ocircumflextilde;
layers = (
{
components = (
{
name = O;
},
{
name = uniE023;
transform = "{1, 0, 0, 1, 188, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ED6;
rightKerningGroup = O;
unicode = 1ED6;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
name = O;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 266, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni00D6;
rightKerningGroup = O;
unicode = 00D6;
},
{
glyphname = Odotbelow;
layers = (
{
components = (
{
name = O;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 607, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ECC;
rightKerningGroup = O;
unicode = 1ECC;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
name = O;
},
{
name = grave;
transform = "{1, 0, 0, 1, 229, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni00D2;
rightKerningGroup = O;
unicode = 00D2;
},
{
glyphname = Ohookabove;
layers = (
{
components = (
{
name = O;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 636, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni1ECE;
rightKerningGroup = O;
unicode = 1ECE;
},
{
glyphname = Ohorn;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"459 -16 OFFCURVE",
"631 135 OFFCURVE",
"707 368 OFFCURVE",
"707 495 QCURVE SMOOTH",
"707 572 OFFCURVE",
"683 624 QCURVE",
"690 623 OFFCURVE",
"702 623 QCURVE SMOOTH",
"743 623 OFFCURVE",
"803 666 OFFCURVE",
"834 734 OFFCURVE",
"834 773 QCURVE SMOOTH",
"834 790 OFFCURVE",
"821 808 OFFCURVE",
"806 808 QCURVE SMOOTH",
"799 808 OFFCURVE",
"785 805 QCURVE SMOOTH",
"750 798 LINE",
"753 778 OFFCURVE",
"753 755 QCURVE SMOOTH",
"753 718 OFFCURVE",
"725 672 OFFCURVE",
"695 672 QCURVE SMOOTH",
"676 672 OFFCURVE",
"645 680 OFFCURVE",
"632 691 QCURVE",
"600 716 OFFCURVE",
"514 740 OFFCURVE",
"456 740 QCURVE SMOOTH",
"321 740 OFFCURVE",
"148 590 OFFCURVE",
"70 359 OFFCURVE",
"70 233 QCURVE SMOOTH",
"70 107 OFFCURVE",
"195 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"243 55 OFFCURVE",
"155 142 OFFCURVE",
"155 241 QCURVE SMOOTH",
"155 368 OFFCURVE",
"223 563 OFFCURVE",
"352 672 OFFCURVE",
"443 672 QCURVE SMOOTH",
"506 672 OFFCURVE",
"586 635 OFFCURVE",
"625 555 OFFCURVE",
"625 489 QCURVE SMOOTH",
"625 360 OFFCURVE",
"559 165 OFFCURVE",
"429 55 OFFCURVE",
"334 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
27 12 6 35 50 106 35 9 114 6 43 106 20 6 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 719;
}
);
leftKerningGroup = O;
note = uni01A0;
unicode = 01A0;
},
{
glyphname = Ohornacute;
layers = (
{
components = (
{
name = Ohorn;
},
{
name = acute;
transform = "{1, 0, 0, 1, 311, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 719;
}
);
leftKerningGroup = O;
note = uni1EDA;
unicode = 1EDA;
},
{
glyphname = Ohorndotbelow;
layers = (
{
components = (
{
name = Ohorn;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 607, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 719;
}
);
leftKerningGroup = O;
note = uni1EE2;
unicode = 1EE2;
},
{
glyphname = Ohorngrave;
layers = (
{
components = (
{
name = Ohorn;
},
{
name = grave;
transform = "{1, 0, 0, 1, 229, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 719;
}
);
leftKerningGroup = O;
note = uni1EDC;
unicode = 1EDC;
},
{
glyphname = Ohornhookabove;
layers = (
{
components = (
{
name = Ohorn;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 636, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 719;
}
);
leftKerningGroup = O;
note = uni1EDE;
unicode = 1EDE;
},
{
glyphname = Ohorntilde;
layers = (
{
components = (
{
name = Ohorn;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 245, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 719;
}
);
leftKerningGroup = O;
note = uni1EE0;
unicode = 1EE0;
},
{
glyphname = Ohungarumlaut;
layers = (
{
components = (
{
name = O;
},
{
name = hungarumlaut;
transform = "{1, 0, 0, 1, 253, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni0150;
rightKerningGroup = O;
unicode = 0150;
},
{
glyphname = Omacron;
layers = (
{
components = (
{
name = O;
},
{
name = macron;
transform = "{1, 0, 0, 1, 258, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni014C;
rightKerningGroup = O;
unicode = 014C;
},
{
glyphname = Oslash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"459 -16 OFFCURVE",
"631 135 OFFCURVE",
"707 368 OFFCURVE",
"707 495 QCURVE SMOOTH",
"707 620 OFFCURVE",
"584 740 OFFCURVE",
"456 740 QCURVE SMOOTH",
"321 740 OFFCURVE",
"148 590 OFFCURVE",
"70 359 OFFCURVE",
"70 233 QCURVE SMOOTH",
"70 107 OFFCURVE",
"195 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"155 368 OFFCURVE",
"223 563 OFFCURVE",
"352 672 OFFCURVE",
"443 672 QCURVE SMOOTH",
"495 672 OFFCURVE",
"568 646 OFFCURVE",
"589 619 QCURVE",
"170 144 LINE",
"155 183 OFFCURVE",
"155 241 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"286 55 OFFCURVE",
"217 78 OFFCURVE",
"195 103 QCURVE",
"613 574 LINE",
"625 540 OFFCURVE",
"625 489 QCURVE SMOOTH",
"625 360 OFFCURVE",
"559 165 OFFCURVE",
"429 55 OFFCURVE",
"334 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
29 15 19 13 33 106 13 9 114 6 19 106 6 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 715;
}
);
leftKerningGroup = O;
note = uni00D8;
rightKerningGroup = O;
unicode = 00D8;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
name = O;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 245, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = uni00D5;
rightKerningGroup = O;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"837 0 LINE",
"850 72 LINE",
"519 72 LINE",
"566 338 LINE",
"859 338 LINE",
"871 405 LINE",
"578 405 LINE",
"623 658 LINE",
"940 658 LINE",
"952 727 LINE",
"598 727 LINE SMOOTH",
"579 727 OFFCURVE",
"557 729 QCURVE",
"534 730 OFFCURVE",
"524 730 QCURVE",
"488 732 OFFCURVE",
"474 732 QCURVE SMOOTH",
"342 732 OFFCURVE",
"162 601 OFFCURVE",
"73 378 OFFCURVE",
"73 239 QCURVE SMOOTH",
"73 116 OFFCURVE",
"202 -5 OFFCURVE",
"344 -5 QCURVE SMOOTH",
"358 -5 OFFCURVE",
"394 -3 QCURVE",
"404 -3 OFFCURVE",
"427 -2 QCURVE",
"450 0 OFFCURVE",
"469 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"442 70 LINE",
"405 67 OFFCURVE",
"356 67 QCURVE SMOOTH",
"286 67 OFFCURVE",
"199 105 OFFCURVE",
"157 184 OFFCURVE",
"157 248 QCURVE SMOOTH",
"157 365 OFFCURVE",
"224 551 OFFCURVE",
"360 660 OFFCURVE",
"461 660 QCURVE SMOOTH",
"494 660 OFFCURVE",
"545 657 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
29 26 106 29 8 114 18 21 106 18 2 114 25 22 106 25 25 5 12 31 106 12 2 114 5 39 106 5 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 927;
}
);
leftKerningGroup = O;
note = uni0152;
rightKerningGroup = AE;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"184 276 LINE",
"261 272 OFFCURVE",
"309 272 QCURVE SMOOTH",
"429 272 OFFCURVE",
"574 339 OFFCURVE",
"639 470 OFFCURVE",
"639 570 QCURVE SMOOTH",
"639 627 OFFCURVE",
"589 699 OFFCURVE",
"486 734 OFFCURVE",
"405 734 QCURVE SMOOTH",
"297 734 OFFCURVE",
"187 731 QCURVE"
);
},
{
closed = 1;
nodes = (
"253 669 LINE",
"255 669 OFFCURVE",
"289 671 QCURVE SMOOTH",
"322 672 OFFCURVE",
"392 672 QCURVE SMOOTH",
"453 672 OFFCURVE",
"525 648 OFFCURVE",
"557 596 OFFCURVE",
"557 552 QCURVE SMOOTH",
"557 335 OFFCURVE",
"341 335 QCURVE SMOOTH",
"273 335 OFFCURVE",
"195 340 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
16 13 20 1 9 22 106 9 9 13 1 28 106 1 3 114 13 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 621;
}
);
note = uni0050;
rightKerningGroup = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"161 145 LINE",
"239 141 OFFCURVE",
"286 141 QCURVE SMOOTH",
"406 141 OFFCURVE",
"551 208 OFFCURVE",
"616 339 OFFCURVE",
"616 439 QCURVE SMOOTH",
"616 496 OFFCURVE",
"566 568 OFFCURVE",
"463 603 OFFCURVE",
"382 603 QCURVE SMOOTH",
"307 603 OFFCURVE",
"241 600 QCURVE"
);
},
{
closed = 1;
nodes = (
"230 538 LINE",
"298 541 OFFCURVE",
"369 541 QCURVE SMOOTH",
"430 541 OFFCURVE",
"502 517 OFFCURVE",
"534 465 OFFCURVE",
"534 421 QCURVE SMOOTH",
"534 204 OFFCURVE",
"318 204 QCURVE SMOOTH",
"250 204 OFFCURVE",
"172 209 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
16 13 24 20 9 30 106 9 9 13 20 1 36 106 1 1 13 20 2 114 13 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 620;
}
);
note = uni00DE;
rightKerningGroup = P;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"459 -16 OFFCURVE",
"631 135 OFFCURVE",
"707 368 OFFCURVE",
"707 495 QCURVE SMOOTH",
"707 620 OFFCURVE",
"584 740 OFFCURVE",
"456 740 QCURVE SMOOTH",
"321 740 OFFCURVE",
"148 590 OFFCURVE",
"70 359 OFFCURVE",
"70 233 QCURVE SMOOTH",
"70 107 OFFCURVE",
"195 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"243 55 OFFCURVE",
"155 142 OFFCURVE",
"155 241 QCURVE SMOOTH",
"155 368 OFFCURVE",
"223 563 OFFCURVE",
"352 672 OFFCURVE",
"443 672 QCURVE SMOOTH",
"506 672 OFFCURVE",
"586 635 OFFCURVE",
"625 555 OFFCURVE",
"625 489 QCURVE SMOOTH",
"625 360 OFFCURVE",
"559 165 OFFCURVE",
"429 55 OFFCURVE",
"334 55 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"631 -128 LINE",
"618 -138 OFFCURVE",
"578 -151 OFFCURVE",
"554 -151 QCURVE SMOOTH",
"539 -151 OFFCURVE",
"505 -138 OFFCURVE",
"486 -124 QCURVE SMOOTH",
"466 -110 OFFCURVE",
"463 -108 QCURVE",
"426 -79 OFFCURVE",
"364 -48 OFFCURVE",
"323 -48 QCURVE SMOOTH",
"290 -48 OFFCURVE",
"226 -65 OFFCURVE",
"202 -78 QCURVE",
"227 -138 LINE",
"243 -128 OFFCURVE",
"286 -113 OFFCURVE",
"309 -113 QCURVE SMOOTH",
"331 -113 OFFCURVE",
"370 -134 OFFCURVE",
"401 -157 QCURVE SMOOTH",
"427 -176 OFFCURVE",
"464 -199 OFFCURVE",
"512 -216 OFFCURVE",
"539 -216 QCURVE SMOOTH",
"571 -216 OFFCURVE",
"632 -199 OFFCURVE",
"654 -186 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
45 38 106 45 45 13 31 53 106 63 31 79 31 95 31 3 31 13 28 106 13 9 114 6 21 106 6 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 715;
}
);
leftKerningGroup = Q;
note = uni0051;
rightKerningGroup = Q;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"463 30 OFFCURVE",
"463 18 QCURVE SMOOTH",
"463 9 OFFCURVE",
"473 0 OFFCURVE",
"487 0 QCURVE SMOOTH",
"536 0 LINE",
"543 54 OFFCURVE",
"553 112 QCURVE SMOOTH",
"560 154 OFFCURVE",
"569 226 OFFCURVE",
"569 243 QCURVE SMOOTH",
"569 269 OFFCURVE",
"552 307 OFFCURVE",
"531 323 QCURVE",
"519 331 OFFCURVE",
"514 337 OFFCURVE",
"514 342 QCURVE SMOOTH",
"514 347 OFFCURVE",
"524 356 OFFCURVE",
"531 359 QCURVE",
"567 379 OFFCURVE",
"615 456 OFFCURVE",
"637 546 OFFCURVE",
"637 589 QCURVE SMOOTH",
"637 644 OFFCURVE",
"592 707 OFFCURVE",
"492 734 OFFCURVE",
"404 734 QCURVE SMOOTH",
"287 734 OFFCURVE",
"187 731 QCURVE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"188 302 LINE",
"380 302 LINE SMOOTH",
"422 302 OFFCURVE",
"470 286 OFFCURVE",
"492 250 OFFCURVE",
"492 219 QCURVE SMOOTH",
"492 207 OFFCURVE",
"482 139 OFFCURVE",
"476 103 QCURVE SMOOTH",
"470 69 OFFCURVE",
"468 57 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"200 368 LINE",
"254 669 LINE",
"326 671 OFFCURVE",
"390 671 QCURVE SMOOTH",
"453 671 OFFCURVE",
"525 652 OFFCURVE",
"556 611 OFFCURVE",
"556 576 QCURVE SMOOTH",
"556 475 OFFCURVE",
"491 389 QCURVE",
"482 379 OFFCURVE",
"472 372 OFFCURVE",
"447 368 OFFCURVE",
"421 368 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
31 61 9 106 61 61 11 20 58 106 18 20 3 114 46 43 14 11 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 652;
}
);
note = uni0052;
rightKerningGroup = R;
unicode = 0052;
},
{
glyphname = Racute;
layers = (
{
components = (
{
name = R;
},
{
name = acute;
transform = "{1, 0, 0, 1, 261, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 652;
}
);
note = uni0154;
rightKerningGroup = R;
unicode = 0154;
},
{
glyphname = Rcaron;
layers = (
{
components = (
{
name = R;
},
{
name = caron;
transform = "{1, 0, 0, 1, 178, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 652;
}
);
note = uni0158;
rightKerningGroup = R;
unicode = 0158;
},
{
glyphname = Rcommaaccent;
layers = (
{
components = (
{
name = R;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 385, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 652;
}
);
note = uni0156;
rightKerningGroup = R;
unicode = 0156;
},
{
glyphname = S;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"35 55 LINE",
"72 27 OFFCURVE",
"184 -12 OFFCURVE",
"248 -12 QCURVE SMOOTH",
"330 -12 OFFCURVE",
"445 43 OFFCURVE",
"503 136 OFFCURVE",
"503 193 QCURVE SMOOTH",
"503 239 OFFCURVE",
"468 303 OFFCURVE",
"408 350 OFFCURVE",
"355 382 QCURVE SMOOTH",
"323 400 LINE SMOOTH",
"277 426 OFFCURVE",
"227 462 OFFCURVE",
"193 511 OFFCURVE",
"193 544 QCURVE SMOOTH",
"193 583 OFFCURVE",
"239 640 OFFCURVE",
"313 670 OFFCURVE",
"356 670 QCURVE SMOOTH",
"391 670 OFFCURVE",
"440 650 OFFCURVE",
"464 634 QCURVE",
"471 630 OFFCURVE",
"484 623 OFFCURVE",
"487 623 QCURVE SMOOTH",
"496 623 OFFCURVE",
"502 634 QCURVE",
"541 699 LINE",
"510 715 OFFCURVE",
"419 737 OFFCURVE",
"368 737 QCURVE SMOOTH",
"287 737 OFFCURVE",
"171 682 OFFCURVE",
"111 589 OFFCURVE",
"111 534 QCURVE SMOOTH",
"111 485 OFFCURVE",
"150 417 OFFCURVE",
"215 370 OFFCURVE",
"267 342 QCURVE SMOOTH",
"322 312 OFFCURVE",
"381 273 OFFCURVE",
"420 217 OFFCURVE",
"420 178 QCURVE SMOOTH",
"420 116 OFFCURVE",
"323 59 OFFCURVE",
"250 59 QCURVE SMOOTH",
"198 59 OFFCURVE",
"103 95 OFFCURVE",
"69 121 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
10 29 46 39 17 46 2 106 46 9 114 17 29 106 17 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
leftKerningGroup = S;
note = uni0053;
rightKerningGroup = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
name = S;
},
{
name = acute;
transform = "{1, 0, 0, 1, 234, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = S;
note = uni015A;
rightKerningGroup = S;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
name = S;
},
{
name = caron;
transform = "{1, 0, 0, 1, 134, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = S;
note = uni0160;
rightKerningGroup = S;
unicode = 0160;
},
{
glyphname = Scedilla;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"323 400 LINE SMOOTH",
"277 426 OFFCURVE",
"227 462 OFFCURVE",
"193 511 OFFCURVE",
"193 544 QCURVE SMOOTH",
"193 583 OFFCURVE",
"239 640 OFFCURVE",
"313 670 OFFCURVE",
"356 670 QCURVE SMOOTH",
"391 670 OFFCURVE",
"440 650 OFFCURVE",
"464 634 QCURVE",
"471 630 OFFCURVE",
"484 623 OFFCURVE",
"487 623 QCURVE SMOOTH",
"496 623 OFFCURVE",
"502 634 QCURVE",
"541 699 LINE",
"510 715 OFFCURVE",
"419 737 OFFCURVE",
"368 737 QCURVE SMOOTH",
"287 737 OFFCURVE",
"171 682 OFFCURVE",
"111 589 OFFCURVE",
"111 534 QCURVE SMOOTH",
"111 485 OFFCURVE",
"150 417 OFFCURVE",
"215 370 OFFCURVE",
"267 342 QCURVE SMOOTH",
"322 312 OFFCURVE",
"381 273 OFFCURVE",
"420 217 OFFCURVE",
"420 178 QCURVE SMOOTH",
"420 116 OFFCURVE",
"323 59 OFFCURVE",
"250 59 QCURVE SMOOTH",
"198 59 OFFCURVE",
"103 95 OFFCURVE",
"69 121 QCURVE",
"35 55 LINE",
"67 31 OFFCURVE",
"163 -7 OFFCURVE",
"219 -11 QCURVE",
"194 -94 LINE",
"212 -94 LINE SMOOTH",
"251 -94 OFFCURVE",
"251 -115 QCURVE SMOOTH",
"251 -128 OFFCURVE",
"228 -143 OFFCURVE",
"209 -143 QCURVE SMOOTH",
"200 -143 OFFCURVE",
"186 -138 QCURVE SMOOTH",
"171 -133 OFFCURVE",
"167 -133 QCURVE SMOOTH",
"159 -133 OFFCURVE",
"150 -141 OFFCURVE",
"146 -151 QCURVE",
"135 -175 LINE",
"147 -180 OFFCURVE",
"180 -187 OFFCURVE",
"198 -187 QCURVE SMOOTH",
"222 -187 OFFCURVE",
"274 -168 OFFCURVE",
"309 -130 OFFCURVE",
"309 -104 QCURVE SMOOTH",
"309 -61 OFFCURVE",
"251 -57 QCURVE",
"264 -12 LINE",
"340 -9 OFFCURVE",
"448 47 OFFCURVE",
"503 138 OFFCURVE",
"503 193 QCURVE SMOOTH",
"503 239 OFFCURVE",
"468 303 OFFCURVE",
"408 350 OFFCURVE",
"355 382 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHW[ ]\011/* 2 values pushed */
8 -16 
NPUSHB[ ]\011/* 28 values pushed */
8 76 63 31 79 31 2 31 31 14 76 54 66 106 54 3 114 14 25 106 17 14 7 39 106 32 7 9 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
RDTG[ ]\011/* RoundDownToGrid */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
leftKerningGroup = S;
note = uni015E;
rightKerningGroup = S;
unicode = 015E;
},
{
glyphname = Scommaaccent;
layers = (
{
components = (
{
name = S;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 339, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = S;
note = uni0218;
rightKerningGroup = S;
unicode = 0218;
},
{
glyphname = Schwa;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"74 295 OFFCURVE",
"74 239 QCURVE SMOOTH",
"74 112 OFFCURVE",
"198 -16 OFFCURVE",
"326 -16 QCURVE SMOOTH",
"432 -16 OFFCURVE",
"580 66 OFFCURVE",
"674 233 OFFCURVE",
"697 362 QCURVE SMOOTH",
"710 430 OFFCURVE",
"710 491 QCURVE SMOOTH",
"710 615 OFFCURVE",
"587 740 OFFCURVE",
"459 740 QCURVE SMOOTH",
"406 740 OFFCURVE",
"294 718 OFFCURVE",
"248 703 QCURVE",
"259 636 LINE SMOOTH",
"261 625 OFFCURVE",
"270 625 QCURVE SMOOTH",
"277 625 OFFCURVE",
"288 632 QCURVE SMOOTH",
"318 650 OFFCURVE",
"399 672 OFFCURVE",
"446 672 QCURVE SMOOTH",
"509 672 OFFCURVE",
"588 635 OFFCURVE",
"627 555 OFFCURVE",
"627 489 QCURVE SMOOTH",
"627 452 OFFCURVE",
"621 407 QCURVE",
"141 407 LINE SMOOTH",
"117 407 OFFCURVE",
"90 386 OFFCURVE",
"86 362 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"275 55 OFFCURVE",
"196 93 OFFCURVE",
"158 175 OFFCURVE",
"158 241 QCURVE SMOOTH",
"158 286 OFFCURVE",
"165 335 QCURVE",
"609 335 LINE",
"587 228 OFFCURVE",
"520 107 OFFCURVE",
"416 55 OFFCURVE",
"337 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
29 45 106 39 2 106 39 39 29 20 9 106 20 3 114 29 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 721;
}
);
note = uni018F;
unicode = 018F;
},
{
glyphname = T;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"339 658 LINE",
"232 57 LINE",
"231 53 OFFCURVE",
"226 26 OFFCURVE",
"226 18 QCURVE SMOOTH",
"226 9 OFFCURVE",
"236 0 OFFCURVE",
"250 0 QCURVE SMOOTH",
"300 0 LINE",
"417 658 LINE",
"662 658 LINE",
"674 727 LINE",
"106 727 LINE",
"94 658 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
9 6 4 1 0 106 1 2 114 6 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 586;
}
);
leftKerningGroup = T;
note = uni0054;
rightKerningGroup = T;
unicode = 0054;
},
{
glyphname = Tcaron;
layers = (
{
components = (
{
name = T;
},
{
name = caron;
transform = "{1, 0, 0, 1, 164, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 586;
}
);
leftKerningGroup = T;
note = uni0164;
rightKerningGroup = T;
unicode = 0164;
},
{
glyphname = Tcedilla;
layers = (
{
components = (
{
name = T;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 352, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 586;
}
);
leftKerningGroup = T;
note = uni0162;
rightKerningGroup = T;
unicode = 0162;
},
{
glyphname = Tcommaaccent;
layers = (
{
components = (
{
name = T;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 352, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 586;
}
);
leftKerningGroup = T;
note = uni021A;
rightKerningGroup = T;
unicode = 021A;
},
{
glyphname = U;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"601 0 LINE",
"719 670 LINE SMOOTH",
"724 698 OFFCURVE",
"724 709 QCURVE SMOOTH",
"724 718 OFFCURVE",
"714 727 OFFCURVE",
"700 727 QCURVE SMOOTH",
"651 727 LINE",
"559 201 LINE SMOOTH",
"555 178 OFFCURVE",
"537 153 OFFCURVE",
"521 140 QCURVE SMOOTH",
"504 126 OFFCURVE",
"442 88 OFFCURVE",
"360 57 OFFCURVE",
"321 57 QCURVE SMOOTH",
"263 57 OFFCURVE",
"196 85 OFFCURVE",
"166 143 OFFCURVE",
"166 191 QCURVE SMOOTH",
"166 218 OFFCURVE",
"178 301 OFFCURVE",
"186 343 QCURVE SMOOTH",
"201 431 OFFCURVE",
"241 635 OFFCURVE",
"248 670 QCURVE",
"249 674 OFFCURVE",
"254 701 OFFCURVE",
"254 709 QCURVE SMOOTH",
"254 718 OFFCURVE",
"244 727 OFFCURVE",
"230 727 QCURVE SMOOTH",
"180 727 LINE",
"111 360 LINE",
"110 353 OFFCURVE",
"104 322 QCURVE SMOOTH",
"98 290 OFFCURVE",
"85 202 OFFCURVE",
"85 171 QCURVE SMOOTH",
"85 80 OFFCURVE",
"175 -12 OFFCURVE",
"277 -12 QCURVE SMOOTH",
"328 -12 OFFCURVE",
"411 9 OFFCURVE",
"466 37 OFFCURVE",
"494 55 QCURVE SMOOTH",
"505 62 OFFCURVE",
"524 72 OFFCURVE",
"529 72 QCURVE SMOOTH",
"538 72 OFFCURVE",
"538 59 QCURVE SMOOTH",
"538 49 OFFCURVE",
"536 38 QCURVE SMOOTH",
"534 27 OFFCURVE",
"534 18 QCURVE SMOOTH",
"534 9 OFFCURVE",
"544 0 OFFCURVE",
"558 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
29 54 51 25 16 42 106 0 8 114 25 2 114 16 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 722;
}
);
leftKerningGroup = U;
note = uni0055;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
name = U;
},
{
name = acute;
transform = "{1, 0, 0, 1, 313, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni00DA;
unicode = 00DA;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
name = U;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 231, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni00DB;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
name = U;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 274, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni00DC;
unicode = 00DC;
},
{
glyphname = Udotbelow;
layers = (
{
components = (
{
name = U;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 564, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
note = uni1EE4;
unicode = 1EE4;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
name = U;
},
{
name = grave;
transform = "{1, 0, 0, 1, 233, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni00D9;
unicode = 00D9;
},
{
glyphname = Uhookabove;
layers = (
{
components = (
{
name = U;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 636, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
note = uni1EE6;
unicode = 1EE6;
},
{
glyphname = Uhorn;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"601 0 LINE",
"720 678 LINE",
"797 680 OFFCURVE",
"882 756 OFFCURVE",
"882 828 QCURVE SMOOTH",
"882 845 OFFCURVE",
"869 863 OFFCURVE",
"854 863 QCURVE SMOOTH",
"847 863 OFFCURVE",
"833 860 QCURVE SMOOTH",
"798 853 LINE",
"801 833 OFFCURVE",
"801 810 QCURVE SMOOTH",
"801 727 OFFCURVE",
"723 727 QCURVE SMOOTH",
"651 727 LINE",
"559 201 LINE SMOOTH",
"555 178 OFFCURVE",
"537 153 OFFCURVE",
"521 140 QCURVE SMOOTH",
"504 126 OFFCURVE",
"442 88 OFFCURVE",
"360 57 OFFCURVE",
"321 57 QCURVE SMOOTH",
"263 57 OFFCURVE",
"196 85 OFFCURVE",
"166 143 OFFCURVE",
"166 191 QCURVE SMOOTH",
"166 218 OFFCURVE",
"178 301 OFFCURVE",
"186 343 QCURVE SMOOTH",
"201 431 OFFCURVE",
"241 635 OFFCURVE",
"248 670 QCURVE",
"249 674 OFFCURVE",
"254 701 OFFCURVE",
"254 709 QCURVE SMOOTH",
"254 718 OFFCURVE",
"244 727 OFFCURVE",
"230 727 QCURVE SMOOTH",
"180 727 LINE",
"111 360 LINE",
"110 353 OFFCURVE",
"104 322 QCURVE SMOOTH",
"98 290 OFFCURVE",
"85 202 OFFCURVE",
"85 171 QCURVE SMOOTH",
"85 80 OFFCURVE",
"175 -12 OFFCURVE",
"277 -12 QCURVE SMOOTH",
"328 -12 OFFCURVE",
"411 9 OFFCURVE",
"466 37 OFFCURVE",
"494 55 QCURVE SMOOTH",
"505 62 OFFCURVE",
"524 72 OFFCURVE",
"529 72 QCURVE SMOOTH",
"538 72 OFFCURVE",
"538 59 QCURVE SMOOTH",
"538 49 OFFCURVE",
"536 38 QCURVE SMOOTH",
"534 27 OFFCURVE",
"534 18 QCURVE SMOOTH",
"534 9 OFFCURVE",
"544 0 OFFCURVE",
"558 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
65 8 114 63 57 49 49 24 2 114 15 41 106 15 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 724;
}
);
note = uni01AF;
unicode = 01AF;
},
{
glyphname = Uhornacute;
layers = (
{
components = (
{
name = Uhorn;
},
{
name = acute;
transform = "{1, 0, 0, 1, 313, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 724;
}
);
note = uni1EE8;
unicode = 1EE8;
},
{
glyphname = Uhorndotbelow;
layers = (
{
components = (
{
name = Uhorn;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 564, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 724;
}
);
note = uni1EF0;
unicode = 1EF0;
},
{
glyphname = Uhorngrave;
layers = (
{
components = (
{
name = Uhorn;
},
{
name = grave;
transform = "{1, 0, 0, 1, 233, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 724;
}
);
note = uni1EEA;
unicode = 1EEA;
},
{
glyphname = Uhornhookabove;
layers = (
{
components = (
{
name = Uhorn;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 636, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 724;
}
);
note = uni1EEC;
unicode = 1EEC;
},
{
glyphname = Uhorntilde;
layers = (
{
components = (
{
name = Uhorn;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 245, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 724;
}
);
note = uni1EEE;
unicode = 1EEE;
},
{
glyphname = Uhungarumlaut;
layers = (
{
components = (
{
name = U;
},
{
name = hungarumlaut;
transform = "{1, 0, 0, 1, 258, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni0170;
unicode = 0170;
},
{
glyphname = Umacron;
layers = (
{
components = (
{
name = U;
},
{
name = macron;
transform = "{1, 0, 0, 1, 263, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni016A;
unicode = 016A;
},
{
glyphname = Uogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"719 670 LINE SMOOTH",
"724 698 OFFCURVE",
"724 709 QCURVE SMOOTH",
"724 718 OFFCURVE",
"714 727 OFFCURVE",
"700 727 QCURVE SMOOTH",
"651 727 LINE",
"567 245 LINE SMOOTH",
"559 206 OFFCURVE",
"550 173 OFFCURVE",
"536 153 OFFCURVE",
"521 140 QCURVE SMOOTH",
"504 126 OFFCURVE",
"442 88 OFFCURVE",
"360 57 OFFCURVE",
"321 57 QCURVE SMOOTH",
"263 57 OFFCURVE",
"196 85 OFFCURVE",
"166 143 OFFCURVE",
"166 191 QCURVE SMOOTH",
"166 218 OFFCURVE",
"178 301 OFFCURVE",
"186 343 QCURVE SMOOTH",
"205 455 OFFCURVE",
"241 634 QCURVE SMOOTH",
"248 670 LINE",
"249 674 OFFCURVE",
"254 701 OFFCURVE",
"254 709 QCURVE SMOOTH",
"254 718 OFFCURVE",
"244 727 OFFCURVE",
"230 727 QCURVE SMOOTH",
"180 727 LINE",
"111 360 LINE",
"107 337 LINE SMOOTH",
"94 269 OFFCURVE",
"88 218 QCURVE SMOOTH",
"85 193 OFFCURVE",
"85 171 QCURVE SMOOTH",
"85 80 OFFCURVE",
"175 -12 OFFCURVE",
"277 -12 QCURVE SMOOTH",
"331 -12 OFFCURVE",
"418 10 OFFCURVE",
"474 39 OFFCURVE",
"501 57 QCURVE SMOOTH",
"504 59 OFFCURVE",
"509 63 QCURVE",
"514 66 OFFCURVE",
"526 72 OFFCURVE",
"529 72 QCURVE SMOOTH",
"538 72 OFFCURVE",
"538 59 QCURVE SMOOTH",
"538 54 OFFCURVE",
"536 38 QCURVE SMOOTH",
"534 18 LINE",
"534 0 OFFCURVE",
"547 0 QCURVE",
"521 -16 OFFCURVE",
"470 -59 OFFCURVE",
"455 -82 QCURVE SMOOTH",
"438 -109 OFFCURVE",
"438 -133 QCURVE SMOOTH",
"438 -164 OFFCURVE",
"483 -187 OFFCURVE",
"512 -187 QCURVE SMOOTH",
"543 -187 OFFCURVE",
"581 -178 QCURVE",
"586 -147 LINE",
"586 -140 OFFCURVE",
"577 -132 OFFCURVE",
"570 -132 QCURVE SMOOTH",
"561 -132 OFFCURVE",
"547 -136 QCURVE",
"544 -136 OFFCURVE",
"538 -138 QCURVE",
"532 -139 OFFCURVE",
"527 -139 QCURVE SMOOTH",
"495 -139 OFFCURVE",
"495 -115 QCURVE SMOOTH",
"495 -96 OFFCURVE",
"530 -51 OFFCURVE",
"580 -12 OFFCURVE",
"601 0 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
25 83 8 114 80 77 54 50 2 114 41 67 106 41 9 114 15 17 5 106 17 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 722;
}
);
leftKerningGroup = U;
note = uni0172;
unicode = 0172;
},
{
glyphname = Uring;
layers = (
{
components = (
{
name = U;
},
{
name = ring;
transform = "{1, 0, 0, 1, 266, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni016E;
unicode = 016E;
},
{
glyphname = Utilde;
layers = (
{
components = (
{
name = U;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 245, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 722;
}
);
leftKerningGroup = U;
note = uni0168;
unicode = 0168;
},
{
glyphname = V;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"339 0 LINE",
"719 727 LINE",
"653 727 LINE SMOOTH",
"642 727 OFFCURVE",
"630 718 OFFCURVE",
"624 706 QCURVE SMOOTH",
"298 69 LINE",
"192 706 LINE SMOOTH",
"190 718 OFFCURVE",
"182 727 OFFCURVE",
"171 727 QCURVE SMOOTH",
"105 727 LINE",
"224 21 LINE SMOOTH",
"226 8 OFFCURVE",
"234 0 OFFCURVE",
"245 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
8 15 8 114 13 3 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 619;
}
);
leftKerningGroup = V;
note = uni0056;
rightKerningGroup = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"716 0 LINE",
"1029 727 LINE",
"971 727 LINE SMOOTH",
"960 727 OFFCURVE",
"947 718 OFFCURVE",
"942 706 QCURVE SMOOTH",
"672 69 LINE",
"631 706 LINE SMOOTH",
"630 718 OFFCURVE",
"621 727 OFFCURVE",
"610 727 QCURVE SMOOTH",
"513 727 LINE",
"243 69 LINE",
"196 706 LINE SMOOTH",
"195 718 OFFCURVE",
"186 727 OFFCURVE",
"175 727 QCURVE SMOOTH",
"116 727 LINE",
"170 21 LINE SMOOTH",
"171 9 OFFCURVE",
"180 0 OFFCURVE",
"191 0 QCURVE SMOOTH",
"289 0 LINE",
"560 663 LINE",
"598 21 LINE SMOOTH",
"599 9 OFFCURVE",
"608 0 OFFCURVE",
"619 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
3 16 16 25 9 2 114 20 14 14 27 5 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 953;
}
);
leftKerningGroup = W;
note = uni0057;
rightKerningGroup = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"556 0 LINE",
"382 362 LINE",
"676 727 LINE",
"605 727 LINE SMOOTH",
"594 727 OFFCURVE",
"579 719 OFFCURVE",
"569 707 QCURVE SMOOTH",
"346 421 LINE",
"214 707 LINE",
"209 719 OFFCURVE",
"197 727 OFFCURVE",
"186 727 QCURVE SMOOTH",
"116 727 LINE",
"287 365 LINE",
"-11 0 LINE",
"58 0 LINE SMOOTH",
"69 0 OFFCURVE",
"84 8 OFFCURVE",
"94 20 QCURVE SMOOTH",
"323 303 LINE",
"456 20 LINE",
"461 8 OFFCURVE",
"473 0 OFFCURVE",
"484 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
15 3 23 20 10 2 114 23 8 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 604;
}
);
leftKerningGroup = X;
note = uni0058;
rightKerningGroup = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"294 0 LINE",
"333 219 LINE",
"669 727 LINE",
"598 727 LINE SMOOTH",
"587 727 OFFCURVE",
"577 719 OFFCURVE",
"569 706 QCURVE SMOOTH",
"309 298 LINE",
"190 706 LINE",
"187 719 OFFCURVE",
"180 727 OFFCURVE",
"169 727 QCURVE SMOOTH",
"100 727 LINE",
"255 219 LINE",
"227 57 LINE",
"226 53 OFFCURVE",
"221 26 OFFCURVE",
"221 18 QCURVE SMOOTH",
"221 9 OFFCURVE",
"231 0 OFFCURVE",
"245 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
12 7 2 20 8 114 17 7 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 572;
}
);
leftKerningGroup = Y;
note = uni0059;
rightKerningGroup = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
name = Y;
},
{
name = acute;
transform = "{1, 0, 0, 1, 239, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 572;
}
);
leftKerningGroup = Y;
note = uni00DD;
rightKerningGroup = Y;
unicode = 00DD;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
name = Y;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 200, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 572;
}
);
leftKerningGroup = Y;
note = uni0178;
rightKerningGroup = Y;
unicode = 0178;
},
{
glyphname = Ydotbelow;
layers = (
{
components = (
{
name = Y;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 537, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 572;
}
);
leftKerningGroup = Y;
note = uni1EF4;
rightKerningGroup = Y;
unicode = 1EF4;
},
{
glyphname = Ygrave;
layers = (
{
components = (
{
name = Y;
},
{
name = grave;
transform = "{1, 0, 0, 1, 139, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 572;
}
);
leftKerningGroup = Y;
note = uni1EF2;
rightKerningGroup = Y;
unicode = 1EF2;
},
{
glyphname = Yhookabove;
layers = (
{
components = (
{
name = Y;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 552, 194}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 572;
}
);
leftKerningGroup = Y;
note = uni1EF6;
rightKerningGroup = Y;
unicode = 1EF6;
},
{
glyphname = Ytilde;
layers = (
{
components = (
{
name = Y;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 174, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 572;
}
);
leftKerningGroup = Y;
note = uni1EF8;
rightKerningGroup = Y;
unicode = 1EF8;
},
{
glyphname = Z;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"9 0 LINE",
"473 0 LINE",
"486 71 LINE",
"112 71 LINE",
"567 644 LINE SMOOTH",
"578 657 OFFCURVE",
"589 679 OFFCURVE",
"591 693 QCURVE SMOOTH",
"596 727 LINE",
"143 727 LINE",
"130 656 LINE",
"492 656 LINE",
"38 83 LINE SMOOTH",
"27 69 OFFCURVE",
"15 44 OFFCURVE",
"13 29 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 12 106 6 5 106 6 2 114 15 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 544;
}
);
leftKerningGroup = Z;
note = uni005A;
rightKerningGroup = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
name = Z;
},
{
name = acute;
transform = "{1, 0, 0, 1, 245, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 544;
}
);
leftKerningGroup = Z;
note = uni0179;
rightKerningGroup = Z;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
name = Z;
},
{
name = caron;
transform = "{1, 0, 0, 1, 146, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 544;
}
);
leftKerningGroup = Z;
note = uni017D;
rightKerningGroup = Z;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
name = Z;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 255, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 544;
}
);
leftKerningGroup = Z;
note = uni017B;
rightKerningGroup = Z;
unicode = 017B;
},
{
glyphname = a;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"408 23 LINE SMOOTH",
"408 11 OFFCURVE",
"418 0 OFFCURVE",
"429 0 QCURVE SMOOTH",
"477 0 LINE",
"477 37 LINE SMOOTH",
"477 68 OFFCURVE",
"481 118 OFFCURVE",
"486 147 QCURVE SMOOTH",
"536 433 LINE SMOOTH",
"540 457 OFFCURVE",
"540 460 QCURVE SMOOTH",
"540 468 OFFCURVE",
"530 478 OFFCURVE",
"519 484 QCURVE SMOOTH",
"486 501 OFFCURVE",
"393 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"251 524 OFFCURVE",
"123 423 OFFCURVE",
"60 260 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 113 OFFCURVE",
"101 31 OFFCURVE",
"176 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"295 -12 OFFCURVE",
"362 35 QCURVE SMOOTH",
"365 37 OFFCURVE",
"380 48 QCURVE SMOOTH",
"394 58 OFFCURVE",
"400 58 QCURVE SMOOTH",
"404 58 OFFCURVE",
"408 52 OFFCURVE",
"408 44 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"356 458 OFFCURVE",
"406 448 OFFCURVE",
"444 434 OFFCURVE",
"451 428 QCURVE",
"459 422 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
8 49 106 16 42 106 30 10 114 16 7 114 8 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 550;
}
);
leftKerningGroup = a;
note = uni0061;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
name = a;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 605, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni00E1;
unicode = 00E1;
},
{
glyphname = abreve;
layers = (
{
components = (
{
name = a;
},
{
name = breve;
transform = "{1, 0, 0, 1, 140, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni0103;
unicode = 0103;
},
{
glyphname = abreveacute;
layers = (
{
components = (
{
name = a;
},
{
name = uniE004;
transform = "{1, 0, 0, 1, 101, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EAF;
unicode = 1EAF;
},
{
glyphname = abrevedotbelow;
layers = (
{
components = (
{
name = a;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
},
{
name = breve;
transform = "{1, 0, 0, 1, 140, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni1EB7;
unicode = 1EB7;
},
{
glyphname = abrevegrave;
layers = (
{
components = (
{
name = a;
},
{
name = uniE005;
transform = "{1, 0, 0, 1, 132, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EB1;
unicode = 1EB1;
},
{
glyphname = abrevehookabove;
layers = (
{
components = (
{
name = a;
},
{
name = uniE007;
transform = "{1, 0, 0, 1, 141, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EB3;
unicode = 1EB3;
},
{
glyphname = abrevetilde;
layers = (
{
components = (
{
name = a;
},
{
name = uniE006;
transform = "{1, 0, 0, 1, 131, -1}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EB5;
unicode = 1EB5;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
name = a;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 120, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni00E2;
unicode = 00E2;
},
{
glyphname = acircumflexacute;
layers = (
{
components = (
{
name = a;
},
{
name = uniE000;
transform = "{1, 0, 0, 1, 61, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EA5;
unicode = 1EA5;
},
{
glyphname = acircumflexdotbelow;
layers = (
{
components = (
{
name = a;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 120, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EAD;
unicode = 1EAD;
},
{
glyphname = acircumflexgrave;
layers = (
{
components = (
{
name = a;
},
{
name = uniE001;
transform = "{1, 0, 0, 1, 61, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EA7;
unicode = 1EA7;
},
{
glyphname = acircumflexhookabove;
layers = (
{
components = (
{
name = a;
},
{
name = uniE002;
transform = "{1, 0, 0, 1, 91, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EA9;
unicode = 1EA9;
},
{
glyphname = acircumflextilde;
layers = (
{
components = (
{
name = a;
},
{
name = uniE003;
transform = "{1, 0, 0, 1, 70, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = abreveacute;
note = uni1EAB;
unicode = 1EAB;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
name = a;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 163, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni00E4;
unicode = 00E4;
},
{
glyphname = adotbelow;
layers = (
{
components = (
{
name = a;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni1EA1;
unicode = 1EA1;
},
{
glyphname = agrave;
layers = (
{
components = (
{
name = a;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 529, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni00E0;
unicode = 00E0;
},
{
glyphname = ahookabove;
layers = (
{
components = (
{
name = a;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 532, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni1EA3;
unicode = 1EA3;
},
{
glyphname = amacron;
layers = (
{
components = (
{
name = a;
},
{
name = macron;
transform = "{1, 0, 0, 1, 160, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni0101;
unicode = 0101;
},
{
glyphname = aogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"477 37 LINE",
"476 71 OFFCURVE",
"486 149 OFFCURVE",
"497 210 QCURVE SMOOTH",
"536 433 LINE SMOOTH",
"540 457 OFFCURVE",
"540 460 QCURVE SMOOTH",
"540 468 OFFCURVE",
"530 478 OFFCURVE",
"519 484 QCURVE SMOOTH",
"486 501 OFFCURVE",
"393 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"257 524 OFFCURVE",
"133 435 OFFCURVE",
"67 289 OFFCURVE",
"61 204 QCURVE SMOOTH",
"60 192 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 95 OFFCURVE",
"130 2 OFFCURVE",
"191 -9 QCURVE SMOOTH",
"209 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"271 -12 OFFCURVE",
"345 21 OFFCURVE",
"362 35 QCURVE",
"365 37 OFFCURVE",
"380 48 QCURVE SMOOTH",
"394 58 OFFCURVE",
"400 58 QCURVE SMOOTH",
"404 58 OFFCURVE",
"408 52 OFFCURVE",
"408 44 QCURVE SMOOTH",
"408 23 LINE SMOOTH",
"408 10 OFFCURVE",
"414 0 OFFCURVE",
"425 0 QCURVE",
"407 -10 OFFCURVE",
"398 -16 QCURVE SMOOTH",
"362 -39 OFFCURVE",
"314 -102 OFFCURVE",
"314 -133 QCURVE SMOOTH",
"314 -164 OFFCURVE",
"359 -187 OFFCURVE",
"388 -187 QCURVE SMOOTH",
"419 -187 OFFCURVE",
"457 -178 QCURVE",
"462 -147 LINE",
"462 -140 OFFCURVE",
"453 -132 OFFCURVE",
"446 -132 QCURVE SMOOTH",
"437 -132 OFFCURVE",
"423 -136 QCURVE",
"420 -136 OFFCURVE",
"414 -138 QCURVE",
"408 -139 OFFCURVE",
"403 -139 QCURVE SMOOTH",
"371 -139 OFFCURVE",
"371 -115 QCURVE SMOOTH",
"371 -96 OFFCURVE",
"406 -51 OFFCURVE",
"456 -12 OFFCURVE",
"477 0 QCURVE"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"369 458 OFFCURVE",
"427 442 OFFCURVE",
"459 421 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
25 63 10 50 69 106 50 7 114 39 76 106 39 11 114 15 17 5 106 17 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 550;
}
);
leftKerningGroup = a;
note = uni0105;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
name = a;
},
{
name = ring;
transform = "{1, 0, 0, 1, 179, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni00E5;
unicode = 00E5;
},
{
glyphname = atilde;
layers = (
{
components = (
{
name = a;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 516, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = a;
note = uni00E3;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"621 -12 OFFCURVE",
"717 17 OFFCURVE",
"751 37 QCURVE",
"730 86 LINE",
"701 71 OFFCURVE",
"631 50 OFFCURVE",
"601 50 QCURVE SMOOTH",
"533 50 OFFCURVE",
"460 104 OFFCURVE",
"460 165 QCURVE SMOOTH",
"460 184 OFFCURVE",
"465 214 QCURVE",
"485 208 OFFCURVE",
"537 200 OFFCURVE",
"564 200 QCURVE SMOOTH",
"624 200 OFFCURVE",
"727 233 OFFCURVE",
"796 299 OFFCURVE",
"807 346 QCURVE SMOOTH",
"812 369 OFFCURVE",
"812 390 QCURVE SMOOTH",
"812 452 OFFCURVE",
"730 527 OFFCURVE",
"648 527 QCURVE SMOOTH",
"605 527 OFFCURVE",
"532 497 OFFCURVE",
"512 483 QCURVE",
"507 480 OFFCURVE",
"503 477 QCURVE SMOOTH",
"498 473 OFFCURVE",
"488 468 OFFCURVE",
"483 468 QCURVE SMOOTH",
"480 468 OFFCURVE",
"471 475 OFFCURVE",
"466 480 QCURVE",
"452 493 OFFCURVE",
"423 512 OFFCURVE",
"372 527 OFFCURVE",
"337 527 QCURVE SMOOTH",
"245 527 OFFCURVE",
"120 419 OFFCURVE",
"59 257 OFFCURVE",
"59 175 QCURVE SMOOTH",
"59 112 OFFCURVE",
"102 28 OFFCURVE",
"175 -12 OFFCURVE",
"222 -12 QCURVE SMOOTH",
"270 -12 OFFCURVE",
"339 20 OFFCURVE",
"372 46 QCURVE SMOOTH",
"381 53 OFFCURVE",
"397 63 OFFCURVE",
"402 63 QCURVE SMOOTH",
"405 63 OFFCURVE",
"411 58 OFFCURVE",
"416 52 OFFCURVE",
"417 50 QCURVE",
"432 30 OFFCURVE",
"500 -12 OFFCURVE",
"568 -12 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"396 247 LINE SMOOTH",
"384 181 OFFCURVE",
"384 143 QCURVE SMOOTH",
"384 129 OFFCURVE",
"385 122 QCURVE",
"357 94 OFFCURVE",
"292 54 OFFCURVE",
"250 54 QCURVE SMOOTH",
"217 54 OFFCURVE",
"167 84 OFFCURVE",
"138 142 OFFCURVE",
"138 182 QCURVE SMOOTH",
"138 248 OFFCURVE",
"176 378 OFFCURVE",
"262 465 OFFCURVE",
"328 465 QCURVE SMOOTH",
"357 465 OFFCURVE",
"416 438 OFFCURVE",
"423 417 QCURVE SMOOTH",
"424 414 OFFCURVE",
"424 409 QCURVE SMOOTH",
"424 405 OFFCURVE",
"423 401 QCURVE SMOOTH",
"422 397 OFFCURVE",
"422 393 QCURVE"
);
},
{
closed = 1;
nodes = (
"541 256 OFFCURVE",
"489 265 OFFCURVE",
"475 272 QCURVE",
"496 394 LINE SMOOTH",
"498 407 OFFCURVE",
"507 419 OFFCURVE",
"520 430 QCURVE",
"540 445 OFFCURVE",
"600 465 OFFCURVE",
"636 465 QCURVE SMOOTH",
"658 465 OFFCURVE",
"673 461 QCURVE SMOOTH",
"703 453 OFFCURVE",
"732 410 OFFCURVE",
"732 380 QCURVE SMOOTH",
"732 317 OFFCURVE",
"646 256 OFFCURVE",
"577 256 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
59 52 106 59 12 76 106 44 102 106 44 44 12 20 68 106 35 92 106 35 20 7 114 12 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 802;
}
);
leftKerningGroup = a;
note = uni00E6;
rightKerningGroup = ae;
unicode = 00E6;
},
{
glyphname = b;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"229 670 LINE",
"230 674 OFFCURVE",
"235 701 OFFCURVE",
"235 709 QCURVE SMOOTH",
"235 718 OFFCURVE",
"225 727 OFFCURVE",
"211 727 QCURVE SMOOTH",
"165 727 LINE",
"51 52 LINE",
"50 49 OFFCURVE",
"50 43 QCURVE SMOOTH",
"50 34 OFFCURVE",
"59 24 OFFCURVE",
"71 18 QCURVE SMOOTH",
"97 5 OFFCURVE",
"180 -12 OFFCURVE",
"230 -12 QCURVE SMOOTH",
"329 -12 OFFCURVE",
"465 89 OFFCURVE",
"531 251 OFFCURVE",
"531 343 QCURVE SMOOTH",
"531 399 OFFCURVE",
"490 481 OFFCURVE",
"415 524 OFFCURVE",
"364 524 QCURVE SMOOTH",
"331 524 OFFCURVE",
"276 507 OFFCURVE",
"246 489 OFFCURVE",
"230 478 QCURVE SMOOTH",
"224 474 OFFCURVE",
"218 469 QCURVE",
"212 463 OFFCURVE",
"200 454 OFFCURVE",
"197 454 QCURVE SMOOTH",
"192 454 OFFCURVE",
"192 460 QCURVE SMOOTH",
"192 464 OFFCURVE",
"196 476 QCURVE",
"199 488 OFFCURVE",
"202 503 QCURVE"
);
},
{
closed = 1;
nodes = (
"179 363 OFFCURVE",
"184 375 OFFCURVE",
"191 382 QCURVE SMOOTH",
"267 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"387 458 OFFCURVE",
"450 391 OFFCURVE",
"450 318 QCURVE SMOOTH",
"450 255 OFFCURVE",
"406 134 OFFCURVE",
"312 54 OFFCURVE",
"242 54 QCURVE SMOOTH",
"181 54 OFFCURVE",
"129 80 OFFCURVE",
"132 99 QCURVE SMOOTH",
"141 155 OFFCURVE",
"165 289 OFFCURVE",
"177 353 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
35 31 22 45 106 14 52 106 14 7 114 31 0 114 22 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 543;
}
);
leftKerningGroup = b;
note = uni0062;
rightKerningGroup = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"391 85 LINE",
"366 70 OFFCURVE",
"306 50 OFFCURVE",
"279 50 QCURVE SMOOTH",
"206 50 OFFCURVE",
"139 119 OFFCURVE",
"139 187 QCURVE SMOOTH",
"139 264 OFFCURVE",
"188 398 OFFCURVE",
"238 433 QCURVE SMOOTH",
"283 465 OFFCURVE",
"343 465 QCURVE SMOOTH",
"369 465 OFFCURVE",
"402 453 OFFCURVE",
"415 445 QCURVE",
"427 437 OFFCURVE",
"431 437 QCURVE SMOOTH",
"436 437 OFFCURVE",
"445 446 OFFCURVE",
"452 458 QCURVE SMOOTH",
"480 505 LINE",
"452 515 OFFCURVE",
"393 527 OFFCURVE",
"351 527 QCURVE SMOOTH",
"259 527 OFFCURVE",
"127 428 OFFCURVE",
"60 271 OFFCURVE",
"60 185 QCURVE SMOOTH",
"60 79 OFFCURVE",
"160 -12 OFFCURVE",
"244 -12 QCURVE SMOOTH",
"291 -12 OFFCURVE",
"380 14 OFFCURVE",
"412 32 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
2 29 106 9 21 106 9 7 114 2 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 449;
}
);
leftKerningGroup = c;
note = uni0063;
rightKerningGroup = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
name = c;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 616, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 449;
}
);
leftKerningGroup = c;
note = uni0107;
rightKerningGroup = c;
unicode = 0107;
},
{
glyphname = ccaron;
layers = (
{
components = (
{
name = c;
},
{
name = caron;
transform = "{1, 0, 0, 1, 105, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 449;
}
);
leftKerningGroup = c;
note = uni010D;
rightKerningGroup = c;
unicode = 010D;
},
{
glyphname = ccedilla;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"480 505 LINE",
"452 515 OFFCURVE",
"393 527 OFFCURVE",
"351 527 QCURVE SMOOTH",
"259 527 OFFCURVE",
"127 428 OFFCURVE",
"60 271 OFFCURVE",
"60 185 QCURVE SMOOTH",
"60 92 OFFCURVE",
"137 0 OFFCURVE",
"204 -9 QCURVE",
"179 -94 LINE",
"197 -94 LINE SMOOTH",
"236 -94 OFFCURVE",
"236 -115 QCURVE SMOOTH",
"236 -128 OFFCURVE",
"213 -143 OFFCURVE",
"194 -143 QCURVE SMOOTH",
"185 -143 OFFCURVE",
"171 -138 QCURVE SMOOTH",
"156 -133 OFFCURVE",
"152 -133 QCURVE SMOOTH",
"144 -133 OFFCURVE",
"135 -141 OFFCURVE",
"131 -151 QCURVE",
"120 -175 LINE",
"132 -180 OFFCURVE",
"165 -187 OFFCURVE",
"183 -187 QCURVE SMOOTH",
"207 -187 OFFCURVE",
"259 -168 OFFCURVE",
"294 -130 OFFCURVE",
"294 -104 QCURVE SMOOTH",
"294 -61 OFFCURVE",
"236 -57 QCURVE",
"249 -12 LINE",
"295 -11 OFFCURVE",
"381 14 OFFCURVE",
"412 32 QCURVE",
"391 85 LINE",
"366 70 OFFCURVE",
"306 50 OFFCURVE",
"279 50 QCURVE SMOOTH",
"205 50 OFFCURVE",
"139 118 OFFCURVE",
"139 187 QCURVE SMOOTH",
"139 243 OFFCURVE",
"165 348 OFFCURVE",
"222 429 OFFCURVE",
"265 449 QCURVE SMOOTH",
"300 465 OFFCURVE",
"343 465 QCURVE SMOOTH",
"369 465 OFFCURVE",
"402 453 OFFCURVE",
"415 445 QCURVE",
"427 437 OFFCURVE",
"431 437 QCURVE SMOOTH",
"436 437 OFFCURVE",
"445 446 OFFCURVE",
"452 458 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHW[ ]\011/* 2 values pushed */
24 -16 
NPUSHB[ ]\011/* 28 values pushed */
24 60 63 47 79 47 2 47 47 30 60 55 7 106 55 7 114 30 41 106 33 30 48 23 16 106 23 11 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
RDTG[ ]\011/* RoundDownToGrid */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 449;
}
);
leftKerningGroup = c;
note = uni00E7;
rightKerningGroup = c;
unicode = 00E7;
},
{
glyphname = d;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"578 670 LINE",
"579 674 OFFCURVE",
"584 701 OFFCURVE",
"584 709 QCURVE SMOOTH",
"584 718 OFFCURVE",
"574 727 OFFCURVE",
"560 727 QCURVE SMOOTH",
"514 727 LINE",
"475 502 LINE",
"449 511 OFFCURVE",
"379 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"251 524 OFFCURVE",
"123 423 OFFCURVE",
"60 260 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 113 OFFCURVE",
"101 31 OFFCURVE",
"176 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"295 -12 OFFCURVE",
"362 35 QCURVE SMOOTH",
"365 37 OFFCURVE",
"380 48 QCURVE SMOOTH",
"394 58 OFFCURVE",
"400 58 QCURVE SMOOTH",
"404 58 OFFCURVE",
"408 52 OFFCURVE",
"408 44 QCURVE SMOOTH",
"408 23 LINE SMOOTH",
"408 11 OFFCURVE",
"418 0 OFFCURVE",
"429 0 QCURVE SMOOTH",
"477 0 LINE",
"477 37 LINE SMOOTH",
"477 68 OFFCURVE",
"481 118 OFFCURVE",
"486 147 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"356 458 OFFCURVE",
"406 448 OFFCURVE",
"444 434 OFFCURVE",
"451 428 QCURVE",
"459 422 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
33 29 17 52 106 25 45 106 25 7 114 4 10 114 29 0 114 17 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 557;
}
);
leftKerningGroup = d;
note = uni0064;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"481 714 LINE",
"454 755 LINE",
"386 708 LINE",
"355 748 LINE",
"303 710 LINE",
"333 671 LINE",
"261 623 LINE",
"288 582 LINE",
"361 634 LINE",
"384 602 OFFCURVE",
"425 532 OFFCURVE",
"435 505 QCURVE",
"417 515 OFFCURVE",
"370 528 OFFCURVE",
"346 528 QCURVE SMOOTH",
"256 528 OFFCURVE",
"126 426 OFFCURVE",
"60 265 OFFCURVE",
"60 178 QCURVE SMOOTH",
"60 85 OFFCURVE",
"159 -12 OFFCURVE",
"258 -12 QCURVE SMOOTH",
"350 -12 OFFCURVE",
"479 83 OFFCURVE",
"544 236 OFFCURVE",
"544 321 QCURVE SMOOTH",
"544 413 OFFCURVE",
"468 595 OFFCURVE",
"415 670 QCURVE"
);
},
{
closed = 1;
nodes = (
"198 49 OFFCURVE",
"140 127 OFFCURVE",
"140 190 QCURVE SMOOTH",
"140 259 OFFCURVE",
"184 386 OFFCURVE",
"275 467 OFFCURVE",
"342 467 QCURVE SMOOTH",
"407 467 OFFCURVE",
"470 392 OFFCURVE",
"470 329 QCURVE SMOOTH",
"470 257 OFFCURVE",
"429 130 OFFCURVE",
"338 49 OFFCURVE",
"268 49 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"439 727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
25 19 13 24 43 0 16 1 6 13 35 106 13 7 114 6 42 106 6 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MIAP[1]\011/* MoveIndirectAbsPt */
MDRP[00100]\011/* MoveDirectRelPt */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 561;
}
);
note = uni00F0;
unicode = 00F0;
},
{
glyphname = dcaron;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = d;
},
{
alignment = -1;
name = glyph00592;
transform = "{1, 0, 0, 1, 834, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 557;
}
);
leftKerningGroup = d;
note = uni010F;
rightKerningGroup = dcaron;
unicode = 010F;
changeCount = 2;
},
{
glyphname = dcroat;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"573 645 LINE",
"578 670 LINE SMOOTH",
"579 675 OFFCURVE",
"582 686 QCURVE",
"584 697 OFFCURVE",
"584 705 QCURVE SMOOTH",
"584 727 OFFCURVE",
"560 727 QCURVE SMOOTH",
"514 727 LINE",
"500 645 LINE",
"338 645 LINE",
"328 592 LINE",
"491 592 LINE",
"475 502 LINE",
"439 515 OFFCURVE",
"394 521 QCURVE SMOOTH",
"370 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"251 524 OFFCURVE",
"123 423 OFFCURVE",
"60 260 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 113 OFFCURVE",
"101 31 OFFCURVE",
"176 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"259 -12 OFFCURVE",
"316 7 OFFCURVE",
"336 20 QCURVE",
"356 32 OFFCURVE",
"362 35 QCURVE",
"365 37 OFFCURVE",
"380 48 QCURVE SMOOTH",
"394 58 OFFCURVE",
"400 58 QCURVE SMOOTH",
"404 58 OFFCURVE",
"408 52 OFFCURVE",
"408 44 QCURVE SMOOTH",
"408 23 LINE SMOOTH",
"408 11 OFFCURVE",
"418 0 OFFCURVE",
"429 0 QCURVE SMOOTH",
"477 0 LINE",
"477 37 LINE SMOOTH",
"477 70 OFFCURVE",
"484 135 OFFCURVE",
"492 181 QCURVE SMOOTH",
"564 592 LINE",
"627 592 LINE",
"637 645 LINE"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"369 458 OFFCURVE",
"427 442 OFFCURVE",
"459 421 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
38 49 2 106 39 49 49 32 41 0 114 32 55 106 32 7 114 24 62 106 24 11 114 8 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 557;
}
);
leftKerningGroup = d;
note = uni0111;
unicode = 0111;
},
{
glyphname = e;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"415 103 LINE",
"385 81 OFFCURVE",
"307 50 OFFCURVE",
"269 50 QCURVE SMOOTH",
"210 50 OFFCURVE",
"134 113 OFFCURVE",
"134 187 QCURVE SMOOTH",
"134 205 OFFCURVE",
"135 214 QCURVE",
"157 208 OFFCURVE",
"221 200 OFFCURVE",
"256 200 QCURVE SMOOTH",
"320 200 OFFCURVE",
"436 247 OFFCURVE",
"508 335 OFFCURVE",
"508 394 QCURVE SMOOTH",
"508 435 OFFCURVE",
"466 495 OFFCURVE",
"386 527 OFFCURVE",
"330 527 QCURVE SMOOTH",
"241 527 OFFCURVE",
"117 427 OFFCURVE",
"55 271 OFFCURVE",
"55 187 QCURVE SMOOTH",
"55 123 OFFCURVE",
"100 34 OFFCURVE",
"183 -12 OFFCURVE",
"240 -12 QCURVE SMOOTH",
"299 -12 OFFCURVE",
"404 27 OFFCURVE",
"440 55 QCURVE"
);
},
{
closed = 1;
nodes = (
"152 321 OFFCURVE",
"192 409 OFFCURVE",
"266 469 OFFCURVE",
"319 469 QCURVE SMOOTH",
"374 469 OFFCURVE",
"427 418 OFFCURVE",
"427 378 QCURVE SMOOTH",
"427 337 OFFCURVE",
"379 282 OFFCURVE",
"303 256 OFFCURVE",
"259 256 QCURVE SMOOTH",
"182 256 OFFCURVE",
"143 272 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
2 26 106 18 32 106 18 18 2 10 39 106 10 7 114 2 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 498;
}
);
leftKerningGroup = e;
note = uni0065;
rightKerningGroup = ae;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
name = e;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 610, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni00E9;
rightKerningGroup = ae;
unicode = 00E9;
},
{
glyphname = ecaron;
layers = (
{
components = (
{
name = e;
},
{
name = caron;
transform = "{1, 0, 0, 1, 107, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni011B;
rightKerningGroup = ae;
unicode = 011B;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
name = e;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 103, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni00EA;
rightKerningGroup = ae;
unicode = 00EA;
},
{
glyphname = ecircumflexacute;
layers = (
{
components = (
{
name = e;
},
{
name = uniE000;
transform = "{1, 0, 0, 1, 55, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = ecircumflexacute;
note = uni1EBF;
rightKerningGroup = ae;
unicode = 1EBF;
},
{
glyphname = ecircumflexdotbelow;
layers = (
{
components = (
{
name = e;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 103, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = ecircumflexacute;
note = uni1EC7;
rightKerningGroup = ae;
unicode = 1EC7;
},
{
glyphname = ecircumflexgrave;
layers = (
{
components = (
{
name = e;
},
{
name = uniE001;
transform = "{1, 0, 0, 1, 52, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = ecircumflexacute;
note = uni1EC1;
rightKerningGroup = ae;
unicode = 1EC1;
},
{
glyphname = ecircumflexhookabove;
layers = (
{
components = (
{
name = e;
},
{
name = uniE002;
transform = "{1, 0, 0, 1, 69, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = ecircumflexacute;
note = uni1EC3;
rightKerningGroup = ae;
unicode = 1EC3;
},
{
glyphname = ecircumflextilde;
layers = (
{
components = (
{
name = e;
},
{
name = uniE003;
transform = "{1, 0, 0, 1, 70, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = ecircumflexacute;
note = uni1EC5;
rightKerningGroup = ae;
unicode = 1EC5;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
name = e;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 146, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni00EB;
rightKerningGroup = ae;
unicode = 00EB;
},
{
glyphname = edotaccent;
layers = (
{
components = (
{
name = e;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 226, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni0117;
rightKerningGroup = ae;
unicode = 0117;
},
{
glyphname = edotbelow;
layers = (
{
components = (
{
name = e;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni1EB9;
rightKerningGroup = ae;
unicode = 1EB9;
},
{
glyphname = egrave;
layers = (
{
components = (
{
name = e;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 518, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni00E8;
rightKerningGroup = ae;
unicode = 00E8;
},
{
glyphname = ehookabove;
layers = (
{
components = (
{
name = e;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 516, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni1EBB;
rightKerningGroup = ae;
unicode = 1EBB;
},
{
glyphname = emacron;
layers = (
{
components = (
{
name = e;
},
{
name = macron;
transform = "{1, 0, 0, 1, 142, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni0113;
rightKerningGroup = ae;
unicode = 0113;
},
{
glyphname = eogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"415 103 LINE",
"385 81 OFFCURVE",
"307 50 OFFCURVE",
"269 50 QCURVE SMOOTH",
"211 50 OFFCURVE",
"134 114 OFFCURVE",
"134 187 QCURVE SMOOTH",
"134 205 OFFCURVE",
"135 214 QCURVE",
"157 208 OFFCURVE",
"221 200 OFFCURVE",
"256 200 QCURVE SMOOTH",
"320 200 OFFCURVE",
"436 247 OFFCURVE",
"508 335 OFFCURVE",
"508 394 QCURVE SMOOTH",
"508 435 OFFCURVE",
"466 495 OFFCURVE",
"386 527 OFFCURVE",
"330 527 QCURVE SMOOTH",
"249 527 OFFCURVE",
"131 443 OFFCURVE",
"64 308 OFFCURVE",
"57 231 QCURVE",
"55 216 OFFCURVE",
"55 187 QCURVE SMOOTH",
"55 123 OFFCURVE",
"100 34 OFFCURVE",
"183 -12 OFFCURVE",
"240 -12 QCURVE SMOOTH",
"266 -12 OFFCURVE",
"296 -5 QCURVE",
"258 -30 OFFCURVE",
"202 -99 OFFCURVE",
"202 -133 QCURVE SMOOTH",
"202 -164 OFFCURVE",
"247 -187 OFFCURVE",
"276 -187 QCURVE SMOOTH",
"307 -187 OFFCURVE",
"345 -178 QCURVE",
"350 -147 LINE",
"350 -140 OFFCURVE",
"341 -132 OFFCURVE",
"334 -132 QCURVE SMOOTH",
"325 -132 OFFCURVE",
"311 -136 QCURVE",
"308 -136 OFFCURVE",
"302 -138 QCURVE",
"296 -139 OFFCURVE",
"291 -139 QCURVE SMOOTH",
"259 -139 OFFCURVE",
"259 -115 QCURVE SMOOTH",
"259 -95 OFFCURVE",
"298 -50 OFFCURVE",
"355 -5 OFFCURVE",
"411 35 QCURVE",
"421 41 OFFCURVE",
"436 52 OFFCURVE",
"440 55 QCURVE"
);
},
{
closed = 1;
nodes = (
"152 321 OFFCURVE",
"192 409 OFFCURVE",
"266 469 OFFCURVE",
"319 469 QCURVE SMOOTH",
"374 469 OFFCURVE",
"427 418 OFFCURVE",
"427 378 QCURVE SMOOTH",
"427 337 OFFCURVE",
"379 282 OFFCURVE",
"303 256 OFFCURVE",
"259 256 QCURVE SMOOTH",
"182 256 OFFCURVE",
"143 272 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
46 60 106 46 46 28 38 67 106 38 7 114 3 58 58 57 28 54 106 28 11 114 18 20 8 106 20 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 498;
}
);
leftKerningGroup = e;
note = uni0119;
rightKerningGroup = ae;
unicode = 0119;
},
{
glyphname = etilde;
layers = (
{
components = (
{
name = e;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 506, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = e;
note = uni1EBD;
rightKerningGroup = ae;
unicode = 1EBD;
},
{
glyphname = schwa;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"60 213 OFFCURVE",
"60 182 QCURVE SMOOTH",
"60 123 OFFCURVE",
"105 36 OFFCURVE",
"194 -12 OFFCURVE",
"258 -12 QCURVE SMOOTH",
"374 -12 OFFCURVE",
"519 126 OFFCURVE",
"542 258 QCURVE SMOOTH",
"549 296 OFFCURVE",
"549 333 QCURVE SMOOTH",
"549 426 OFFCURVE",
"449 528 OFFCURVE",
"353 528 QCURVE SMOOTH",
"310 528 OFFCURVE",
"216 513 OFFCURVE",
"177 503 QCURVE",
"178 450 LINE",
"216 457 OFFCURVE",
"304 467 OFFCURVE",
"342 467 QCURVE SMOOTH",
"470 467 OFFCURVE",
"470 330 QCURVE SMOOTH",
"470 305 OFFCURVE",
"468 291 QCURVE",
"121 291 LINE SMOOTH",
"97 291 OFFCURVE",
"70 270 OFFCURVE",
"66 246 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"140 49 OFFCURVE",
"140 185 QCURVE SMOOTH",
"140 208 OFFCURVE",
"143 233 QCURVE",
"458 233 LINE",
"416 49 OFFCURVE",
"268 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
22 35 106 31 2 106 31 31 22 14 7 106 14 7 114 22 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 566;
}
);
note = uni0259;
unicode = 0259;
},
{
glyphname = f;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"146 457 LINE",
"67 -79 LINE SMOOTH",
"59 -123 OFFCURVE",
"29 -166 OFFCURVE",
"0 -166 QCURVE SMOOTH",
"-16 -166 OFFCURVE",
"-49 -153 OFFCURVE",
"-62 -144 QCURVE",
"-86 -195 LINE",
"-67 -207 OFFCURVE",
"-19 -224 OFFCURVE",
"5 -224 QCURVE SMOOTH",
"45 -224 OFFCURVE",
"100 -192 OFFCURVE",
"135 -120 OFFCURVE",
"144 -58 QCURVE SMOOTH",
"221 457 LINE",
"354 457 LINE",
"364 515 LINE",
"229 515 LINE",
"239 582 LINE SMOOTH",
"244 615 OFFCURVE",
"262 657 OFFCURVE",
"300 680 OFFCURVE",
"332 680 QCURVE SMOOTH",
"360 680 OFFCURVE",
"409 667 QCURVE",
"424 723 LINE",
"404 729 OFFCURVE",
"357 737 OFFCURVE",
"336 737 QCURVE SMOOTH",
"260 737 OFFCURVE",
"177 662 OFFCURVE",
"164 577 QCURVE SMOOTH",
"154 515 LINE",
"79 515 LINE",
"69 457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
9 6 25 32 106 1 0 17 20 106 6 12 106 17 6 114 6 1 114 25 15 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 324;
}
);
leftKerningGroup = f;
note = uni0066;
rightKerningGroup = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"540 457 OFFCURVE",
"540 460 QCURVE SMOOTH",
"540 468 OFFCURVE",
"530 478 OFFCURVE",
"519 484 QCURVE SMOOTH",
"486 501 OFFCURVE",
"393 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"251 524 OFFCURVE",
"123 423 OFFCURVE",
"60 260 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 113 OFFCURVE",
"101 31 OFFCURVE",
"176 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"268 -12 OFFCURVE",
"331 14 OFFCURVE",
"350 27 QCURVE SMOOTH",
"363 36 OFFCURVE",
"373 45 QCURVE SMOOTH",
"390 60 OFFCURVE",
"395 60 QCURVE SMOOTH",
"400 60 OFFCURVE",
"400 54 QCURVE SMOOTH",
"400 47 OFFCURVE",
"394 6 OFFCURVE",
"386 -40 QCURVE SMOOTH",
"375 -102 OFFCURVE",
"304 -159 OFFCURVE",
"254 -159 QCURVE SMOOTH",
"212 -159 OFFCURVE",
"140 -120 OFFCURVE",
"116 -92 QCURVE",
"68 -140 LINE",
"96 -175 OFFCURVE",
"187 -224 OFFCURVE",
"241 -224 QCURVE SMOOTH",
"333 -224 OFFCURVE",
"448 -131 OFFCURVE",
"463 -22 QCURVE SMOOTH",
"466 5 LINE",
"468 17 OFFCURVE",
"476 73 QCURVE SMOOTH",
"483 128 OFFCURVE",
"494 192 QCURVE SMOOTH",
"515 307 OFFCURVE",
"536 433 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"356 458 OFFCURVE",
"406 448 OFFCURVE",
"444 434 OFFCURVE",
"451 428 QCURVE",
"459 422 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
13 69 16 39 55 106 39 7 114 31 62 106 31 11 114 9 16 106 9 15 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 545;
}
);
leftKerningGroup = g;
note = uni0067;
rightKerningGroup = g;
unicode = 0067;
},
{
glyphname = gbreve;
layers = (
{
components = (
{
name = g;
},
{
name = breve;
transform = "{1, 0, 0, 1, 145, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 545;
}
);
leftKerningGroup = g;
note = uni011F;
rightKerningGroup = g;
unicode = 011F;
},
{
glyphname = gcommaaccent;
layers = (
{
components = (
{
name = g;
},
{
name = commaturnedabovecomb;
transform = "{1, 0, 0, 1, 496, 90}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 545;
}
);
leftKerningGroup = g;
note = uni0123;
rightKerningGroup = g;
unicode = 0123;
},
{
glyphname = h;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"238 670 LINE",
"239 674 OFFCURVE",
"244 701 OFFCURVE",
"244 709 QCURVE SMOOTH",
"244 718 OFFCURVE",
"234 727 OFFCURVE",
"220 727 QCURVE SMOOTH",
"174 727 LINE",
"55 51 LINE",
"54 47 OFFCURVE",
"50 25 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"184 359 LINE SMOOTH",
"186 369 OFFCURVE",
"192 383 OFFCURVE",
"199 390 QCURVE SMOOTH",
"220 411 OFFCURVE",
"302 461 OFFCURVE",
"347 461 QCURVE SMOOTH",
"452 461 OFFCURVE",
"452 382 QCURVE SMOOTH",
"452 365 OFFCURVE",
"445 324 OFFCURVE",
"444 319 QCURVE SMOOTH",
"396 51 LINE",
"395 47 OFFCURVE",
"391 25 OFFCURVE",
"391 18 QCURVE SMOOTH",
"391 9 OFFCURVE",
"401 0 OFFCURVE",
"415 0 QCURVE SMOOTH",
"461 0 LINE",
"525 356 LINE SMOOTH",
"531 390 OFFCURVE",
"531 408 QCURVE SMOOTH",
"531 449 OFFCURVE",
"490 502 OFFCURVE",
"423 527 OFFCURVE",
"381 527 QCURVE SMOOTH",
"331 527 OFFCURVE",
"254 493 OFFCURVE",
"229 475 QCURVE",
"226 473 OFFCURVE",
"222 470 QCURVE SMOOTH",
"218 467 OFFCURVE",
"210 462 OFFCURVE",
"206 462 QCURVE SMOOTH",
"201 462 OFFCURVE",
"201 468 QCURVE SMOOTH",
"201 474 OFFCURVE",
"204 484 QCURVE",
"206 494 OFFCURVE",
"208 505 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 24 44 41 52 48 13 33 106 13 7 114 48 0 114 41 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
leftKerningGroup = b;
note = uni0068;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"145 638 LINE",
"247 638 LINE",
"263 727 LINE",
"161 727 LINE"
);
},
{
closed = 1;
nodes = (
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"201 458 LINE",
"202 462 OFFCURVE",
"207 489 OFFCURVE",
"207 497 QCURVE SMOOTH",
"207 506 OFFCURVE",
"197 515 OFFCURVE",
"183 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
15 12 0 3 106 19 6 114 0 0 114 12 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 219;
}
);
leftKerningGroup = i;
note = uni0069;
rightKerningGroup = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"201 458 LINE",
"202 462 OFFCURVE",
"207 489 OFFCURVE",
"207 497 QCURVE SMOOTH",
"207 506 OFFCURVE",
"197 515 OFFCURVE",
"183 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
11 8 3 15 6 114 8 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 219;
}
);
leftKerningGroup = i;
note = uni0131;
rightKerningGroup = i;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
name = idotless;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 479, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = i;
note = uni00ED;
rightKerningGroup = i;
unicode = 00ED;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
name = idotless;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, -49, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = icircumflex;
note = uni00EE;
rightKerningGroup = i;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
name = idotless;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, -9, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = icircumflex;
note = uni00EF;
rightKerningGroup = i;
unicode = 00EF;
},
{
glyphname = idotbelow;
layers = (
{
components = (
{
name = i;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 372, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
note = uni1ECB;
unicode = 1ECB;
},
{
glyphname = igrave;
layers = (
{
components = (
{
name = idotless;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 333, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = icircumflex;
note = uni00EC;
rightKerningGroup = i;
unicode = 00EC;
},
{
glyphname = ihookabove;
layers = (
{
components = (
{
name = idotless;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 342, 1}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
note = uni1EC9;
unicode = 1EC9;
},
{
glyphname = imacron;
layers = (
{
components = (
{
name = idotless;
},
{
name = macron;
transform = "{1, 0, 0, 1, -22, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = icircumflex;
note = uni012B;
rightKerningGroup = i;
unicode = 012B;
},
{
glyphname = iogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"145 638 LINE",
"247 638 LINE",
"263 727 LINE",
"161 727 LINE"
);
},
{
closed = 1;
nodes = (
"201 458 LINE",
"202 462 OFFCURVE",
"207 489 OFFCURVE",
"207 497 QCURVE SMOOTH",
"207 506 OFFCURVE",
"197 515 OFFCURVE",
"183 515 QCURVE SMOOTH",
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 0 OFFCURVE",
"69 0 QCURVE",
"41 -12 OFFCURVE",
"-10 -55 OFFCURVE",
"-43 -108 OFFCURVE",
"-43 -133 QCURVE SMOOTH",
"-43 -164 OFFCURVE",
"2 -187 OFFCURVE",
"31 -187 QCURVE SMOOTH",
"62 -187 OFFCURVE",
"100 -178 QCURVE",
"105 -147 LINE",
"105 -140 OFFCURVE",
"96 -132 OFFCURVE",
"89 -132 QCURVE SMOOTH",
"80 -132 OFFCURVE",
"66 -136 QCURVE",
"63 -136 OFFCURVE",
"57 -138 QCURVE",
"51 -139 OFFCURVE",
"46 -139 QCURVE SMOOTH",
"14 -139 OFFCURVE",
"14 -115 QCURVE SMOOTH",
"14 -96 OFFCURVE",
"49 -51 OFFCURVE",
"99 -12 OFFCURVE",
"120 0 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
28 42 10 114 34 6 114 19 21 9 106 21 14 114 0 3 106 0 0 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 219;
}
);
leftKerningGroup = i;
note = uni012F;
rightKerningGroup = i;
unicode = 012F;
},
{
glyphname = itilde;
layers = (
{
components = (
{
name = idotless;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 317, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = icircumflex;
note = uni0129;
rightKerningGroup = i;
unicode = 0129;
},
{
glyphname = j;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"148 638 LINE",
"250 638 LINE",
"266 727 LINE",
"164 727 LINE"
);
},
{
closed = 1;
nodes = (
"207 458 LINE SMOOTH",
"212 486 OFFCURVE",
"212 497 QCURVE SMOOTH",
"212 506 OFFCURVE",
"202 515 OFFCURVE",
"188 515 QCURVE SMOOTH",
"143 515 LINE",
"53 -79 LINE SMOOTH",
"45 -126 OFFCURVE",
"15 -166 OFFCURVE",
"-14 -166 QCURVE SMOOTH",
"-28 -166 OFFCURVE",
"-60 -159 QCURVE",
"-75 -214 LINE",
"-45 -224 OFFCURVE",
"-7 -224 QCURVE SMOOTH",
"34 -224 OFFCURVE",
"87 -192 OFFCURVE",
"120 -120 OFFCURVE",
"130 -58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
9 7 12 106 0 3 106 16 6 114 0 0 114 7 15 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 229;
}
);
leftKerningGroup = j;
note = uni006A;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"120 0 LINE",
"163 243 LINE",
"194 250 OFFCURVE",
"248 273 QCURVE",
"376 20 LINE SMOOTH",
"382 8 OFFCURVE",
"393 0 OFFCURVE",
"404 0 QCURVE SMOOTH",
"476 0 LINE",
"316 308 LINE",
"365 343 OFFCURVE",
"439 411 OFFCURVE",
"493 473 OFFCURVE",
"525 515 QCURVE",
"455 515 LINE SMOOTH",
"443 515 OFFCURVE",
"428 507 OFFCURVE",
"419 495 QCURVE SMOOTH",
"372 431 OFFCURVE",
"235 328 OFFCURVE",
"174 310 QCURVE",
"238 670 LINE",
"239 674 OFFCURVE",
"244 701 OFFCURVE",
"244 709 QCURVE SMOOTH",
"244 718 OFFCURVE",
"234 727 OFFCURVE",
"220 727 QCURVE SMOOTH",
"174 727 LINE",
"55 51 LINE",
"54 47 OFFCURVE",
"50 25 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
31 25 20 14 33 106 14 14 20 30 27 2 35 10 114 20 6 114 10 6 0 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 500;
}
);
leftKerningGroup = b;
note = uni006B;
rightKerningGroup = k;
unicode = 006B;
},
{
glyphname = kcommaaccent;
layers = (
{
components = (
{
name = k;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 319, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 500;
}
);
leftKerningGroup = b;
note = uni0137;
rightKerningGroup = k;
unicode = 0137;
},
{
glyphname = l;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"163 727 LINE",
"65 148 LINE SMOOTH",
"58 107 OFFCURVE",
"58 78 QCURVE SMOOTH",
"58 35 OFFCURVE",
"106 -7 OFFCURVE",
"151 -7 QCURVE SMOOTH",
"175 -7 OFFCURVE",
"218 3 OFFCURVE",
"233 10 QCURVE",
"223 60 LINE",
"197 51 OFFCURVE",
"179 51 QCURVE SMOOTH",
"155 51 OFFCURVE",
"132 73 OFFCURVE",
"132 97 QCURVE SMOOTH",
"132 111 OFFCURVE",
"141 163 QCURVE SMOOTH",
"174 360 LINE SMOOTH",
"210 576 OFFCURVE",
"227 670 QCURVE",
"228 674 OFFCURVE",
"233 701 OFFCURVE",
"233 709 QCURVE SMOOTH",
"233 718 OFFCURVE",
"223 727 OFFCURVE",
"209 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
16 19 2 25 19 13 106 25 0 114 19 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 258;
}
);
leftKerningGroup = b;
note = uni006C;
unicode = 006C;
},
{
glyphname = lacute;
layers = (
{
components = (
{
name = l;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 496, 215}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = b;
note = uni013A;
unicode = 013A;
},
{
glyphname = lcaron;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = glyph00592;
transform = "{1, 0, 0, 1, 487, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = b;
note = uni013E;
unicode = 013E;
changeCount = 2;
},
{
glyphname = lcommaaccent;
layers = (
{
components = (
{
name = l;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 207, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
leftKerningGroup = b;
note = uni013C;
unicode = 013C;
},
{
glyphname = lslash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"163 727 LINE",
"105 387 LINE",
"34 346 LINE",
"22 277 LINE",
"94 319 LINE",
"65 148 LINE SMOOTH",
"58 109 OFFCURVE",
"58 78 QCURVE SMOOTH",
"58 35 OFFCURVE",
"106 -7 OFFCURVE",
"151 -7 QCURVE SMOOTH",
"175 -7 OFFCURVE",
"218 3 OFFCURVE",
"233 10 QCURVE",
"223 60 LINE",
"197 51 OFFCURVE",
"179 51 QCURVE SMOOTH",
"155 51 OFFCURVE",
"132 73 OFFCURVE",
"132 97 QCURVE SMOOTH",
"132 123 OFFCURVE",
"174 358 QCURVE",
"234 393 LINE SMOOTH",
"249 402 OFFCURVE",
"259 420 OFFCURVE",
"262 434 QCURVE SMOOTH",
"270 478 LINE",
"186 428 LINE",
"227 670 LINE",
"228 674 OFFCURVE",
"233 701 OFFCURVE",
"233 709 QCURVE SMOOTH",
"233 718 OFFCURVE",
"223 727 OFFCURVE",
"209 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
13 24 3 34 0 114 21 24 18 106 24 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 258;
}
);
leftKerningGroup = b;
note = uni0142;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"716 57 LINE",
"715 53 OFFCURVE",
"710 26 OFFCURVE",
"710 18 QCURVE SMOOTH",
"710 9 OFFCURVE",
"720 0 OFFCURVE",
"734 0 QCURVE SMOOTH",
"780 0 LINE",
"844 356 LINE SMOOTH",
"850 390 OFFCURVE",
"850 408 QCURVE SMOOTH",
"850 468 OFFCURVE",
"769 527 OFFCURVE",
"707 527 QCURVE SMOOTH",
"662 527 OFFCURVE",
"586 495 OFFCURVE",
"565 480 QCURVE SMOOTH",
"559 476 OFFCURVE",
"551 470 QCURVE SMOOTH",
"542 463 OFFCURVE",
"524 450 OFFCURVE",
"520 450 QCURVE SMOOTH",
"517 450 OFFCURVE",
"512 454 OFFCURVE",
"506 464 OFFCURVE",
"505 466 QCURVE",
"493 488 OFFCURVE",
"435 527 OFFCURVE",
"377 527 QCURVE SMOOTH",
"332 527 OFFCURVE",
"256 495 OFFCURVE",
"235 480 QCURVE SMOOTH",
"231 477 OFFCURVE",
"203 457 OFFCURVE",
"198 457 QCURVE SMOOTH",
"193 457 OFFCURVE",
"189 463 OFFCURVE",
"189 471 QCURVE SMOOTH",
"189 492 LINE SMOOTH",
"189 504 OFFCURVE",
"179 515 OFFCURVE",
"168 515 QCURVE SMOOTH",
"120 515 LINE",
"120 478 LINE SMOOTH",
"120 447 OFFCURVE",
"116 397 OFFCURVE",
"111 368 QCURVE SMOOTH",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"183 356 LINE SMOOTH",
"185 366 OFFCURVE",
"191 380 OFFCURVE",
"198 387 QCURVE SMOOTH",
"221 410 OFFCURVE",
"300 461 OFFCURVE",
"343 461 QCURVE SMOOTH",
"393 461 OFFCURVE",
"441 422 OFFCURVE",
"441 382 QCURVE SMOOTH",
"441 365 OFFCURVE",
"434 324 OFFCURVE",
"433 319 QCURVE SMOOTH",
"386 57 LINE",
"385 53 OFFCURVE",
"380 26 OFFCURVE",
"380 18 QCURVE SMOOTH",
"380 9 OFFCURVE",
"390 0 OFFCURVE",
"404 0 QCURVE SMOOTH",
"450 0 LINE",
"513 356 LINE SMOOTH",
"515 366 OFFCURVE",
"521 380 OFFCURVE",
"528 387 QCURVE SMOOTH",
"551 410 OFFCURVE",
"630 461 OFFCURVE",
"673 461 QCURVE SMOOTH",
"723 461 OFFCURVE",
"771 422 OFFCURVE",
"771 382 QCURVE SMOOTH",
"771 365 OFFCURVE",
"764 324 OFFCURVE",
"763 319 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
13 81 16 37 84 34 74 5 106 74 59 26 106 45 6 114 59 7 114 34 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 870;
}
);
leftKerningGroup = m;
note = uni006D;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"120 0 LINE",
"184 359 LINE SMOOTH",
"186 369 OFFCURVE",
"192 383 OFFCURVE",
"199 390 QCURVE SMOOTH",
"220 411 OFFCURVE",
"302 461 OFFCURVE",
"347 461 QCURVE SMOOTH",
"452 461 OFFCURVE",
"452 382 QCURVE SMOOTH",
"452 363 OFFCURVE",
"448 341 QCURVE SMOOTH",
"444 319 OFFCURVE",
"444 316 QCURVE",
"397 57 LINE",
"396 53 OFFCURVE",
"391 26 OFFCURVE",
"391 18 QCURVE SMOOTH",
"391 9 OFFCURVE",
"401 0 OFFCURVE",
"415 0 QCURVE SMOOTH",
"461 0 LINE",
"525 356 LINE SMOOTH",
"531 390 OFFCURVE",
"531 408 QCURVE SMOOTH",
"531 449 OFFCURVE",
"490 502 OFFCURVE",
"423 527 OFFCURVE",
"381 527 QCURVE SMOOTH",
"333 527 OFFCURVE",
"257 495 OFFCURVE",
"235 480 QCURVE",
"231 477 OFFCURVE",
"203 457 OFFCURVE",
"198 457 QCURVE SMOOTH",
"193 457 OFFCURVE",
"189 463 OFFCURVE",
"189 471 QCURVE SMOOTH",
"189 492 LINE SMOOTH",
"189 504 OFFCURVE",
"179 515 OFFCURVE",
"168 515 QCURVE SMOOTH",
"120 515 LINE",
"120 478 LINE SMOOTH",
"120 422 OFFCURVE",
"111 368 QCURVE SMOOTH",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
31 2 34 52 23 44 106 9 6 114 23 7 114 52 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
leftKerningGroup = n;
note = uni006E;
rightKerningGroup = n;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
name = n;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 603, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = n;
note = uni0144;
rightKerningGroup = n;
unicode = 0144;
},
{
glyphname = ncaron;
layers = (
{
components = (
{
name = n;
},
{
name = caron;
transform = "{1, 0, 0, 1, 131, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = n;
note = uni0148;
rightKerningGroup = n;
unicode = 0148;
},
{
glyphname = ncommaaccent;
layers = (
{
components = (
{
name = n;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 341, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = n;
note = uni0146;
rightKerningGroup = n;
unicode = 0146;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
name = n;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 522, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = n;
note = uni00F1;
rightKerningGroup = n;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"363 -12 OFFCURVE",
"494 99 OFFCURVE",
"549 262 OFFCURVE",
"549 344 QCURVE SMOOTH",
"549 435 OFFCURVE",
"450 528 OFFCURVE",
"353 528 QCURVE SMOOTH",
"247 528 OFFCURVE",
"116 417 OFFCURVE",
"61 254 OFFCURVE",
"61 172 QCURVE SMOOTH",
"61 81 OFFCURVE",
"160 -12 OFFCURVE",
"257 -12 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402 467 OFFCURVE",
"470 399 OFFCURVE",
"470 336 QCURVE SMOOTH",
"470 282 OFFCURVE",
"439 152 OFFCURVE",
"351 49 OFFCURVE",
"273 49 QCURVE SMOOTH",
"208 49 OFFCURVE",
"140 117 OFFCURVE",
"140 180 QCURVE SMOOTH",
"140 234 OFFCURVE",
"171 364 OFFCURVE",
"259 467 OFFCURVE",
"337 467 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 20 106 6 27 106 6 7 114 13 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 566;
}
);
leftKerningGroup = o;
note = uni006F;
rightKerningGroup = o;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
name = o;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 615, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni00F3;
rightKerningGroup = o;
unicode = 00F3;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
name = o;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 123, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni00F4;
rightKerningGroup = o;
unicode = 00F4;
},
{
glyphname = ocircumflexacute;
layers = (
{
components = (
{
name = o;
},
{
name = uniE000;
transform = "{1, 0, 0, 1, 75, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = ocircumflexacute;
note = uni1ED1;
rightKerningGroup = o;
unicode = 1ED1;
},
{
glyphname = ocircumflexdotbelow;
layers = (
{
components = (
{
name = o;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 123, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni1ED9;
rightKerningGroup = o;
unicode = 1ED9;
},
{
glyphname = ocircumflexgrave;
layers = (
{
components = (
{
name = o;
},
{
name = uniE001;
transform = "{1, 0, 0, 1, 77, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = ocircumflexacute;
note = uni1ED3;
rightKerningGroup = o;
unicode = 1ED3;
},
{
glyphname = ocircumflexhookabove;
layers = (
{
components = (
{
name = o;
},
{
name = uniE002;
transform = "{1, 0, 0, 1, 91, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = ocircumflexacute;
note = uni1ED5;
rightKerningGroup = o;
unicode = 1ED5;
},
{
glyphname = ocircumflextilde;
layers = (
{
components = (
{
name = o;
},
{
name = uniE003;
transform = "{1, 0, 0, 1, 86, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = ocircumflexacute;
note = uni1ED7;
rightKerningGroup = o;
unicode = 1ED7;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
name = o;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 166, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni00F6;
rightKerningGroup = o;
unicode = 00F6;
},
{
glyphname = odotbelow;
layers = (
{
components = (
{
name = o;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni1ECD;
rightKerningGroup = o;
unicode = 1ECD;
},
{
glyphname = ograve;
layers = (
{
components = (
{
name = o;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 541, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni00F2;
rightKerningGroup = o;
unicode = 00F2;
},
{
glyphname = ohookabove;
layers = (
{
components = (
{
name = o;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 532, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni1ECF;
rightKerningGroup = o;
unicode = 1ECF;
},
{
glyphname = ohorn;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"363 -12 OFFCURVE",
"494 99 OFFCURVE",
"549 262 OFFCURVE",
"549 344 QCURVE SMOOTH",
"549 389 OFFCURVE",
"537 422 QCURVE",
"546 422 LINE SMOOTH",
"587 422 OFFCURVE",
"647 464 OFFCURVE",
"677 533 OFFCURVE",
"677 572 QCURVE SMOOTH",
"677 589 OFFCURVE",
"664 607 OFFCURVE",
"649 607 QCURVE SMOOTH",
"642 607 OFFCURVE",
"628 604 QCURVE SMOOTH",
"594 597 LINE",
"597 578 OFFCURVE",
"597 557 QCURVE SMOOTH",
"597 520 OFFCURVE",
"570 471 OFFCURVE",
"538 471 QCURVE SMOOTH",
"525 471 OFFCURVE",
"507 478 OFFCURVE",
"496 486 QCURVE",
"484 494 OFFCURVE",
"476 499 QCURVE SMOOTH",
"427 528 OFFCURVE",
"353 528 QCURVE SMOOTH",
"247 528 OFFCURVE",
"116 417 OFFCURVE",
"61 254 OFFCURVE",
"61 172 QCURVE SMOOTH",
"61 81 OFFCURVE",
"160 -12 OFFCURVE",
"257 -12 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402 467 OFFCURVE",
"470 399 OFFCURVE",
"470 336 QCURVE SMOOTH",
"470 282 OFFCURVE",
"439 152 OFFCURVE",
"351 49 OFFCURVE",
"273 49 QCURVE SMOOTH",
"208 49 OFFCURVE",
"140 117 OFFCURVE",
"140 180 QCURVE SMOOTH",
"140 234 OFFCURVE",
"171 364 OFFCURVE",
"259 467 OFFCURVE",
"337 467 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
29 13 6 35 42 106 35 11 114 6 49 106 21 6 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
MDRP[00100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 585;
}
);
leftKerningGroup = o;
note = uni01A1;
unicode = 01A1;
},
{
glyphname = ohornacute;
layers = (
{
components = (
{
name = ohorn;
},
{
name = acute;
transform = "{1, 0, 0, 1, 212, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 585;
}
);
leftKerningGroup = o;
note = uni1EDB;
unicode = 1EDB;
},
{
glyphname = ohorndotbelow;
layers = (
{
components = (
{
name = ohorn;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 539, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 585;
}
);
leftKerningGroup = o;
note = uni1EE3;
unicode = 1EE3;
},
{
glyphname = ohorngrave;
layers = (
{
components = (
{
name = ohorn;
},
{
name = grave;
transform = "{1, 0, 0, 1, 125, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 585;
}
);
leftKerningGroup = o;
note = uni1EDD;
unicode = 1EDD;
},
{
glyphname = ohornhookabove;
layers = (
{
components = (
{
name = ohorn;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 532, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 585;
}
);
leftKerningGroup = o;
note = uni1EDF;
unicode = 1EDF;
},
{
glyphname = ohorntilde;
layers = (
{
components = (
{
name = ohorn;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 148, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 585;
}
);
leftKerningGroup = o;
note = uni1EE1;
unicode = 1EE1;
},
{
glyphname = ohungarumlaut;
layers = (
{
components = (
{
name = o;
},
{
name = hungarumlaut;
transform = "{1, 0, 0, 1, 161, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni0151;
rightKerningGroup = o;
unicode = 0151;
},
{
glyphname = omacron;
layers = (
{
components = (
{
name = o;
},
{
name = macron;
transform = "{1, 0, 0, 1, 155, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni014D;
rightKerningGroup = o;
unicode = 014D;
},
{
glyphname = oslash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"363 -12 OFFCURVE",
"494 99 OFFCURVE",
"549 262 OFFCURVE",
"549 344 QCURVE SMOOTH",
"549 435 OFFCURVE",
"450 528 OFFCURVE",
"353 528 QCURVE SMOOTH",
"247 528 OFFCURVE",
"116 417 OFFCURVE",
"61 254 OFFCURVE",
"61 172 QCURVE SMOOTH",
"61 81 OFFCURVE",
"160 -12 OFFCURVE",
"257 -12 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"397 467 OFFCURVE",
"428 445 QCURVE",
"157 96 LINE",
"140 124 OFFCURVE",
"140 180 QCURVE SMOOTH",
"140 234 OFFCURVE",
"171 364 OFFCURVE",
"259 467 OFFCURVE",
"337 467 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"217 49 OFFCURVE",
"187 66 QCURVE",
"456 413 LINE",
"470 382 OFFCURVE",
"470 336 QCURVE SMOOTH",
"470 282 OFFCURVE",
"439 152 OFFCURVE",
"351 49 OFFCURVE",
"273 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
28 19 22 13 31 106 13 11 114 6 22 106 6 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 566;
}
);
leftKerningGroup = o;
note = uni00F8;
rightKerningGroup = o;
unicode = 00F8;
},
{
glyphname = otilde;
layers = (
{
components = (
{
name = o;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 521, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = uni00F5;
rightKerningGroup = o;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"712 200 OFFCURVE",
"828 247 OFFCURVE",
"900 335 OFFCURVE",
"900 394 QCURVE SMOOTH",
"900 435 OFFCURVE",
"858 495 OFFCURVE",
"778 527 OFFCURVE",
"722 527 QCURVE SMOOTH",
"669 527 OFFCURVE",
"588 486 OFFCURVE",
"554 452 QCURVE",
"548 445 OFFCURVE",
"537 438 OFFCURVE",
"532 438 QCURVE SMOOTH",
"527 438 OFFCURVE",
"519 445 OFFCURVE",
"514 453 QCURVE SMOOTH",
"464 528 OFFCURVE",
"353 528 QCURVE SMOOTH",
"258 528 OFFCURVE",
"126 428 OFFCURVE",
"61 268 OFFCURVE",
"61 180 QCURVE SMOOTH",
"61 86 OFFCURVE",
"161 -12 OFFCURVE",
"258 -12 QCURVE SMOOTH",
"313 -12 OFFCURVE",
"400 28 OFFCURVE",
"439 64 QCURVE",
"446 71 OFFCURVE",
"460 79 OFFCURVE",
"464 79 QCURVE SMOOTH",
"473 79 OFFCURVE",
"483 64 QCURVE SMOOTH",
"507 28 OFFCURVE",
"593 -12 OFFCURVE",
"651 -12 QCURVE SMOOTH",
"696 -12 OFFCURVE",
"791 16 OFFCURVE",
"829 36 QCURVE",
"808 86 LINE",
"778 71 OFFCURVE",
"707 50 OFFCURVE",
"675 50 QCURVE SMOOTH",
"525 50 OFFCURVE",
"525 186 QCURVE SMOOTH",
"525 204 OFFCURVE",
"526 214 QCURVE",
"548 208 OFFCURVE",
"613 200 OFFCURVE",
"648 200 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"544 321 OFFCURVE",
"584 409 OFFCURVE",
"658 469 OFFCURVE",
"711 469 QCURVE SMOOTH",
"766 469 OFFCURVE",
"819 418 OFFCURVE",
"819 378 QCURVE SMOOTH",
"819 337 OFFCURVE",
"771 282 OFFCURVE",
"695 256 OFFCURVE",
"651 256 QCURVE SMOOTH",
"574 256 OFFCURVE",
"535 272 QCURVE"
);
},
{
closed = 1;
nodes = (
"140 49 OFFCURVE",
"140 187 QCURVE SMOOTH",
"140 256 OFFCURVE",
"183 384 OFFCURVE",
"275 467 OFFCURVE",
"342 467 QCURVE SMOOTH",
"470 467 OFFCURVE",
"470 330 QCURVE SMOOTH",
"470 261 OFFCURVE",
"427 132 OFFCURVE",
"336 49 OFFCURVE",
"268 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
24 75 106 13 6 106 13 24 50 52 106 50 50 24 31 69 106 42 59 106 42 42 24 31 7 114 24 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 888;
}
);
leftKerningGroup = o;
note = uni0153;
rightKerningGroup = ae;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"26 -121 LINE",
"25 -125 OFFCURVE",
"20 -152 OFFCURVE",
"20 -160 QCURVE SMOOTH",
"20 -169 OFFCURVE",
"30 -178 OFFCURVE",
"44 -178 QCURVE SMOOTH",
"90 -178 LINE",
"123 10 LINE",
"149 1 OFFCURVE",
"219 -12 OFFCURVE",
"255 -12 QCURVE SMOOTH",
"347 -12 OFFCURVE",
"475 89 OFFCURVE",
"538 252 OFFCURVE",
"538 343 QCURVE SMOOTH",
"538 399 OFFCURVE",
"497 481 OFFCURVE",
"422 524 OFFCURVE",
"371 524 QCURVE SMOOTH",
"303 524 OFFCURVE",
"236 477 QCURVE SMOOTH",
"233 475 OFFCURVE",
"219 465 QCURVE SMOOTH",
"204 454 OFFCURVE",
"198 454 QCURVE SMOOTH",
"194 454 OFFCURVE",
"190 460 OFFCURVE",
"190 468 QCURVE SMOOTH",
"190 492 LINE SMOOTH",
"190 504 OFFCURVE",
"180 515 OFFCURVE",
"169 515 QCURVE SMOOTH",
"121 515 LINE",
"121 478 LINE SMOOTH",
"121 422 OFFCURVE",
"112 368 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"184 353 LINE SMOOTH",
"186 363 OFFCURVE",
"191 375 OFFCURVE",
"198 382 QCURVE SMOOTH",
"274 458 OFFCURVE",
"338 458 QCURVE SMOOTH",
"394 458 OFFCURVE",
"457 391 OFFCURVE",
"457 318 QCURVE SMOOTH",
"457 255 OFFCURVE",
"416 134 OFFCURVE",
"330 54 OFFCURVE",
"267 54 QCURVE SMOOTH",
"242 54 OFFCURVE",
"192 64 OFFCURVE",
"154 78 OFFCURVE",
"147 84 QCURVE",
"139 90 OFFCURVE",
"139 97 QCURVE SMOOTH",
"139 99 OFFCURVE",
"143 123 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
32 29 24 44 106 16 51 106 24 11 114 2 6 114 16 7 114 29 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 550;
}
);
leftKerningGroup = p;
note = uni0070;
rightKerningGroup = p;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"535 399 OFFCURVE",
"494 481 OFFCURVE",
"419 524 OFFCURVE",
"368 524 QCURVE SMOOTH",
"321 524 OFFCURVE",
"255 494 OFFCURVE",
"234 478 QCURVE",
"228 474 OFFCURVE",
"222 469 QCURVE",
"216 463 OFFCURVE",
"204 454 OFFCURVE",
"201 454 QCURVE SMOOTH",
"196 454 OFFCURVE",
"196 460 QCURVE SMOOTH",
"196 464 OFFCURVE",
"200 476 QCURVE",
"203 488 OFFCURVE",
"206 503 QCURVE SMOOTH",
"238 676 LINE",
"239 680 OFFCURVE",
"243 702 OFFCURVE",
"243 709 QCURVE SMOOTH",
"243 718 OFFCURVE",
"233 727 OFFCURVE",
"219 727 QCURVE SMOOTH",
"173 727 LINE",
"85 229 LINE",
"22 -127 LINE",
"21 -131 OFFCURVE",
"17 -153 OFFCURVE",
"17 -160 QCURVE SMOOTH",
"17 -169 OFFCURVE",
"27 -178 OFFCURVE",
"41 -178 QCURVE SMOOTH",
"87 -178 LINE",
"120 13 LINE",
"146 4 OFFCURVE",
"216 -9 OFFCURVE",
"252 -9 QCURVE SMOOTH",
"344 -9 OFFCURVE",
"472 92 OFFCURVE",
"535 253 OFFCURVE",
"535 343 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"181 353 LINE SMOOTH",
"183 363 OFFCURVE",
"188 375 OFFCURVE",
"195 382 QCURVE SMOOTH",
"271 458 OFFCURVE",
"335 458 QCURVE SMOOTH",
"391 458 OFFCURVE",
"454 391 OFFCURVE",
"454 318 QCURVE SMOOTH",
"454 255 OFFCURVE",
"413 134 OFFCURVE",
"327 54 OFFCURVE",
"264 54 QCURVE SMOOTH",
"226 54 OFFCURVE",
"168 70 OFFCURVE",
"136 91 OFFCURVE",
"136 97 QCURVE SMOOTH",
"136 99 OFFCURVE",
"140 123 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
11 8 20 16 3 48 106 38 55 106 38 7 114 3 11 114 16 0 114 8 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 547;
}
);
leftKerningGroup = b;
note = uni00FE;
rightKerningGroup = b;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"486 501 OFFCURVE",
"393 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"251 524 OFFCURVE",
"123 423 OFFCURVE",
"60 260 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 113 OFFCURVE",
"101 31 OFFCURVE",
"176 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"300 -12 OFFCURVE",
"363 35 QCURVE",
"369 40 OFFCURVE",
"375 46 QCURVE",
"381 51 OFFCURVE",
"392 60 OFFCURVE",
"395 60 QCURVE SMOOTH",
"400 60 OFFCURVE",
"400 54 QCURVE SMOOTH",
"400 50 OFFCURVE",
"396 37 QCURVE SMOOTH",
"392 24 OFFCURVE",
"389 9 QCURVE SMOOTH",
"365 -121 LINE",
"364 -125 OFFCURVE",
"359 -152 OFFCURVE",
"359 -160 QCURVE SMOOTH",
"359 -169 OFFCURVE",
"369 -178 OFFCURVE",
"383 -178 QCURVE SMOOTH",
"429 -178 LINE",
"536 433 LINE SMOOTH",
"540 457 OFFCURVE",
"540 460 QCURVE SMOOTH",
"540 468 OFFCURVE",
"530 478 OFFCURVE",
"519 484 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"356 458 OFFCURVE",
"406 448 OFFCURVE",
"444 434 OFFCURVE",
"451 428 QCURVE",
"459 422 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
9 6 26 52 106 34 45 106 26 11 114 34 7 114 6 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 545;
}
);
leftKerningGroup = q;
note = uni0071;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"184 360 LINE SMOOTH",
"186 371 OFFCURVE",
"192 384 OFFCURVE",
"199 391 QCURVE SMOOTH",
"208 400 OFFCURVE",
"247 424 OFFCURVE",
"304 444 OFFCURVE",
"334 444 QCURVE SMOOTH",
"351 444 OFFCURVE",
"373 438 QCURVE",
"386 523 LINE",
"368 524 LINE",
"330 524 OFFCURVE",
"255 491 OFFCURVE",
"235 477 QCURVE SMOOTH",
"231 474 OFFCURVE",
"218 465 OFFCURVE",
"201 454 OFFCURVE",
"197 454 QCURVE SMOOTH",
"193 454 OFFCURVE",
"189 460 OFFCURVE",
"189 468 QCURVE SMOOTH",
"189 492 LINE SMOOTH",
"189 504 OFFCURVE",
"179 515 OFFCURVE",
"168 515 QCURVE SMOOTH",
"120 515 LINE",
"120 478 LINE SMOOTH",
"120 422 OFFCURVE",
"111 368 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
33 30 17 21 106 2 6 114 17 7 114 30 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 342;
}
);
leftKerningGroup = r;
note = uni0072;
rightKerningGroup = r;
unicode = 0072;
},
{
glyphname = racute;
layers = (
{
components = (
{
name = r;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 538, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 342;
}
);
leftKerningGroup = r;
note = uni0155;
rightKerningGroup = r;
unicode = 0155;
},
{
glyphname = rcaron;
layers = (
{
components = (
{
name = r;
},
{
name = caron;
transform = "{1, 0, 0, 1, 15, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 342;
}
);
leftKerningGroup = r;
note = uni0159;
rightKerningGroup = r;
unicode = 0159;
},
{
glyphname = rcommaaccent;
layers = (
{
components = (
{
name = r;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 217, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 342;
}
);
leftKerningGroup = r;
note = uni0157;
rightKerningGroup = r;
unicode = 0157;
},
{
glyphname = s;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"24 33 LINE",
"57 14 OFFCURVE",
"146 -12 OFFCURVE",
"192 -12 QCURVE SMOOTH",
"256 -12 OFFCURVE",
"345 29 OFFCURVE",
"390 98 OFFCURVE",
"390 141 QCURVE SMOOTH",
"390 179 OFFCURVE",
"359 229 OFFCURVE",
"309 262 OFFCURVE",
"257 289 QCURVE SMOOTH",
"228 304 LINE SMOOTH",
"193 322 OFFCURVE",
"159 356 OFFCURVE",
"159 382 QCURVE SMOOTH",
"159 400 OFFCURVE",
"176 431 OFFCURVE",
"191 442 QCURVE SMOOTH",
"206 453 OFFCURVE",
"246 464 OFFCURVE",
"268 464 QCURVE SMOOTH",
"293 464 OFFCURVE",
"334 449 OFFCURVE",
"351 440 QCURVE",
"368 430 OFFCURVE",
"370 430 QCURVE SMOOTH",
"374 430 OFFCURVE",
"383 441 OFFCURVE",
"389 451 QCURVE SMOOTH",
"415 497 LINE",
"387 508 OFFCURVE",
"313 524 OFFCURVE",
"277 524 QCURVE SMOOTH",
"215 524 OFFCURVE",
"126 482 OFFCURVE",
"79 412 OFFCURVE",
"79 371 QCURVE SMOOTH",
"79 350 OFFCURVE",
"84 332 QCURVE",
"91 310 OFFCURVE",
"121 277 OFFCURVE",
"163 250 OFFCURVE",
"199 232 QCURVE",
"206 228 OFFCURVE",
"220 222 QCURVE",
"253 205 OFFCURVE",
"288 184 OFFCURVE",
"309 151 OFFCURVE",
"309 127 QCURVE SMOOTH",
"309 87 OFFCURVE",
"244 50 OFFCURVE",
"193 50 QCURVE SMOOTH",
"156 50 OFFCURVE",
"81 74 OFFCURVE",
"53 91 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
13 51 33 45 21 51 2 106 51 11 114 21 33 106 21 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 425;
}
);
leftKerningGroup = s;
note = uni0073;
rightKerningGroup = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
name = s;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 535, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 425;
}
);
leftKerningGroup = s;
note = uni015B;
rightKerningGroup = s;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
name = s;
},
{
name = caron;
transform = "{1, 0, 0, 1, 42, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 425;
}
);
leftKerningGroup = s;
note = uni0161;
rightKerningGroup = s;
unicode = 0161;
},
{
glyphname = scedilla;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"228 304 LINE SMOOTH",
"193 322 OFFCURVE",
"159 356 OFFCURVE",
"159 382 QCURVE SMOOTH",
"159 400 OFFCURVE",
"176 431 OFFCURVE",
"191 442 QCURVE SMOOTH",
"206 453 OFFCURVE",
"246 464 OFFCURVE",
"268 464 QCURVE SMOOTH",
"293 464 OFFCURVE",
"334 449 OFFCURVE",
"351 440 QCURVE",
"368 430 OFFCURVE",
"370 430 QCURVE SMOOTH",
"374 430 OFFCURVE",
"383 441 OFFCURVE",
"389 451 QCURVE SMOOTH",
"415 497 LINE",
"387 508 OFFCURVE",
"313 524 OFFCURVE",
"277 524 QCURVE SMOOTH",
"215 524 OFFCURVE",
"126 482 OFFCURVE",
"79 412 OFFCURVE",
"79 371 QCURVE SMOOTH",
"79 350 OFFCURVE",
"84 332 QCURVE",
"91 310 OFFCURVE",
"121 277 OFFCURVE",
"163 250 OFFCURVE",
"199 232 QCURVE",
"206 228 OFFCURVE",
"220 222 QCURVE",
"253 205 OFFCURVE",
"288 184 OFFCURVE",
"309 151 OFFCURVE",
"309 127 QCURVE SMOOTH",
"309 87 OFFCURVE",
"244 50 OFFCURVE",
"193 50 QCURVE SMOOTH",
"156 50 OFFCURVE",
"81 74 OFFCURVE",
"53 91 QCURVE",
"24 33 LINE",
"56 15 OFFCURVE",
"141 -11 OFFCURVE",
"186 -12 QCURVE",
"162 -94 LINE",
"180 -94 LINE SMOOTH",
"219 -94 OFFCURVE",
"219 -115 QCURVE SMOOTH",
"219 -128 OFFCURVE",
"196 -143 OFFCURVE",
"177 -143 QCURVE SMOOTH",
"168 -143 OFFCURVE",
"154 -138 QCURVE SMOOTH",
"139 -133 OFFCURVE",
"135 -133 QCURVE SMOOTH",
"127 -133 OFFCURVE",
"118 -141 OFFCURVE",
"114 -151 QCURVE",
"103 -175 LINE",
"115 -180 OFFCURVE",
"148 -187 OFFCURVE",
"166 -187 QCURVE SMOOTH",
"190 -187 OFFCURVE",
"242 -168 OFFCURVE",
"277 -130 OFFCURVE",
"277 -104 QCURVE SMOOTH",
"277 -61 OFFCURVE",
"219 -57 QCURVE",
"233 -10 LINE",
"284 -4 OFFCURVE",
"355 39 OFFCURVE",
"390 103 OFFCURVE",
"390 141 QCURVE SMOOTH",
"390 179 OFFCURVE",
"359 229 OFFCURVE",
"309 262 OFFCURVE",
"257 289 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHW[ ]\011/* 2 values pushed */
9 -16 
NPUSHB[ ]\011/* 33 values pushed */
9 81 63 32 79 32 2 32 32 15 81 51 33 59 71 106 2 40 59 7 114 33 40 106 8 33 11 114 15 26 106 18 15 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
RDTG[ ]\011/* RoundDownToGrid */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 425;
}
);
leftKerningGroup = s;
note = uni015F;
rightKerningGroup = s;
unicode = 015F;
},
{
glyphname = scommaaccent;
layers = (
{
components = (
{
name = s;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 293, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 425;
}
);
leftKerningGroup = s;
note = uni0219;
rightKerningGroup = s;
unicode = 0219;
},
{
glyphname = germandbls;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"69 457 LINE",
"145 457 LINE",
"64 -80 LINE SMOOTH",
"58 -122 OFFCURVE",
"26 -166 OFFCURVE",
"-3 -166 QCURVE SMOOTH",
"-16 -166 OFFCURVE",
"-49 -159 QCURVE",
"-64 -214 LINE",
"-33 -224 OFFCURVE",
"4 -224 QCURVE SMOOTH",
"44 -224 OFFCURVE",
"98 -192 OFFCURVE",
"131 -120 OFFCURVE",
"141 -58 QCURVE SMOOTH",
"228 512 LINE SMOOTH",
"235 560 OFFCURVE",
"270 630 OFFCURVE",
"343 672 OFFCURVE",
"404 672 QCURVE SMOOTH",
"463 672 OFFCURVE",
"516 612 OFFCURVE",
"516 562 QCURVE SMOOTH",
"516 528 OFFCURVE",
"490 465 OFFCURVE",
"465 435 QCURVE SMOOTH",
"453 421 OFFCURVE",
"430 409 OFFCURVE",
"405 409 QCURVE SMOOTH",
"312 409 LINE",
"300 345 LINE",
"386 345 LINE SMOOTH",
"408 345 OFFCURVE",
"430 341 OFFCURVE",
"445 329 OFFCURVE",
"453 316 QCURVE SMOOTH",
"460 305 OFFCURVE",
"470 255 OFFCURVE",
"470 232 QCURVE SMOOTH",
"470 153 OFFCURVE",
"399 55 OFFCURVE",
"307 55 QCURVE SMOOTH",
"285 55 OFFCURVE",
"237 64 OFFCURVE",
"217 70 QCURVE",
"199 9 LINE",
"223 3 OFFCURVE",
"277 -6 OFFCURVE",
"300 -6 QCURVE SMOOTH",
"434 -6 OFFCURVE",
"551 132 OFFCURVE",
"551 242 QCURVE SMOOTH",
"551 280 OFFCURVE",
"531 334 OFFCURVE",
"518 347 QCURVE",
"507 357 OFFCURVE",
"491 365 QCURVE",
"483 370 OFFCURVE",
"476 376 OFFCURVE",
"476 381 QCURVE SMOOTH",
"476 386 OFFCURVE",
"482 393 OFFCURVE",
"489 397 QCURVE",
"495 401 OFFCURVE",
"498 403 QCURVE SMOOTH",
"545 436 OFFCURVE",
"591 530 OFFCURVE",
"591 582 QCURVE SMOOTH",
"591 649 OFFCURVE",
"507 734 OFFCURVE",
"416 734 QCURVE SMOOTH",
"193 734 OFFCURVE",
"156 527 QCURVE SMOOTH",
"154 515 LINE",
"79 515 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
15 45 44 106 45 45 4 64 69 106 66 64 15 114 26 33 106 26 10 114 4 55 106 4 1 114 0 74 106 0 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 576;
}
);
note = uni00DF;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"283 66 LINE",
"268 60 OFFCURVE",
"234 51 OFFCURVE",
"220 51 QCURVE SMOOTH",
"189 51 OFFCURVE",
"157 80 OFFCURVE",
"157 111 QCURVE SMOOTH",
"157 132 OFFCURVE",
"193 329 OFFCURVE",
"219 457 QCURVE",
"357 457 LINE",
"367 515 LINE",
"229 515 LINE",
"253 649 LINE",
"175 627 LINE",
"155 515 LINE",
"80 515 LINE",
"70 457 LINE",
"145 457 LINE",
"119 331 OFFCURVE",
"82 126 OFFCURVE",
"82 93 QCURVE SMOOTH",
"82 43 OFFCURVE",
"137 -7 OFFCURVE",
"194 -7 QCURVE SMOOTH",
"223 -7 OFFCURVE",
"277 8 OFFCURVE",
"297 18 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
9 14 17 106 14 13 106 10 14 6 114 2 23 106 2 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 339;
}
);
leftKerningGroup = t;
note = uni0074;
rightKerningGroup = t;
unicode = 0074;
},
{
glyphname = tcaron;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = t;
},
{
alignment = -1;
name = glyph00613;
transform = "{1, 0, 0, 1, 100, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 339;
}
);
leftKerningGroup = t;
note = uni0165;
rightKerningGroup = t;
unicode = 0165;
changeCount = 2;
},
{
glyphname = tcedilla;
layers = (
{
components = (
{
name = t;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 339;
}
);
leftKerningGroup = t;
note = uni0163;
rightKerningGroup = t;
unicode = 0163;
},
{
glyphname = tcommaaccent;
layers = (
{
components = (
{
name = t;
},
{
name = uniF6C3;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 339;
}
);
leftKerningGroup = t;
note = uni021B;
rightKerningGroup = t;
unicode = 021B;
},
{
glyphname = u;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH",
"134 515 LINE",
"77 191 LINE SMOOTH",
"69 150 OFFCURVE",
"67 132 QCURVE SMOOTH",
"65 114 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"149 -12 OFFCURVE",
"213 -12 QCURVE SMOOTH",
"284 -12 OFFCURVE",
"354 35 QCURVE",
"358 38 OFFCURVE",
"386 58 OFFCURVE",
"391 58 QCURVE SMOOTH",
"396 58 OFFCURVE",
"400 52 OFFCURVE",
"400 44 QCURVE SMOOTH",
"400 23 LINE SMOOTH",
"400 11 OFFCURVE",
"410 0 OFFCURVE",
"421 0 QCURVE SMOOTH",
"469 0 LINE",
"469 37 LINE SMOOTH",
"469 71 OFFCURVE",
"476 135 OFFCURVE",
"484 182 QCURVE SMOOTH",
"533 458 LINE",
"534 462 OFFCURVE",
"539 489 OFFCURVE",
"539 497 QCURVE SMOOTH",
"539 506 OFFCURVE",
"529 515 OFFCURVE",
"515 515 QCURVE SMOOTH",
"469 515 LINE",
"411 189 LINE SMOOTH",
"410 182 OFFCURVE",
"409 170 QCURVE",
"407 157 OFFCURVE",
"399 134 OFFCURVE",
"390 125 QCURVE SMOOTH",
"368 103 OFFCURVE",
"290 54 OFFCURVE",
"247 54 QCURVE SMOOTH",
"194 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
18 51 15 47 39 5 106 27 10 114 47 6 114 39 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
leftKerningGroup = u;
note = uni0075;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
name = u;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 590, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni00FA;
unicode = 00FA;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
name = u;
},
{
name = circumflex;
transform = "{1, 0, 0, 1, 113, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni00FB;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
name = u;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 154, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni00FC;
unicode = 00FC;
},
{
glyphname = udotbelow;
layers = (
{
components = (
{
name = u;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 502, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni1EE5;
unicode = 1EE5;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
name = u;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 531, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni00F9;
unicode = 00F9;
},
{
glyphname = uhookabove;
layers = (
{
components = (
{
name = u;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 509, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni1EE7;
unicode = 1EE7;
},
{
glyphname = uhorn;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH",
"134 515 LINE",
"77 191 LINE",
"73 169 LINE SMOOTH",
"72 163 OFFCURVE",
"70 154 QCURVE SMOOTH",
"68 145 OFFCURVE",
"67 132 QCURVE SMOOTH",
"65 114 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"149 -12 OFFCURVE",
"213 -12 QCURVE SMOOTH",
"284 -12 OFFCURVE",
"354 35 QCURVE",
"358 38 OFFCURVE",
"386 58 OFFCURVE",
"391 58 QCURVE SMOOTH",
"396 58 OFFCURVE",
"400 52 OFFCURVE",
"400 44 QCURVE SMOOTH",
"400 23 LINE SMOOTH",
"400 11 OFFCURVE",
"410 0 OFFCURVE",
"421 0 QCURVE SMOOTH",
"469 0 LINE",
"469 37 LINE SMOOTH",
"469 71 OFFCURVE",
"476 135 OFFCURVE",
"484 182 QCURVE SMOOTH",
"534 466 LINE",
"609 468 OFFCURVE",
"694 545 OFFCURVE",
"694 616 QCURVE SMOOTH",
"694 633 OFFCURVE",
"681 651 OFFCURVE",
"666 651 QCURVE SMOOTH",
"659 651 OFFCURVE",
"645 648 QCURVE SMOOTH",
"610 641 LINE",
"613 621 OFFCURVE",
"613 598 QCURVE SMOOTH",
"613 515 OFFCURVE",
"535 515 QCURVE SMOOTH",
"469 515 LINE",
"411 189 LINE SMOOTH",
"410 182 OFFCURVE",
"409 170 QCURVE",
"407 157 OFFCURVE",
"399 134 OFFCURVE",
"390 125 QCURVE SMOOTH",
"368 103 OFFCURVE",
"290 54 OFFCURVE",
"247 54 QCURVE SMOOTH",
"194 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
28 14 14 22 57 6 114 46 5 106 46 11 114 34 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDRP[00100]\011/* MoveDirectRelPt */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 575;
}
);
leftKerningGroup = u;
note = uni01B0;
unicode = 01B0;
},
{
glyphname = uhornacute;
layers = (
{
components = (
{
name = uhorn;
},
{
name = acute;
transform = "{1, 0, 0, 1, 187, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 575;
}
);
leftKerningGroup = u;
note = uni1EE9;
unicode = 1EE9;
},
{
glyphname = uhorndotbelow;
layers = (
{
components = (
{
name = uhorn;
},
{
name = dotbelowcomb;
transform = "{1, 0, 0, 1, 502, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 575;
}
);
leftKerningGroup = u;
note = uni1EF1;
unicode = 1EF1;
},
{
glyphname = uhorngrave;
layers = (
{
components = (
{
name = uhorn;
},
{
name = grave;
transform = "{1, 0, 0, 1, 115, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 575;
}
);
note = uni1EEB;
unicode = 1EEB;
},
{
glyphname = uhornhookabove;
layers = (
{
components = (
{
name = uhorn;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 509, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 575;
}
);
leftKerningGroup = u;
note = uni1EED;
unicode = 1EED;
},
{
glyphname = uhorntilde;
layers = (
{
components = (
{
name = uhorn;
},
{
name = tilde;
transform = "{1, 0, 0, 1, 133, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 575;
}
);
leftKerningGroup = u;
note = uni1EEF;
unicode = 1EEF;
},
{
glyphname = uhungarumlaut;
layers = (
{
components = (
{
name = u;
},
{
name = hungarumlaut;
transform = "{1, 0, 0, 1, 140, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni0171;
unicode = 0171;
},
{
glyphname = umacron;
layers = (
{
components = (
{
name = u;
},
{
name = macron;
transform = "{1, 0, 0, 1, 146, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni016B;
unicode = 016B;
},
{
glyphname = uogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"390 -13 OFFCURVE",
"338 -56 OFFCURVE",
"306 -108 OFFCURVE",
"306 -133 QCURVE SMOOTH",
"306 -164 OFFCURVE",
"351 -187 OFFCURVE",
"380 -187 QCURVE SMOOTH",
"411 -187 OFFCURVE",
"449 -178 QCURVE",
"454 -147 LINE",
"454 -140 OFFCURVE",
"445 -132 OFFCURVE",
"438 -132 QCURVE SMOOTH",
"429 -132 OFFCURVE",
"415 -136 QCURVE",
"412 -136 OFFCURVE",
"406 -138 QCURVE",
"400 -139 OFFCURVE",
"395 -139 QCURVE SMOOTH",
"363 -139 OFFCURVE",
"363 -115 QCURVE SMOOTH",
"363 -96 OFFCURVE",
"398 -51 OFFCURVE",
"448 -12 OFFCURVE",
"469 0 QCURVE",
"469 37 LINE SMOOTH",
"469 86 OFFCURVE",
"488 213 OFFCURVE",
"510 332 QCURVE SMOOTH",
"533 458 LINE",
"534 462 OFFCURVE",
"539 489 OFFCURVE",
"539 497 QCURVE SMOOTH",
"539 506 OFFCURVE",
"529 515 OFFCURVE",
"515 515 QCURVE SMOOTH",
"469 515 LINE",
"411 189 LINE SMOOTH",
"410 182 OFFCURVE",
"409 170 QCURVE",
"407 157 OFFCURVE",
"399 134 OFFCURVE",
"390 125 QCURVE SMOOTH",
"368 103 OFFCURVE",
"290 54 OFFCURVE",
"247 54 QCURVE SMOOTH",
"194 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH",
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH",
"134 515 LINE",
"82 224 LINE",
"71 159 LINE SMOOTH",
"65 125 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 55 OFFCURVE",
"128 -3 OFFCURVE",
"180 -10 QCURVE",
"202 -12 OFFCURVE",
"213 -12 QCURVE SMOOTH",
"284 -12 OFFCURVE",
"354 35 QCURVE",
"358 38 OFFCURVE",
"386 58 OFFCURVE",
"391 58 QCURVE SMOOTH",
"396 58 OFFCURVE",
"400 49 OFFCURVE",
"400 40 QCURVE SMOOTH",
"400 28 LINE SMOOTH",
"400 15 OFFCURVE",
"407 0 OFFCURVE",
"418 0 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
71 73 61 106 73 14 114 80 55 10 114 47 44 24 20 6 114 11 34 106 11 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
leftKerningGroup = u;
note = uni0173;
unicode = 0173;
},
{
glyphname = uring;
layers = (
{
components = (
{
name = u;
},
{
name = ring;
transform = "{1, 0, 0, 1, 148, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni016F;
unicode = 016F;
},
{
glyphname = utilde;
layers = (
{
components = (
{
name = u;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 506, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = u;
note = uni0169;
unicode = 0169;
},
{
glyphname = v;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"222 0 LINE",
"332 115 OFFCURVE",
"483 379 OFFCURVE",
"504 515 QCURVE",
"450 515 LINE SMOOTH",
"438 515 OFFCURVE",
"424 506 OFFCURVE",
"421 494 QCURVE SMOOTH",
"401 405 OFFCURVE",
"339 262 OFFCURVE",
"254 134 OFFCURVE",
"188 53 QCURVE",
"159 494 LINE SMOOTH",
"158 506 OFFCURVE",
"149 515 OFFCURVE",
"138 515 QCURVE SMOOTH",
"80 515 LINE",
"120 21 LINE SMOOTH",
"121 9 OFFCURVE",
"130 0 OFFCURVE",
"141 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
8 20 10 114 16 3 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 472;
}
);
leftKerningGroup = v;
note = uni0076;
rightKerningGroup = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"584 0 LINE",
"771 235 OFFCURVE",
"816 515 QCURVE",
"762 515 LINE SMOOTH",
"737 515 OFFCURVE",
"733 494 QCURVE SMOOTH",
"716 395 OFFCURVE",
"622 159 OFFCURVE",
"546 53 QCURVE",
"510 494 LINE SMOOTH",
"509 506 OFFCURVE",
"500 515 OFFCURVE",
"489 515 QCURVE SMOOTH",
"395 515 LINE",
"374 401 OFFCURVE",
"280 160 OFFCURVE",
"202 53 QCURVE",
"161 494 LINE SMOOTH",
"160 506 OFFCURVE",
"151 515 OFFCURVE",
"140 515 QCURVE SMOOTH",
"80 515 LINE",
"133 21 LINE SMOOTH",
"134 9 OFFCURVE",
"143 0 OFFCURVE",
"154 0 QCURVE SMOOTH",
"240 0 LINE",
"342 134 OFFCURVE",
"434 351 OFFCURVE",
"445 460 QCURVE",
"477 21 LINE SMOOTH",
"478 9 OFFCURVE",
"487 0 OFFCURVE",
"498 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
3 20 20 30 11 6 114 24 16 16 33 7 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 784;
}
);
leftKerningGroup = w;
note = uni0077;
rightKerningGroup = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"455 0 LINE",
"313 257 LINE",
"534 515 LINE",
"465 515 LINE SMOOTH",
"454 515 OFFCURVE",
"439 507 OFFCURVE",
"429 495 QCURVE SMOOTH",
"277 309 LINE",
"184 495 LINE SMOOTH",
"178 507 OFFCURVE",
"167 515 OFFCURVE",
"156 515 QCURVE SMOOTH",
"88 515 LINE",
"221 258 LINE",
"-1 0 LINE",
"66 0 LINE SMOOTH",
"77 0 OFFCURVE",
"91 8 OFFCURVE",
"101 20 QCURVE SMOOTH",
"257 203 LINE",
"357 20 LINE",
"363 8 OFFCURVE",
"375 0 OFFCURVE",
"386 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
15 3 23 20 10 6 114 23 8 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 491;
}
);
leftKerningGroup = x;
note = uni0078;
rightKerningGroup = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"262 -12 OFFCURVE",
"328 14 OFFCURVE",
"347 27 QCURVE SMOOTH",
"354 32 OFFCURVE",
"360 37 QCURVE SMOOTH",
"365 41 OFFCURVE",
"370 45 QCURVE",
"372 47 OFFCURVE",
"380 53 OFFCURVE",
"390 60 OFFCURVE",
"392 60 QCURVE SMOOTH",
"397 60 OFFCURVE",
"397 54 QCURVE SMOOTH",
"397 47 OFFCURVE",
"391 6 OFFCURVE",
"383 -40 QCURVE SMOOTH",
"372 -102 OFFCURVE",
"301 -159 OFFCURVE",
"251 -159 QCURVE SMOOTH",
"209 -159 OFFCURVE",
"137 -120 OFFCURVE",
"113 -92 QCURVE",
"65 -140 LINE",
"93 -175 OFFCURVE",
"184 -224 OFFCURVE",
"238 -224 QCURVE SMOOTH",
"330 -224 OFFCURVE",
"445 -131 OFFCURVE",
"460 -22 QCURVE SMOOTH",
"463 5 LINE",
"465 17 OFFCURVE",
"473 73 QCURVE SMOOTH",
"480 128 OFFCURVE",
"491 192 QCURVE SMOOTH",
"538 458 LINE",
"539 462 OFFCURVE",
"544 489 OFFCURVE",
"544 497 QCURVE SMOOTH",
"544 506 OFFCURVE",
"534 515 OFFCURVE",
"520 515 QCURVE SMOOTH",
"474 515 LINE",
"410 156 LINE SMOOTH",
"408 146 OFFCURVE",
"402 132 OFFCURVE",
"395 125 QCURVE SMOOTH",
"373 103 OFFCURVE",
"295 54 OFFCURVE",
"252 54 QCURVE SMOOTH",
"199 54 OFFCURVE",
"149 94 OFFCURVE",
"149 133 QCURVE SMOOTH",
"149 150 OFFCURVE",
"156 191 OFFCURVE",
"157 196 QCURVE SMOOTH",
"203 458 LINE",
"204 462 OFFCURVE",
"209 489 OFFCURVE",
"209 497 QCURVE SMOOTH",
"209 506 OFFCURVE",
"199 515 OFFCURVE",
"185 515 QCURVE SMOOTH",
"139 515 LINE",
"76 159 LINE SMOOTH",
"70 125 OFFCURVE",
"70 107 QCURVE SMOOTH",
"70 47 OFFCURVE",
"154 -12 OFFCURVE",
"218 -12 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
46 69 49 68 19 106 68 11 114 42 49 106 42 15 114 27 5 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
leftKerningGroup = y;
note = uni0079;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
name = y;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 606, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = y;
note = uni00FD;
unicode = 00FD;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
name = y;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 158, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = y;
note = uni00FF;
unicode = 00FF;
},
{
glyphname = ydotbelow;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"196 -159 LINE",
"184 -224 LINE",
"229 -224 LINE SMOOTH",
"279 -224 OFFCURVE",
"368 -201 OFFCURVE",
"448 -112 OFFCURVE",
"460 -22 QCURVE SMOOTH",
"463 5 LINE",
"465 17 OFFCURVE",
"473 73 QCURVE SMOOTH",
"480 128 OFFCURVE",
"491 192 QCURVE SMOOTH",
"538 458 LINE",
"539 462 OFFCURVE",
"544 489 OFFCURVE",
"544 497 QCURVE SMOOTH",
"544 506 OFFCURVE",
"534 515 OFFCURVE",
"520 515 QCURVE SMOOTH",
"474 515 LINE",
"410 156 LINE SMOOTH",
"408 146 OFFCURVE",
"402 132 OFFCURVE",
"395 125 QCURVE SMOOTH",
"373 103 OFFCURVE",
"295 54 OFFCURVE",
"252 54 QCURVE SMOOTH",
"199 54 OFFCURVE",
"149 94 OFFCURVE",
"149 133 QCURVE SMOOTH",
"149 150 OFFCURVE",
"156 191 OFFCURVE",
"157 196 QCURVE SMOOTH",
"203 458 LINE",
"204 462 OFFCURVE",
"209 489 OFFCURVE",
"209 497 QCURVE SMOOTH",
"209 506 OFFCURVE",
"199 515 OFFCURVE",
"185 515 QCURVE SMOOTH",
"139 515 LINE",
"76 159 LINE SMOOTH",
"70 125 OFFCURVE",
"70 107 QCURVE SMOOTH",
"70 47 OFFCURVE",
"154 -12 OFFCURVE",
"218 -12 QCURVE SMOOTH",
"262 -12 OFFCURVE",
"328 14 OFFCURVE",
"347 27 QCURVE SMOOTH",
"354 32 OFFCURVE",
"360 37 QCURVE SMOOTH",
"365 41 OFFCURVE",
"370 45 QCURVE",
"372 47 OFFCURVE",
"380 53 OFFCURVE",
"390 60 OFFCURVE",
"392 60 QCURVE SMOOTH",
"397 60 OFFCURVE",
"397 54 QCURVE SMOOTH",
"397 46 OFFCURVE",
"384 -36 QCURVE SMOOTH",
"371 -104 OFFCURVE",
"301 -159 OFFCURVE",
"241 -159 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"9 -224 LINE",
"106 -224 LINE",
"122 -135 LINE",
"25 -135 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
28 49 46 24 63 64 106 63 68 65 106 18 38 106 18 11 114 24 6 114 68 15 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
note = uni1EF5;
unicode = 1EF5;
},
{
glyphname = ygrave;
layers = (
{
components = (
{
name = y;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 529, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = y;
note = uni1EF3;
unicode = 1EF3;
},
{
glyphname = yhookabove;
layers = (
{
components = (
{
name = y;
},
{
name = hookabovecomb;
transform = "{1, 0, 0, 1, 510, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
note = uni1EF7;
unicode = 1EF7;
},
{
glyphname = ytilde;
layers = (
{
components = (
{
name = y;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 516, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
note = uni1EF9;
unicode = 1EF9;
},
{
glyphname = z;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"22 0 LINE",
"368 0 LINE",
"379 64 LINE",
"118 64 LINE",
"425 433 LINE SMOOTH",
"435 445 OFFCURVE",
"446 465 OFFCURVE",
"448 478 QCURVE SMOOTH",
"454 515 LINE",
"119 515 LINE",
"107 451 LINE",
"356 451 LINE",
"50 81 LINE",
"39 69 OFFCURVE",
"29 48 OFFCURVE",
"26 32 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 12 106 6 5 106 6 6 114 15 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 434;
}
);
leftKerningGroup = z;
note = uni007A;
rightKerningGroup = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
name = z;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 565, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 434;
}
);
leftKerningGroup = z;
note = uni017A;
rightKerningGroup = z;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
name = z;
},
{
name = caron;
transform = "{1, 0, 0, 1, 65, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 434;
}
);
leftKerningGroup = z;
note = uni017E;
rightKerningGroup = z;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
name = z;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 172, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 434;
}
);
leftKerningGroup = z;
note = uni017C;
rightKerningGroup = z;
unicode = 017C;
},
{
glyphname = i.locl;
layers = (
{
components = (
{
name = idotless;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 66, 30}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
note = glyph00307;
},
{
glyphname = fi;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"146 457 LINE",
"67 -79 LINE SMOOTH",
"59 -123 OFFCURVE",
"29 -166 OFFCURVE",
"0 -166 QCURVE SMOOTH",
"-16 -166 OFFCURVE",
"-49 -153 OFFCURVE",
"-62 -144 QCURVE",
"-86 -195 LINE",
"-67 -207 OFFCURVE",
"-19 -224 OFFCURVE",
"5 -224 QCURVE SMOOTH",
"45 -224 OFFCURVE",
"100 -192 OFFCURVE",
"135 -120 OFFCURVE",
"144 -58 QCURVE SMOOTH",
"221 457 LINE",
"354 457 LINE",
"364 515 LINE",
"229 515 LINE",
"239 582 LINE SMOOTH",
"244 615 OFFCURVE",
"262 657 OFFCURVE",
"300 680 OFFCURVE",
"332 680 QCURVE SMOOTH",
"360 680 OFFCURVE",
"409 667 QCURVE",
"424 723 LINE",
"404 729 OFFCURVE",
"357 737 OFFCURVE",
"336 737 QCURVE SMOOTH",
"260 737 OFFCURVE",
"177 662 OFFCURVE",
"164 577 QCURVE SMOOTH",
"154 515 LINE",
"79 515 LINE",
"69 457 LINE"
);
},
{
closed = 1;
nodes = (
"471 638 LINE",
"573 638 LINE",
"589 727 LINE",
"487 727 LINE"
);
},
{
closed = 1;
nodes = (
"463 515 LINE",
"382 57 LINE",
"381 53 OFFCURVE",
"376 26 OFFCURVE",
"376 18 QCURVE SMOOTH",
"376 9 OFFCURVE",
"386 0 OFFCURVE",
"400 0 QCURVE SMOOTH",
"446 0 LINE",
"527 458 LINE",
"528 462 OFFCURVE",
"533 489 OFFCURVE",
"533 497 QCURVE SMOOTH",
"533 506 OFFCURVE",
"523 515 OFFCURVE",
"509 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
49 10 114 37 40 106 37 0 114 25 32 106 25 15 114 0 17 20 106 1 17 6 114 6 12 106 6 1 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 545;
}
);
note = uniFB01;
unicode = FB01;
},
{
glyphname = fl;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"146 457 LINE",
"67 -79 LINE SMOOTH",
"59 -123 OFFCURVE",
"29 -166 OFFCURVE",
"0 -166 QCURVE SMOOTH",
"-16 -166 OFFCURVE",
"-49 -153 OFFCURVE",
"-62 -144 QCURVE",
"-86 -195 LINE",
"-67 -207 OFFCURVE",
"-19 -224 OFFCURVE",
"5 -224 QCURVE SMOOTH",
"45 -224 OFFCURVE",
"100 -192 OFFCURVE",
"135 -120 OFFCURVE",
"144 -58 QCURVE SMOOTH",
"221 457 LINE",
"354 457 LINE",
"364 515 LINE",
"229 515 LINE",
"239 582 LINE SMOOTH",
"244 615 OFFCURVE",
"262 657 OFFCURVE",
"300 680 OFFCURVE",
"332 680 QCURVE SMOOTH",
"360 680 OFFCURVE",
"409 667 QCURVE",
"424 723 LINE",
"404 729 OFFCURVE",
"357 737 OFFCURVE",
"336 737 QCURVE SMOOTH",
"260 737 OFFCURVE",
"177 662 OFFCURVE",
"164 577 QCURVE SMOOTH",
"154 515 LINE",
"79 515 LINE",
"69 457 LINE"
);
},
{
closed = 1;
nodes = (
"488 727 LINE",
"390 148 LINE SMOOTH",
"383 107 OFFCURVE",
"383 78 QCURVE SMOOTH",
"383 35 OFFCURVE",
"431 -7 OFFCURVE",
"476 -7 QCURVE SMOOTH",
"500 -7 OFFCURVE",
"543 3 OFFCURVE",
"558 10 QCURVE",
"548 60 LINE",
"522 51 OFFCURVE",
"504 51 QCURVE SMOOTH",
"480 51 OFFCURVE",
"457 73 OFFCURVE",
"457 97 QCURVE SMOOTH",
"457 111 OFFCURVE",
"466 163 QCURVE SMOOTH",
"499 360 LINE SMOOTH",
"535 575 OFFCURVE",
"552 670 QCURVE",
"553 674 OFFCURVE",
"558 701 OFFCURVE",
"558 709 QCURVE SMOOTH",
"558 718 OFFCURVE",
"548 727 OFFCURVE",
"534 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
62 0 114 56 50 106 56 11 114 25 32 106 25 15 114 0 17 20 106 1 17 6 114 6 12 106 6 1 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 583;
}
);
note = uniFB02;
unicode = FB02;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"288 419 LINE SMOOTH",
"288 412 OFFCURVE",
"293 405 OFFCURVE",
"300 405 QCURVE SMOOTH",
"338 405 LINE",
"338 428 LINE SMOOTH",
"338 457 OFFCURVE",
"344 496 QCURVE SMOOTH",
"374 672 LINE",
"376 687 LINE",
"376 693 OFFCURVE",
"371 700 OFFCURVE",
"364 703 QCURVE",
"343 713 OFFCURVE",
"285 727 OFFCURVE",
"255 727 QCURVE SMOOTH",
"198 727 OFFCURVE",
"120 665 OFFCURVE",
"81 565 OFFCURVE",
"81 510 QCURVE SMOOTH",
"81 458 OFFCURVE",
"137 398 OFFCURVE",
"185 398 QCURVE SMOOTH",
"210 398 OFFCURVE",
"249 416 OFFCURVE",
"259 424 QCURVE SMOOTH",
"263 427 OFFCURVE",
"271 434 QCURVE",
"279 440 OFFCURVE",
"282 440 QCURVE SMOOTH",
"285 440 OFFCURVE",
"288 436 OFFCURVE",
"288 431 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"311 631 LINE",
"289 505 LINE",
"288 501 OFFCURVE",
"285 492 OFFCURVE",
"282 488 QCURVE SMOOTH",
"273 476 OFFCURVE",
"230 446 OFFCURVE",
"208 446 QCURVE SMOOTH",
"179 446 OFFCURVE",
"143 489 OFFCURVE",
"143 529 QCURVE SMOOTH",
"143 563 OFFCURVE",
"168 632 OFFCURVE",
"218 678 OFFCURVE",
"254 678 QCURVE SMOOTH",
"274 678 OFFCURVE",
"302 665 OFFCURVE",
"309 657 QCURVE",
"313 652 OFFCURVE",
"313 647 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
9 45 106 28 9 9 53 16 38 106 16 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 367;
}
);
note = uni00AA;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"258 398 OFFCURVE",
"342 459 OFFCURVE",
"385 555 OFFCURVE",
"385 608 QCURVE SMOOTH",
"385 666 OFFCURVE",
"323 727 OFFCURVE",
"265 727 QCURVE SMOOTH",
"209 727 OFFCURVE",
"125 666 OFFCURVE",
"81 570 OFFCURVE",
"81 518 QCURVE SMOOTH",
"81 460 OFFCURVE",
"143 398 OFFCURVE",
"201 398 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"178 447 OFFCURVE",
"143 484 OFFCURVE",
"143 521 QCURVE SMOOTH",
"143 560 OFFCURVE",
"167 632 OFFCURVE",
"217 678 OFFCURVE",
"254 678 QCURVE SMOOTH",
"323 678 OFFCURVE",
"323 604 QCURVE SMOOTH",
"323 565 OFFCURVE",
"300 493 OFFCURVE",
"250 447 OFFCURVE",
"213 447 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 26 106 13 13 27 6 19 106 6 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 368;
}
);
note = uni00BA;
unicode = 00BA;
},
{
glyphname = "A-cy";
layers = (
{
components = (
{
name = A;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 655;
}
);
leftKerningGroup = "A-cy";
note = uni0410;
rightKerningGroup = "A-cy";
unicode = 0410;
},
{
glyphname = "Be-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"621 727 LINE",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 10 OFFCURVE",
"72 1 OFFCURVE",
"86 0 QCURVE SMOOTH",
"194 -6 OFFCURVE",
"266 -6 QCURVE SMOOTH",
"379 -6 OFFCURVE",
"533 38 OFFCURVE",
"622 154 OFFCURVE",
"622 258 QCURVE SMOOTH",
"622 313 OFFCURVE",
"571 377 OFFCURVE",
"469 405 OFFCURVE",
"388 405 QCURVE SMOOTH",
"206 405 LINE",
"251 658 LINE",
"609 658 LINE"
);
},
{
closed = 1;
nodes = (
"265 58 OFFCURVE",
"179 60 OFFCURVE",
"146 62 QCURVE",
"194 338 LINE",
"387 338 LINE SMOOTH",
"440 338 OFFCURVE",
"504 320 OFFCURVE",
"534 279 OFFCURVE",
"534 244 QCURVE SMOOTH",
"534 168 OFFCURVE",
"479 87 OFFCURVE",
"382 58 OFFCURVE",
"308 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
13 11 34 106 30 2 106 30 30 11 20 1 106 20 2 114 11 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 662;
}
);
note = uni0411;
rightKerningGroup = "Be-cy";
unicode = 0411;
},
{
glyphname = "Ve-cy";
layers = (
{
components = (
{
name = B;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 659;
}
);
note = uni0412;
rightKerningGroup = "Ve-cy";
unicode = 0412;
},
{
glyphname = "Ge-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"67 57 LINE",
"66 53 OFFCURVE",
"61 26 OFFCURVE",
"61 18 QCURVE SMOOTH",
"61 9 OFFCURVE",
"71 0 OFFCURVE",
"85 0 QCURVE SMOOTH",
"134 0 LINE",
"251 658 LINE",
"589 658 LINE",
"601 727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
7 4 11 2 106 11 2 114 4 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 513;
}
);
note = uni0413;
rightKerningGroup = "Ge-cy";
unicode = 0413;
},
{
glyphname = "Gje-cy";
layers = (
{
components = (
{
name = "Ge-cy";
},
{
name = acute;
transform = "{1, 0, 0, 1, 263, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 513;
}
);
note = uni0403;
rightKerningGroup = "Ge-cy";
unicode = 0403;
},
{
glyphname = "Gheupturn-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"589 658 LINE",
"612 788 LINE",
"613 792 OFFCURVE",
"618 819 OFFCURVE",
"618 827 QCURVE SMOOTH",
"618 836 OFFCURVE",
"608 845 OFFCURVE",
"594 845 QCURVE SMOOTH",
"552 845 LINE",
"531 727 LINE",
"186 727 LINE",
"67 57 LINE",
"66 53 OFFCURVE",
"61 26 OFFCURVE",
"61 18 QCURVE SMOOTH",
"61 9 OFFCURVE",
"71 0 OFFCURVE",
"85 0 QCURVE SMOOTH",
"134 0 LINE",
"251 658 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
15 11 9 9 0 106 9 2 114 5 2 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01110]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 525;
}
);
note = uni0490;
rightKerningGroup = "Ge-cy";
unicode = 0490;
},
{
glyphname = "De-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"588 72 LINE",
"694 670 LINE",
"695 674 OFFCURVE",
"700 701 OFFCURVE",
"700 709 QCURVE SMOOTH",
"700 718 OFFCURVE",
"690 727 OFFCURVE",
"676 727 QCURVE SMOOTH",
"384 727 LINE",
"355 599 OFFCURVE",
"253 354 OFFCURVE",
"135 150 OFFCURVE",
"76 72 QCURVE",
"3 72 LINE",
"-19 -58 LINE",
"-20 -62 OFFCURVE",
"-25 -89 OFFCURVE",
"-25 -97 QCURVE SMOOTH",
"-25 -106 OFFCURVE",
"-15 -115 OFFCURVE",
"-1 -115 QCURVE SMOOTH",
"40 -115 LINE",
"61 0 LINE",
"600 0 LINE",
"589 -58 LINE",
"588 -62 OFFCURVE",
"583 -89 OFFCURVE",
"583 -97 QCURVE SMOOTH",
"583 -106 OFFCURVE",
"593 -115 OFFCURVE",
"607 -115 QCURVE SMOOTH",
"648 -115 LINE",
"671 15 LINE",
"672 19 OFFCURVE",
"677 46 OFFCURVE",
"677 54 QCURVE SMOOTH",
"677 63 OFFCURVE",
"667 72 OFFCURVE",
"653 72 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"615 658 LINE",
"511 72 LINE",
"165 72 LINE",
"250 192 OFFCURVE",
"405 503 OFFCURVE",
"444 658 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
18 11 21 7 34 30 38 42 16 25 106 16 16 7 30 39 106 30 2 114 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 712;
}
);
leftKerningGroup = "De-cy";
note = uni0414;
rightKerningGroup = "De-cy";
unicode = 0414;
},
{
glyphname = "Ie-cy";
lastChange = "2019-06-03 11:07:49 +0000";
layers = (
{
components = (
{
name = E;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni0415;
rightKerningGroup = "Ie-cy";
unicode = 0415;
changeCount = 1;
},
{
glyphname = "Io-cy";
layers = (
{
components = (
{
name = E;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 218, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 595;
}
);
note = uni0401;
unicode = 0401;
},
{
glyphname = "Zhe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"530 413 LINE",
"574 670 LINE",
"575 674 OFFCURVE",
"580 701 OFFCURVE",
"580 709 QCURVE SMOOTH",
"580 718 OFFCURVE",
"570 727 OFFCURVE",
"556 727 QCURVE SMOOTH",
"507 727 LINE",
"453 413 LINE",
"368 413 LINE",
"226 705 LINE SMOOTH",
"220 718 OFFCURVE",
"206 727 OFFCURVE",
"195 727 QCURVE SMOOTH",
"124 727 LINE",
"296 381 LINE",
"-27 0 LINE",
"45 0 LINE SMOOTH",
"56 0 OFFCURVE",
"73 9 OFFCURVE",
"83 20 QCURVE",
"351 343 LINE",
"441 343 LINE",
"393 57 LINE",
"392 53 OFFCURVE",
"387 26 OFFCURVE",
"387 18 QCURVE SMOOTH",
"387 9 OFFCURVE",
"397 0 OFFCURVE",
"411 0 QCURVE SMOOTH",
"459 0 LINE",
"518 343 LINE",
"608 343 LINE",
"762 20 LINE SMOOTH",
"768 8 OFFCURVE",
"781 0 OFFCURVE",
"792 0 QCURVE SMOOTH",
"865 0 LINE",
"677 381 LINE",
"971 727 LINE",
"900 727 LINE SMOOTH",
"888 727 OFFCURVE",
"872 719 OFFCURVE",
"862 707 QCURVE SMOOTH",
"615 413 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
6 29 35 13 45 106 23 13 13 28 41 38 5 1 30 2 114 24 18 15 11 8 28 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 903;
}
);
leftKerningGroup = "Zhe-cy";
note = uni0416;
rightKerningGroup = "Zhe-cy";
unicode = 0416;
},
{
glyphname = "Ze-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"20 38 LINE",
"52 17 OFFCURVE",
"155 -12 OFFCURVE",
"217 -12 QCURVE SMOOTH",
"311 -12 OFFCURVE",
"450 47 OFFCURVE",
"526 163 OFFCURVE",
"526 246 QCURVE SMOOTH",
"526 290 OFFCURVE",
"499 336 OFFCURVE",
"479 351 QCURVE SMOOTH",
"471 357 OFFCURVE",
"455 365 QCURVE",
"444 371 OFFCURVE",
"433 379 OFFCURVE",
"433 386 QCURVE SMOOTH",
"433 392 OFFCURVE",
"446 402 OFFCURVE",
"459 408 QCURVE SMOOTH",
"463 410 OFFCURVE",
"482 420 OFFCURVE",
"489 425 QCURVE SMOOTH",
"529 454 OFFCURVE",
"569 540 OFFCURVE",
"569 589 QCURVE SMOOTH",
"569 662 OFFCURVE",
"462 733 OFFCURVE",
"365 733 QCURVE SMOOTH",
"307 733 OFFCURVE",
"198 707 OFFCURVE",
"158 689 QCURVE",
"166 623 LINE",
"205 642 OFFCURVE",
"305 668 OFFCURVE",
"354 668 QCURVE SMOOTH",
"420 668 OFFCURVE",
"488 619 OFFCURVE",
"488 575 QCURVE SMOOTH",
"488 490 OFFCURVE",
"375 410 OFFCURVE",
"281 410 QCURVE SMOOTH",
"166 410 LINE",
"154 341 LINE",
"282 341 LINE SMOOTH",
"345 341 OFFCURVE",
"416 315 OFFCURVE",
"444 266 OFFCURVE",
"444 229 QCURVE SMOOTH",
"444 169 OFFCURVE",
"388 91 OFFCURVE",
"291 54 OFFCURVE",
"230 54 QCURVE SMOOTH",
"174 54 OFFCURVE",
"80 80 OFFCURVE",
"50 99 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
37 11 12 106 11 11 26 50 2 106 50 9 114 26 19 106 26 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 579;
}
);
note = uni0417;
rightKerningGroup = "Ve-cy";
unicode = 0417;
},
{
glyphname = "Ii-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"657 727 LINE",
"152 92 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"155 0 LINE",
"667 641 LINE",
"564 57 LINE",
"563 53 OFFCURVE",
"558 26 OFFCURVE",
"558 18 QCURVE SMOOTH",
"558 9 OFFCURVE",
"568 0 OFFCURVE",
"582 0 QCURVE SMOOTH",
"629 0 LINE",
"748 670 LINE",
"749 674 OFFCURVE",
"754 701 OFFCURVE",
"754 709 QCURVE SMOOTH",
"754 718 OFFCURVE",
"744 727 OFFCURVE",
"730 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
33 27 14 23 2 114 31 7 16 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 752;
}
);
note = uni0418;
unicode = 0418;
},
{
glyphname = "Iishort-cy";
layers = (
{
components = (
{
name = "Ii-cy";
},
{
name = breve;
transform = "{1, 0, 0, 1, 272, 206}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 752;
}
);
note = uni0419;
unicode = 0419;
},
{
glyphname = "Ka-cy";
layers = (
{
components = (
{
name = K;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 646;
}
);
note = uni041A;
rightKerningGroup = "Zhe-cy";
unicode = 041A;
},
{
glyphname = "Kje-cy";
layers = (
{
components = (
{
name = K;
},
{
name = acute;
transform = "{1, 0, 0, 1, 292, 196}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 646;
}
);
note = uni040C;
rightKerningGroup = "Zhe-cy";
unicode = 040C;
},
{
glyphname = "El-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"571 0 LINE",
"689 670 LINE",
"690 674 OFFCURVE",
"695 701 OFFCURVE",
"695 709 QCURVE SMOOTH",
"695 718 OFFCURVE",
"685 727 OFFCURVE",
"671 727 QCURVE SMOOTH",
"273 727 LINE",
"235 538 OFFCURVE",
"159 207 OFFCURVE",
"133 134 QCURVE SMOOTH",
"122 105 OFFCURVE",
"104 74 OFFCURVE",
"76 59 OFFCURVE",
"51 59 QCURVE SMOOTH",
"23 59 OFFCURVE",
"-7 70 QCURVE",
"-29 2 LINE",
"-9 -4 OFFCURVE",
"33 -12 OFFCURVE",
"50 -12 QCURVE SMOOTH",
"94 -12 OFFCURVE",
"153 19 OFFCURVE",
"190 75 OFFCURVE",
"205 119 QCURVE SMOOTH",
"223 172 OFFCURVE",
"294 476 OFFCURVE",
"333 658 QCURVE",
"610 658 LINE",
"504 57 LINE",
"503 53 OFFCURVE",
"498 26 OFFCURVE",
"498 18 QCURVE SMOOTH",
"498 9 OFFCURVE",
"508 0 OFFCURVE",
"522 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
28 8 106 28 2 114 15 21 106 15 9 114 0 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 693;
}
);
leftKerningGroup = "El-cy";
note = uni041B;
unicode = 041B;
},
{
glyphname = "Em-cy";
layers = (
{
components = (
{
name = M;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 926;
}
);
note = uni041C;
unicode = 041C;
},
{
glyphname = "En-cy";
layers = (
{
components = (
{
name = H;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 733;
}
);
note = uni041D;
unicode = 041D;
},
{
glyphname = "O-cy";
layers = (
{
components = (
{
name = O;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = "O-cy";
note = uni041E;
rightKerningGroup = "O-cy";
unicode = 041E;
},
{
glyphname = "Pe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"599 0 LINE",
"718 670 LINE",
"719 674 OFFCURVE",
"724 701 OFFCURVE",
"724 709 QCURVE SMOOTH",
"724 718 OFFCURVE",
"714 727 OFFCURVE",
"700 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"134 0 LINE",
"250 656 LINE",
"638 656 LINE",
"533 57 LINE",
"532 53 OFFCURVE",
"527 26 OFFCURVE",
"527 18 QCURVE SMOOTH",
"527 9 OFFCURVE",
"537 0 OFFCURVE",
"551 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
25 2 12 9 20 16 7 106 16 2 114 9 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 722;
}
);
note = uni041F;
unicode = 041F;
},
{
glyphname = "Er-cy";
layers = (
{
components = (
{
name = P;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 621;
}
);
note = uni0420;
rightKerningGroup = "Er-cy";
unicode = 0420;
},
{
glyphname = "Es-cy";
layers = (
{
components = (
{
name = C;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 600;
}
);
leftKerningGroup = "O-cy";
note = uni0421;
rightKerningGroup = "Es-cy";
unicode = 0421;
},
{
glyphname = "Te-cy";
layers = (
{
components = (
{
name = T;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 586;
}
);
leftKerningGroup = "Te-cy";
note = uni0422;
rightKerningGroup = "Te-cy";
unicode = 0422;
},
{
glyphname = "U-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"672 727 LINE",
"601 727 LINE SMOOTH",
"590 727 OFFCURVE",
"580 719 OFFCURVE",
"573 706 QCURVE",
"316 284 LINE",
"194 706 LINE SMOOTH",
"190 719 OFFCURVE",
"183 727 OFFCURVE",
"172 727 QCURVE SMOOTH",
"103 727 LINE",
"258 200 LINE",
"222 140 OFFCURVE",
"175 81 OFFCURVE",
"131 56 OFFCURVE",
"102 56 QCURVE SMOOTH",
"79 56 OFFCURVE",
"31 66 OFFCURVE",
"12 74 QCURVE",
"-10 7 LINE",
"12 -1 OFFCURVE",
"63 -12 OFFCURVE",
"85 -12 QCURVE SMOOTH",
"132 -12 OFFCURVE",
"198 12 OFFCURVE",
"265 79 OFFCURVE",
"307 146 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
20 3 25 15 2 114 3 10 106 6 3 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 567;
}
);
leftKerningGroup = "Zhe-cy";
note = uni0423;
rightKerningGroup = "U-cy";
unicode = 0423;
},
{
glyphname = "Ushort-cy";
layers = (
{
components = (
{
name = "U-cy";
},
{
name = breve;
transform = "{1, 0, 0, 1, 182, 188}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 567;
}
);
leftKerningGroup = "Zhe-cy";
note = uni040E;
rightKerningGroup = "U-cy";
unicode = 040E;
},
{
glyphname = "Ef-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"325 111 LINE",
"314 47 LINE",
"313 43 OFFCURVE",
"308 16 OFFCURVE",
"308 8 QCURVE SMOOTH",
"308 -1 OFFCURVE",
"318 -10 OFFCURVE",
"332 -10 QCURVE SMOOTH",
"382 -10 LINE",
"403 111 LINE",
"440 111 LINE SMOOTH",
"541 111 OFFCURVE",
"681 203 OFFCURVE",
"750 357 OFFCURVE",
"750 451 QCURVE SMOOTH",
"750 542 OFFCURVE",
"642 633 OFFCURVE",
"532 633 QCURVE SMOOTH",
"495 633 LINE",
"503 680 LINE",
"504 684 OFFCURVE",
"509 711 OFFCURVE",
"509 719 QCURVE SMOOTH",
"509 728 OFFCURVE",
"499 737 OFFCURVE",
"485 737 QCURVE SMOOTH",
"435 737 LINE",
"417 633 LINE",
"380 633 LINE SMOOTH",
"279 633 OFFCURVE",
"139 541 OFFCURVE",
"70 387 OFFCURVE",
"70 293 QCURVE SMOOTH",
"70 202 OFFCURVE",
"178 111 OFFCURVE",
"288 111 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"414 174 LINE",
"484 571 LINE",
"526 571 LINE SMOOTH",
"668 571 OFFCURVE",
"668 434 QCURVE SMOOTH",
"668 364 OFFCURVE",
"621 245 OFFCURVE",
"525 174 OFFCURVE",
"456 174 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"406 570 LINE",
"336 173 LINE",
"294 173 LINE SMOOTH",
"152 173 OFFCURVE",
"152 310 QCURVE SMOOTH",
"152 380 OFFCURVE",
"199 499 OFFCURVE",
"295 570 OFFCURVE",
"364 570 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
43 0 50 106 26 0 53 7 42 106 17 7 0 7 0 7 9 28 9 114 9 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 754;
}
);
leftKerningGroup = "Ef-cy";
note = uni0424;
rightKerningGroup = "Ef-cy";
unicode = 0424;
},
{
glyphname = "Ha-cy";
layers = (
{
components = (
{
name = X;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 604;
}
);
leftKerningGroup = "Zhe-cy";
note = uni0425;
rightKerningGroup = "Zhe-cy";
unicode = 0425;
},
{
glyphname = "Che-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"494 198 LINE",
"469 57 LINE",
"468 53 OFFCURVE",
"463 26 OFFCURVE",
"463 18 QCURVE SMOOTH",
"463 9 OFFCURVE",
"473 0 OFFCURVE",
"487 0 QCURVE SMOOTH",
"536 0 LINE",
"654 670 LINE",
"655 674 OFFCURVE",
"660 701 OFFCURVE",
"660 709 QCURVE SMOOTH",
"660 718 OFFCURVE",
"650 727 OFFCURVE",
"636 727 QCURVE SMOOTH",
"587 727 LINE",
"528 389 LINE",
"527 381 OFFCURVE",
"521 374 OFFCURVE",
"513 368 QCURVE SMOOTH",
"430 310 OFFCURVE",
"324 310 QCURVE SMOOTH",
"254 310 OFFCURVE",
"185 365 OFFCURVE",
"185 423 QCURVE SMOOTH",
"185 456 OFFCURVE",
"197 531 OFFCURVE",
"210 592 QCURVE SMOOTH",
"223 649 OFFCURVE",
"226 670 QCURVE",
"227 674 OFFCURVE",
"232 701 OFFCURVE",
"232 709 QCURVE SMOOTH",
"232 718 OFFCURVE",
"222 727 OFFCURVE",
"208 727 QCURVE SMOOTH",
"160 727 LINE",
"113 482 LINE SMOOTH",
"110 464 OFFCURVE",
"105 420 OFFCURVE",
"105 403 QCURVE SMOOTH",
"105 382 OFFCURVE",
"110 360 QCURVE SMOOTH",
"124 303 OFFCURVE",
"221 242 OFFCURVE",
"290 242 QCURVE SMOOTH",
"336 242 OFFCURVE",
"409 257 OFFCURVE",
"454 276 OFFCURVE",
"479 289 QCURVE SMOOTH",
"497 299 OFFCURVE",
"502 299 QCURVE SMOOTH",
"509 299 OFFCURVE",
"509 291 QCURVE SMOOTH",
"509 276 OFFCURVE",
"505 255 QCURVE SMOOTH",
"501 234 OFFCURVE",
"500 228 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
54 51 25 46 43 21 12 36 106 12 12 51 21 2 114 51 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 659;
}
);
leftKerningGroup = "Che-cy";
note = uni0427;
unicode = 0427;
},
{
glyphname = "Tse-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"624 0 LINE",
"613 -58 LINE",
"612 -62 OFFCURVE",
"607 -89 OFFCURVE",
"607 -97 QCURVE SMOOTH",
"607 -106 OFFCURVE",
"617 -115 OFFCURVE",
"631 -115 QCURVE SMOOTH",
"672 -115 LINE",
"695 15 LINE",
"696 19 OFFCURVE",
"701 46 OFFCURVE",
"701 54 QCURVE SMOOTH",
"701 63 OFFCURVE",
"691 72 OFFCURVE",
"677 72 QCURVE SMOOTH",
"613 72 LINE",
"719 670 LINE",
"720 674 OFFCURVE",
"725 701 OFFCURVE",
"725 709 QCURVE SMOOTH",
"725 718 OFFCURVE",
"715 727 OFFCURVE",
"701 727 QCURVE SMOOTH",
"651 727 LINE",
"535 71 LINE",
"147 71 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
36 32 10 20 17 6 24 41 14 106 41 8 114 6 2 114 32 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 737;
}
);
note = uni0426;
rightKerningGroup = "De-cy";
unicode = 0426;
},
{
glyphname = "Sha-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"838 0 LINE",
"957 670 LINE",
"958 674 OFFCURVE",
"963 701 OFFCURVE",
"963 709 QCURVE SMOOTH",
"963 718 OFFCURVE",
"953 727 OFFCURVE",
"939 727 QCURVE SMOOTH",
"890 727 LINE",
"774 72 LINE",
"499 72 LINE",
"605 670 LINE",
"606 674 OFFCURVE",
"611 701 OFFCURVE",
"611 709 QCURVE SMOOTH",
"611 718 OFFCURVE",
"601 727 OFFCURVE",
"587 727 QCURVE SMOOTH",
"538 727 LINE",
"422 72 LINE",
"147 72 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
3 0 11 21 31 18 28 7 25 0 15 106 7 2 114 0 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 961;
}
);
note = uni0428;
unicode = 0428;
},
{
glyphname = "Shcha-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"911 -115 LINE",
"934 15 LINE",
"935 19 OFFCURVE",
"940 46 OFFCURVE",
"940 54 QCURVE SMOOTH",
"940 63 OFFCURVE",
"930 72 OFFCURVE",
"916 72 QCURVE SMOOTH",
"851 72 LINE",
"957 670 LINE",
"958 674 OFFCURVE",
"963 701 OFFCURVE",
"963 709 QCURVE SMOOTH",
"963 718 OFFCURVE",
"953 727 OFFCURVE",
"939 727 QCURVE SMOOTH",
"890 727 LINE",
"774 72 LINE",
"499 72 LINE",
"605 670 LINE",
"606 674 OFFCURVE",
"611 701 OFFCURVE",
"611 709 QCURVE SMOOTH",
"611 718 OFFCURVE",
"601 727 OFFCURVE",
"587 727 QCURVE SMOOTH",
"538 727 LINE",
"422 72 LINE",
"147 72 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"863 0 LINE",
"852 -58 LINE",
"851 -62 OFFCURVE",
"846 -89 OFFCURVE",
"846 -97 QCURVE SMOOTH",
"846 -106 OFFCURVE",
"856 -115 OFFCURVE",
"870 -115 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
3 0 19 29 39 26 36 15 43 33 8 23 106 8 8 114 15 2 114 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 975;
}
);
note = uni0429;
rightKerningGroup = "De-cy";
unicode = 0429;
},
{
glyphname = "Dzhe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"289 0 LINE",
"278 -58 LINE",
"277 -62 OFFCURVE",
"272 -89 OFFCURVE",
"272 -97 QCURVE SMOOTH",
"272 -106 OFFCURVE",
"282 -115 OFFCURVE",
"296 -115 QCURVE SMOOTH",
"337 -115 LINE",
"358 0 LINE",
"600 0 LINE",
"719 670 LINE",
"720 674 OFFCURVE",
"725 701 OFFCURVE",
"725 709 QCURVE SMOOTH",
"725 718 OFFCURVE",
"715 727 OFFCURVE",
"701 727 QCURVE SMOOTH",
"651 727 LINE",
"535 71 LINE",
"147 71 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
23 19 3 13 10 35 18 28 7 106 28 8 114 35 2 114 19 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 723;
}
);
note = uni040F;
unicode = 040F;
},
{
glyphname = "Softsign-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 10 OFFCURVE",
"72 1 OFFCURVE",
"86 0 QCURVE SMOOTH",
"194 -6 OFFCURVE",
"266 -6 QCURVE SMOOTH",
"379 -6 OFFCURVE",
"533 38 OFFCURVE",
"622 154 OFFCURVE",
"622 258 QCURVE SMOOTH",
"622 313 OFFCURVE",
"571 377 OFFCURVE",
"469 405 OFFCURVE",
"388 405 QCURVE SMOOTH",
"206 405 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"265 58 OFFCURVE",
"179 60 OFFCURVE",
"146 62 QCURVE",
"194 338 LINE",
"387 338 LINE SMOOTH",
"440 338 OFFCURVE",
"504 320 OFFCURVE",
"534 279 OFFCURVE",
"534 244 QCURVE SMOOTH",
"534 168 OFFCURVE",
"479 87 OFFCURVE",
"383 58 OFFCURVE",
"308 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
18 16 3 25 16 38 106 34 7 106 34 34 16 25 2 114 16 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 657;
}
);
note = uni042C;
rightKerningGroup = "Softsign-cy";
unicode = 042C;
},
{
glyphname = "Hardsign-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"104 727 LINE",
"92 658 LINE",
"297 658 LINE",
"192 57 LINE",
"191 53 OFFCURVE",
"186 26 OFFCURVE",
"186 18 QCURVE SMOOTH",
"186 10 OFFCURVE",
"196 1 OFFCURVE",
"210 0 QCURVE SMOOTH",
"318 -6 OFFCURVE",
"390 -6 QCURVE SMOOTH",
"503 -6 OFFCURVE",
"657 38 OFFCURVE",
"746 154 OFFCURVE",
"746 258 QCURVE SMOOTH",
"746 313 OFFCURVE",
"695 377 OFFCURVE",
"593 405 OFFCURVE",
"512 405 QCURVE SMOOTH",
"330 405 LINE",
"377 670 LINE",
"378 674 OFFCURVE",
"383 701 OFFCURVE",
"383 709 QCURVE SMOOTH",
"383 718 OFFCURVE",
"373 727 OFFCURVE",
"359 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"389 58 OFFCURVE",
"303 60 OFFCURVE",
"270 62 QCURVE",
"318 338 LINE",
"511 338 LINE SMOOTH",
"564 338 OFFCURVE",
"628 320 OFFCURVE",
"658 279 OFFCURVE",
"658 244 QCURVE SMOOTH",
"658 168 OFFCURVE",
"603 87 OFFCURVE",
"506 58 OFFCURVE",
"432 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
17 15 2 26 15 40 106 36 6 106 36 36 15 26 25 106 26 2 114 15 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 781;
}
);
leftKerningGroup = "Te-cy";
note = uni042A;
rightKerningGroup = "Softsign-cy";
unicode = 042A;
},
{
glyphname = "Yeru-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 2 OFFCURVE",
"135 -6 OFFCURVE",
"211 -6 QCURVE SMOOTH",
"243 -6 OFFCURVE",
"297 -4 QCURVE SMOOTH",
"389 2 OFFCURVE",
"516 53 OFFCURVE",
"587 165 OFFCURVE",
"587 258 QCURVE SMOOTH",
"587 285 OFFCURVE",
"581 307 QCURVE SMOOTH",
"565 360 OFFCURVE",
"454 405 OFFCURVE",
"353 405 QCURVE SMOOTH",
"206 405 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"708 0 LINE",
"826 670 LINE",
"827 674 OFFCURVE",
"832 701 OFFCURVE",
"832 709 QCURVE SMOOTH",
"832 718 OFFCURVE",
"822 727 OFFCURVE",
"808 727 QCURVE SMOOTH",
"758 727 LINE",
"640 57 LINE",
"639 53 OFFCURVE",
"634 26 OFFCURVE",
"634 18 QCURVE SMOOTH",
"634 9 OFFCURVE",
"644 0 OFFCURVE",
"658 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"218 58 OFFCURVE",
"146 62 QCURVE",
"194 338 LINE",
"352 338 LINE SMOOTH",
"405 338 OFFCURVE",
"469 320 OFFCURVE",
"499 279 OFFCURVE",
"499 244 QCURVE SMOOTH",
"499 168 OFFCURVE",
"444 87 OFFCURVE",
"348 59 OFFCURVE",
"273 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
51 7 106 51 51 26 29 42 8 114 37 34 3 26 2 114 19 54 106 19 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 830;
}
);
note = uni042B;
unicode = 042B;
},
{
glyphname = "Lje-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"611 658 LINE",
"506 57 LINE",
"505 53 OFFCURVE",
"500 26 OFFCURVE",
"500 18 QCURVE SMOOTH",
"500 10 OFFCURVE",
"510 1 OFFCURVE",
"524 0 QCURVE SMOOTH",
"632 -6 OFFCURVE",
"703 -6 QCURVE SMOOTH",
"816 -6 OFFCURVE",
"970 38 OFFCURVE",
"1059 154 OFFCURVE",
"1059 258 QCURVE SMOOTH",
"1059 313 OFFCURVE",
"1008 377 OFFCURVE",
"906 405 OFFCURVE",
"825 405 QCURVE SMOOTH",
"643 405 LINE",
"690 670 LINE",
"691 674 OFFCURVE",
"696 701 OFFCURVE",
"696 709 QCURVE SMOOTH",
"696 718 OFFCURVE",
"686 727 OFFCURVE",
"672 727 QCURVE SMOOTH",
"273 727 LINE",
"235 538 OFFCURVE",
"159 207 OFFCURVE",
"133 134 QCURVE SMOOTH",
"122 105 OFFCURVE",
"104 74 OFFCURVE",
"76 59 OFFCURVE",
"51 59 QCURVE SMOOTH",
"23 59 OFFCURVE",
"-7 70 QCURVE",
"-29 2 LINE",
"-9 -4 OFFCURVE",
"33 -12 OFFCURVE",
"50 -12 QCURVE SMOOTH",
"103 -12 OFFCURVE",
"167 31 OFFCURVE",
"203 108 OFFCURVE",
"221 173 QCURVE SMOOTH",
"242 249 OFFCURVE",
"303 517 OFFCURVE",
"333 658 QCURVE"
);
},
{
closed = 1;
nodes = (
"702 58 OFFCURVE",
"616 60 OFFCURVE",
"583 62 QCURVE",
"631 338 LINE",
"824 338 LINE SMOOTH",
"877 338 OFFCURVE",
"941 320 OFFCURVE",
"971 279 OFFCURVE",
"971 244 QCURVE SMOOTH",
"971 168 OFFCURVE",
"916 87 OFFCURVE",
"820 58 OFFCURVE",
"745 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
37 59 106 39 37 8 114 55 28 106 55 55 7 24 20 0 106 20 2 114 7 13 106 7 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 1094;
}
);
leftKerningGroup = "El-cy";
note = uni0409;
rightKerningGroup = "Softsign-cy";
unicode = 0409;
},
{
glyphname = "Nje-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"670 -6 OFFCURVE",
"741 -6 QCURVE SMOOTH",
"854 -6 OFFCURVE",
"1008 38 OFFCURVE",
"1097 154 OFFCURVE",
"1097 258 QCURVE SMOOTH",
"1097 313 OFFCURVE",
"1046 377 OFFCURVE",
"944 405 OFFCURVE",
"863 405 QCURVE SMOOTH",
"681 405 LINE",
"728 670 LINE",
"729 674 OFFCURVE",
"734 701 OFFCURVE",
"734 709 QCURVE SMOOTH",
"734 718 OFFCURVE",
"724 727 OFFCURVE",
"710 727 QCURVE SMOOTH",
"662 727 LINE",
"605 405 LINE",
"207 405 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"136 0 LINE",
"195 338 LINE",
"593 338 LINE",
"544 57 LINE",
"543 53 OFFCURVE",
"538 26 OFFCURVE",
"538 18 QCURVE SMOOTH",
"538 10 OFFCURVE",
"548 1 OFFCURVE",
"562 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"740 58 OFFCURVE",
"654 60 OFFCURVE",
"621 62 QCURVE",
"669 338 LINE",
"862 338 LINE SMOOTH",
"915 338 OFFCURVE",
"979 320 OFFCURVE",
"1009 279 OFFCURVE",
"1009 244 QCURVE SMOOTH",
"1009 168 OFFCURVE",
"954 87 OFFCURVE",
"857 58 OFFCURVE",
"783 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
43 58 106 43 9 114 34 7 24 106 54 7 7 9 30 27 20 16 2 114 12 9 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 1132;
}
);
note = uni040A;
rightKerningGroup = "Softsign-cy";
unicode = 040A;
},
{
glyphname = "Dze-cy";
layers = (
{
components = (
{
name = S;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
note = uni0405;
rightKerningGroup = "Dze-cy";
unicode = 0405;
},
{
glyphname = "E-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"377 -12 OFFCURVE",
"495 19 OFFCURVE",
"541 42 QCURVE",
"524 95 LINE",
"479 80 OFFCURVE",
"383 58 OFFCURVE",
"348 58 QCURVE SMOOTH",
"279 58 OFFCURVE",
"195 91 OFFCURVE",
"154 167 OFFCURVE",
"154 233 QCURVE SMOOTH",
"154 278 OFFCURVE",
"163 338 QCURVE",
"504 338 LINE",
"516 405 LINE",
"176 405 LINE",
"208 549 OFFCURVE",
"342 673 OFFCURVE",
"437 673 QCURVE SMOOTH",
"521 673 OFFCURVE",
"579 634 QCURVE",
"587 627 OFFCURVE",
"595 627 QCURVE SMOOTH",
"604 627 OFFCURVE",
"610 638 QCURVE SMOOTH",
"645 705 LINE",
"604 720 OFFCURVE",
"499 742 OFFCURVE",
"446 742 QCURVE SMOOTH",
"349 742 OFFCURVE",
"190 642 OFFCURVE",
"86 430 OFFCURVE",
"75 269 QCURVE SMOOTH",
"73 239 OFFCURVE",
"73 226 QCURVE SMOOTH",
"73 141 OFFCURVE",
"127 36 OFFCURVE",
"235 -12 OFFCURVE",
"318 -12 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
38 31 106 25 22 106 25 25 38 9 19 106 9 3 114 38 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 603;
}
);
leftKerningGroup = "O-cy";
note = uni0404;
rightKerningGroup = "E-cy";
unicode = 0404;
},
{
glyphname = "Ereversed-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"600 452 OFFCURVE",
"600 511 QCURVE SMOOTH",
"600 637 OFFCURVE",
"481 742 OFFCURVE",
"368 742 QCURVE SMOOTH",
"313 742 OFFCURVE",
"198 720 OFFCURVE",
"153 704 QCURVE",
"161 644 LINE",
"163 633 OFFCURVE",
"172 633 QCURVE SMOOTH",
"176 633 OFFCURVE",
"191 640 OFFCURVE",
"193 641 QCURVE",
"264 673 OFFCURVE",
"347 673 QCURVE SMOOTH",
"404 673 OFFCURVE",
"478 639 OFFCURVE",
"516 559 OFFCURVE",
"516 491 QCURVE SMOOTH",
"516 453 OFFCURVE",
"510 405 QCURVE",
"170 405 LINE",
"158 338 LINE",
"498 338 LINE",
"477 235 OFFCURVE",
"406 112 OFFCURVE",
"299 58 OFFCURVE",
"222 58 QCURVE SMOOTH",
"178 58 OFFCURVE",
"89 77 OFFCURVE",
"55 91 QCURVE",
"32 26 LINE",
"70 10 OFFCURVE",
"168 -12 OFFCURVE",
"216 -12 QCURVE SMOOTH",
"371 -12 OFFCURVE",
"553 184 OFFCURVE",
"587 380 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
2 9 106 14 15 106 14 14 2 33 22 106 33 3 114 2 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 608;
}
);
note = uni042D;
rightKerningGroup = "Ereversed-cy";
unicode = 042D;
},
{
glyphname = "I-cy";
layers = (
{
components = (
{
name = I;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
note = uni0406;
unicode = 0406;
},
{
glyphname = "Yi-cy";
layers = (
{
components = (
{
name = I;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 41, 212}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 258;
}
);
note = uni0407;
unicode = 0407;
},
{
glyphname = "Je-cy";
layers = (
{
components = (
{
name = J;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 467;
}
);
leftKerningGroup = "Je-cy";
note = uni0408;
unicode = 0408;
},
{
glyphname = "Tshe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"691 0 LINE",
"737 257 LINE SMOOTH",
"740 275 OFFCURVE",
"745 320 OFFCURVE",
"745 336 QCURVE SMOOTH",
"745 409 OFFCURVE",
"653 477 OFFCURVE",
"569 477 QCURVE SMOOTH",
"519 477 OFFCURVE",
"441 450 OFFCURVE",
"407 430 QCURVE SMOOTH",
"389 420 OFFCURVE",
"384 420 QCURVE SMOOTH",
"377 420 OFFCURVE",
"377 428 QCURVE SMOOTH",
"377 433 OFFCURVE",
"379 446 OFFCURVE",
"380 451 QCURVE SMOOTH",
"417 658 LINE",
"662 658 LINE",
"674 727 LINE",
"106 727 LINE",
"94 658 LINE",
"339 658 LINE",
"233 57 LINE",
"232 53 OFFCURVE",
"227 26 OFFCURVE",
"227 18 QCURVE SMOOTH",
"227 9 OFFCURVE",
"237 0 OFFCURVE",
"251 0 QCURVE SMOOTH",
"300 0 LINE",
"358 331 LINE",
"359 339 OFFCURVE",
"365 346 OFFCURVE",
"373 352 QCURVE",
"402 372 OFFCURVE",
"485 409 OFFCURVE",
"535 409 QCURVE SMOOTH",
"607 409 OFFCURVE",
"666 359 OFFCURVE",
"666 308 QCURVE SMOOTH",
"666 296 OFFCURVE",
"661 256 OFFCURVE",
"658 239 QCURVE SMOOTH",
"626 57 LINE",
"625 53 OFFCURVE",
"620 26 OFFCURVE",
"620 18 QCURVE SMOOTH",
"620 9 OFFCURVE",
"630 0 OFFCURVE",
"644 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
51 2 23 20 43 12 106 43 43 20 32 29 28 106 29 2 114 20 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 804;
}
);
leftKerningGroup = "Te-cy";
note = uni040B;
rightKerningGroup = "Tshe-cy";
unicode = 040B;
},
{
glyphname = "Iu-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"136 0 LINE",
"195 335 LINE",
"376 335 LINE",
"367 275 OFFCURVE",
"367 226 QCURVE SMOOTH",
"367 103 OFFCURVE",
"482 -16 OFFCURVE",
"600 -16 QCURVE SMOOTH",
"733 -16 OFFCURVE",
"897 142 OFFCURVE",
"966 377 OFFCURVE",
"966 501 QCURVE SMOOTH",
"966 623 OFFCURVE",
"852 740 OFFCURVE",
"733 740 QCURVE SMOOTH",
"594 740 OFFCURVE",
"427 577 OFFCURVE",
"389 406 QCURVE",
"207 406 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"530 55 OFFCURVE",
"451 139 OFFCURVE",
"451 234 QCURVE SMOOTH",
"451 358 OFFCURVE",
"515 556 OFFCURVE",
"637 671 OFFCURVE",
"720 671 QCURVE SMOOTH",
"777 671 OFFCURVE",
"849 636 OFFCURVE",
"884 560 OFFCURVE",
"884 497 QCURVE SMOOTH",
"884 372 OFFCURVE",
"822 171 OFFCURVE",
"699 55 OFFCURVE",
"611 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
24 7 106 24 24 26 33 2 114 26 8 114 22 9 11 18 48 106 18 9 114 11 41 106 11 3 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 974;
}
);
note = uni042E;
rightKerningGroup = "Iu-cy";
unicode = 042E;
},
{
glyphname = "Ia-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"526 0 LINE",
"645 675 LINE",
"646 679 OFFCURVE",
"651 706 OFFCURVE",
"651 714 QCURVE SMOOTH",
"651 722 OFFCURVE",
"641 731 OFFCURVE",
"627 732 QCURVE",
"559 734 OFFCURVE",
"469 734 QCURVE SMOOTH",
"346 734 OFFCURVE",
"202 684 OFFCURVE",
"135 566 OFFCURVE",
"135 462 QCURVE SMOOTH",
"135 389 OFFCURVE",
"179 359 QCURVE",
"185 356 OFFCURVE",
"192 349 OFFCURVE",
"192 345 QCURVE SMOOTH",
"192 340 OFFCURVE",
"180 329 OFFCURVE",
"172 325 QCURVE SMOOTH",
"164 321 OFFCURVE",
"163 320 QCURVE",
"137 306 OFFCURVE",
"105 259 OFFCURVE",
"89 208 OFFCURVE",
"81 172 QCURVE SMOOTH",
"45 0 LINE",
"101 0 LINE SMOOTH",
"112 0 OFFCURVE",
"123 11 OFFCURVE",
"126 23 QCURVE SMOOTH",
"161 184 LINE SMOOTH",
"171 230 OFFCURVE",
"203 280 OFFCURVE",
"261 302 OFFCURVE",
"310 302 QCURVE SMOOTH",
"502 302 LINE",
"459 57 LINE",
"458 53 OFFCURVE",
"453 26 OFFCURVE",
"453 18 QCURVE SMOOTH",
"453 9 OFFCURVE",
"463 0 OFFCURVE",
"477 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"514 368 LINE",
"293 368 LINE SMOOTH",
"267 368 OFFCURVE",
"243 372 OFFCURVE",
"235 380 OFFCURVE",
"231 389 QCURVE SMOOTH",
"213 427 OFFCURVE",
"213 475 QCURVE SMOOTH",
"213 543 OFFCURVE",
"255 629 OFFCURVE",
"353 671 OFFCURVE",
"437 671 QCURVE SMOOTH",
"506 671 OFFCURVE",
"567 668 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
27 57 8 106 57 57 17 36 47 106 41 38 36 3 114 45 3 17 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 649;
}
);
leftKerningGroup = "Ia-cy";
note = uni042F;
unicode = 042F;
},
{
glyphname = "Dje-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"618 -2 LINE SMOOTH",
"607 -69 OFFCURVE",
"539 -125 OFFCURVE",
"487 -125 QCURVE SMOOTH",
"457 -125 OFFCURVE",
"401 -113 OFFCURVE",
"381 -105 QCURVE",
"359 -167 LINE",
"383 -177 OFFCURVE",
"449 -191 OFFCURVE",
"483 -191 QCURVE SMOOTH",
"664 -191 OFFCURVE",
"697 12 QCURVE SMOOTH",
"737 257 LINE SMOOTH",
"740 275 OFFCURVE",
"745 320 OFFCURVE",
"745 336 QCURVE SMOOTH",
"745 409 OFFCURVE",
"653 477 OFFCURVE",
"569 477 QCURVE SMOOTH",
"519 477 OFFCURVE",
"441 450 OFFCURVE",
"407 430 QCURVE SMOOTH",
"389 420 OFFCURVE",
"384 420 QCURVE SMOOTH",
"377 420 OFFCURVE",
"377 428 QCURVE SMOOTH",
"377 433 OFFCURVE",
"379 446 OFFCURVE",
"380 451 QCURVE SMOOTH",
"417 658 LINE",
"662 658 LINE",
"674 727 LINE",
"106 727 LINE",
"94 658 LINE",
"339 658 LINE",
"233 57 LINE",
"232 53 OFFCURVE",
"227 26 OFFCURVE",
"227 18 QCURVE SMOOTH",
"227 9 OFFCURVE",
"237 0 OFFCURVE",
"251 0 QCURVE SMOOTH",
"300 0 LINE",
"358 331 LINE",
"359 339 OFFCURVE",
"365 346 OFFCURVE",
"373 352 QCURVE",
"402 372 OFFCURVE",
"485 409 OFFCURVE",
"535 409 QCURVE SMOOTH",
"607 409 OFFCURVE",
"666 359 OFFCURVE",
"666 308 QCURVE SMOOTH",
"666 291 OFFCURVE",
"658 238 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
44 51 106 44 35 4 106 35 35 12 24 21 20 106 21 2 114 12 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 804;
}
);
leftKerningGroup = "Te-cy";
note = uni0402;
unicode = 0402;
},
{
glyphname = "Ghestroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"146 0 LINE",
"206 341 LINE",
"383 341 LINE",
"394 406 LINE",
"217 406 LINE",
"262 658 LINE",
"600 658 LINE",
"612 727 LINE",
"197 727 LINE",
"140 406 LINE",
"61 406 LINE",
"50 341 LINE",
"129 341 LINE",
"79 57 LINE",
"78 53 OFFCURVE",
"73 26 OFFCURVE",
"73 18 QCURVE SMOOTH",
"73 9 OFFCURVE",
"83 0 OFFCURVE",
"97 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
3 0 9 8 18 15 106 18 18 0 11 14 106 11 2 114 0 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 524;
}
);
note = uni0492;
rightKerningGroup = "Ge-cy";
unicode = 0492;
},
{
glyphname = "Kadescender-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"570 72 LINE",
"378 385 LINE",
"690 727 LINE",
"618 727 LINE SMOOTH",
"602 727 OFFCURVE",
"562 690 OFFCURVE",
"534 657 QCURVE SMOOTH",
"530 652 OFFCURVE",
"525 646 QCURVE",
"519 640 OFFCURVE",
"513 633 QCURVE SMOOTH",
"313 413 LINE",
"208 413 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"196 343 LINE",
"304 343 LINE",
"500 20 LINE",
"508 8 OFFCURVE",
"520 0 OFFCURVE",
"531 0 QCURVE SMOOTH",
"540 0 LINE",
"529 -58 LINE",
"528 -62 OFFCURVE",
"523 -89 OFFCURVE",
"523 -97 QCURVE SMOOTH",
"523 -106 OFFCURVE",
"533 -115 OFFCURVE",
"547 -115 QCURVE SMOOTH",
"588 -115 LINE",
"611 15 LINE",
"612 19 OFFCURVE",
"617 46 OFFCURVE",
"617 54 QCURVE SMOOTH",
"617 63 OFFCURVE",
"607 72 OFFCURVE",
"593 72 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
49 21 38 106 21 21 7 48 34 30 2 114 23 8 114 15 50 106 15 8 114 11 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 646;
}
);
note = uni049A;
rightKerningGroup = "Zhe-cy";
unicode = 049A;
},
{
glyphname = "Kaverticalstroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"299 413 LINE",
"314 499 LINE SMOOTH",
"316 509 OFFCURVE",
"316 514 QCURVE SMOOTH",
"316 522 OFFCURVE",
"308 528 OFFCURVE",
"298 528 QCURVE SMOOTH",
"266 528 LINE",
"246 413 LINE",
"208 413 LINE",
"254 670 LINE",
"255 674 OFFCURVE",
"260 701 OFFCURVE",
"260 709 QCURVE SMOOTH",
"260 718 OFFCURVE",
"250 727 OFFCURVE",
"236 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"196 343 LINE",
"233 343 LINE",
"218 257 LINE",
"216 243 LINE",
"216 228 OFFCURVE",
"234 228 QCURVE SMOOTH",
"266 228 LINE",
"286 343 LINE",
"304 343 LINE",
"500 20 LINE",
"508 8 OFFCURVE",
"520 0 OFFCURVE",
"531 0 QCURVE SMOOTH",
"613 0 LINE",
"378 385 LINE",
"690 727 LINE",
"618 727 LINE SMOOTH",
"607 727 OFFCURVE",
"591 719 OFFCURVE",
"580 707 QCURVE SMOOTH",
"313 413 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
6 46 20 37 106 13 20 20 22 33 5 1 29 2 114 25 11 8 22 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 646;
}
);
note = uni049C;
rightKerningGroup = "Zhe-cy";
unicode = 049C;
},
{
glyphname = "Endescender-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"622 72 LINE",
"729 670 LINE",
"730 674 OFFCURVE",
"735 701 OFFCURVE",
"735 709 QCURVE SMOOTH",
"735 718 OFFCURVE",
"725 727 OFFCURVE",
"711 727 QCURVE SMOOTH",
"662 727 LINE",
"605 406 LINE",
"207 406 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"195 335 LINE",
"593 335 LINE",
"542 57 LINE",
"541 53 OFFCURVE",
"536 26 OFFCURVE",
"536 18 QCURVE SMOOTH",
"536 9 OFFCURVE",
"546 0 OFFCURVE",
"560 0 QCURVE SMOOTH",
"634 0 LINE",
"623 -58 LINE",
"622 -62 OFFCURVE",
"617 -89 OFFCURVE",
"617 -97 QCURVE SMOOTH",
"617 -106 OFFCURVE",
"627 -115 OFFCURVE",
"641 -115 QCURVE SMOOTH",
"682 -115 LINE",
"705 15 LINE",
"706 19 OFFCURVE",
"711 46 OFFCURVE",
"711 54 QCURVE SMOOTH",
"711 63 OFFCURVE",
"701 72 OFFCURVE",
"687 72 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
41 24 106 41 41 26 47 44 37 33 2 114 16 51 106 16 26 8 114 11 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 747;
}
);
note = uni04A2;
unicode = 04A2;
},
{
glyphname = "Ustraight-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"294 0 LINE",
"333 219 LINE",
"669 727 LINE",
"598 727 LINE SMOOTH",
"587 727 OFFCURVE",
"577 719 OFFCURVE",
"569 706 QCURVE SMOOTH",
"309 298 LINE",
"190 706 LINE",
"187 719 OFFCURVE",
"180 727 OFFCURVE",
"169 727 QCURVE SMOOTH",
"100 727 LINE",
"255 219 LINE",
"227 57 LINE",
"226 53 OFFCURVE",
"221 26 OFFCURVE",
"221 18 QCURVE SMOOTH",
"221 9 OFFCURVE",
"231 0 OFFCURVE",
"245 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
12 7 2 20 8 114 17 7 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 572;
}
);
leftKerningGroup = "Ustraight-cy";
note = uni04AE;
rightKerningGroup = "Ustraight-cy";
unicode = 04AE;
},
{
glyphname = "Ustraightstroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"294 0 LINE",
"333 219 LINE",
"496 219 LINE",
"508 286 LINE",
"377 286 LINE",
"669 727 LINE",
"598 727 LINE SMOOTH",
"587 727 OFFCURVE",
"577 719 OFFCURVE",
"569 706 QCURVE SMOOTH",
"309 298 LINE",
"190 706 LINE",
"187 719 OFFCURVE",
"180 727 OFFCURVE",
"169 727 QCURVE SMOOTH",
"100 727 LINE",
"234 286 LINE",
"108 286 LINE",
"96 219 LINE",
"255 219 LINE",
"227 57 LINE",
"226 53 OFFCURVE",
"221 26 OFFCURVE",
"221 18 QCURVE SMOOTH",
"221 9 OFFCURVE",
"231 0 OFFCURVE",
"245 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
21 7 8 106 24 15 7 7 10 2 26 8 114 20 10 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 572;
}
);
leftKerningGroup = "Ustraightstroke-cy";
note = uni04B0;
rightKerningGroup = "Ustraightstroke-cy";
unicode = 04B0;
},
{
glyphname = "Hadescender-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"536 -115 LINE",
"559 15 LINE",
"560 19 OFFCURVE",
"565 46 OFFCURVE",
"565 54 QCURVE SMOOTH",
"565 63 OFFCURVE",
"555 72 OFFCURVE",
"541 72 QCURVE SMOOTH",
"521 72 LINE",
"382 362 LINE",
"676 727 LINE",
"605 727 LINE SMOOTH",
"594 727 OFFCURVE",
"579 719 OFFCURVE",
"569 707 QCURVE SMOOTH",
"346 421 LINE",
"236 659 LINE SMOOTH",
"232 667 OFFCURVE",
"225 684 QCURVE SMOOTH",
"218 701 OFFCURVE",
"201 727 OFFCURVE",
"186 727 QCURVE SMOOTH",
"116 727 LINE",
"287 365 LINE",
"-11 0 LINE",
"58 0 LINE SMOOTH",
"69 0 OFFCURVE",
"84 8 OFFCURVE",
"94 20 QCURVE SMOOTH",
"323 303 LINE",
"434 67 LINE SMOOTH",
"438 59 OFFCURVE",
"445 43 QCURVE",
"451 26 OFFCURVE",
"471 0 OFFCURVE",
"488 0 QCURVE",
"477 -58 LINE",
"476 -62 OFFCURVE",
"471 -89 OFFCURVE",
"471 -97 QCURVE SMOOTH",
"471 -106 OFFCURVE",
"481 -115 OFFCURVE",
"495 -115 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
2 41 12 26 6 31 27 19 2 114 17 8 114 6 33 106 6 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 604;
}
);
leftKerningGroup = "Zhe-cy";
note = uni04B2;
rightKerningGroup = "Zhe-cy";
unicode = 04B2;
},
{
glyphname = "Cheverticalstroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"494 198 LINE",
"469 57 LINE",
"468 53 OFFCURVE",
"463 26 OFFCURVE",
"463 18 QCURVE SMOOTH",
"463 9 OFFCURVE",
"473 0 OFFCURVE",
"487 0 QCURVE SMOOTH",
"536 0 LINE",
"654 670 LINE",
"655 674 OFFCURVE",
"660 701 OFFCURVE",
"660 709 QCURVE SMOOTH",
"660 718 OFFCURVE",
"650 727 OFFCURVE",
"636 727 QCURVE SMOOTH",
"587 727 LINE",
"528 389 LINE",
"527 381 OFFCURVE",
"521 374 OFFCURVE",
"513 368 QCURVE SMOOTH",
"448 321 OFFCURVE",
"363 312 QCURVE",
"378 394 LINE SMOOTH",
"381 408 OFFCURVE",
"381 413 QCURVE SMOOTH",
"381 428 OFFCURVE",
"363 428 QCURVE SMOOTH",
"313 428 LINE",
"292 311 LINE",
"238 317 OFFCURVE",
"185 372 OFFCURVE",
"185 423 QCURVE SMOOTH",
"185 456 OFFCURVE",
"197 531 OFFCURVE",
"210 592 QCURVE SMOOTH",
"223 649 OFFCURVE",
"226 670 QCURVE",
"227 674 OFFCURVE",
"232 701 OFFCURVE",
"232 709 QCURVE SMOOTH",
"232 718 OFFCURVE",
"222 727 OFFCURVE",
"208 727 QCURVE SMOOTH",
"160 727 LINE",
"113 482 LINE SMOOTH",
"110 464 OFFCURVE",
"105 420 OFFCURVE",
"105 403 QCURVE SMOOTH",
"105 382 OFFCURVE",
"110 360 QCURVE SMOOTH",
"123 305 OFFCURVE",
"215 244 OFFCURVE",
"280 242 QCURVE",
"266 162 LINE SMOOTH",
"262 142 OFFCURVE",
"262 137 QCURVE SMOOTH",
"262 122 OFFCURVE",
"280 122 QCURVE SMOOTH",
"330 122 LINE",
"352 246 LINE",
"393 252 OFFCURVE",
"449 273 OFFCURVE",
"480 289 QCURVE",
"497 299 OFFCURVE",
"502 299 QCURVE SMOOTH",
"509 299 OFFCURVE",
"509 291 QCURVE SMOOTH",
"509 276 OFFCURVE",
"505 255 QCURVE SMOOTH",
"501 234 OFFCURVE",
"500 228 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
49 18 42 106 11 18 18 27 67 64 8 114 59 56 31 27 2 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 659;
}
);
leftKerningGroup = "Che-cy";
note = uni04B8;
unicode = 04B8;
},
{
glyphname = "Shha-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"228 529 LINE",
"253 670 LINE",
"254 674 OFFCURVE",
"259 701 OFFCURVE",
"259 709 QCURVE SMOOTH",
"259 718 OFFCURVE",
"249 727 OFFCURVE",
"235 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"135 0 LINE",
"194 338 LINE",
"195 346 OFFCURVE",
"201 353 OFFCURVE",
"209 359 QCURVE SMOOTH",
"292 417 OFFCURVE",
"398 417 QCURVE SMOOTH",
"468 417 OFFCURVE",
"537 362 OFFCURVE",
"537 304 QCURVE SMOOTH",
"537 271 OFFCURVE",
"525 196 OFFCURVE",
"512 135 QCURVE SMOOTH",
"499 78 OFFCURVE",
"496 57 QCURVE",
"495 53 OFFCURVE",
"490 26 OFFCURVE",
"490 18 QCURVE SMOOTH",
"490 9 OFFCURVE",
"500 0 OFFCURVE",
"514 0 QCURVE SMOOTH",
"562 0 LINE",
"609 245 LINE SMOOTH",
"612 263 OFFCURVE",
"617 308 OFFCURVE",
"617 324 QCURVE SMOOTH",
"617 345 OFFCURVE",
"612 367 QCURVE SMOOTH",
"598 424 OFFCURVE",
"501 485 OFFCURVE",
"432 485 QCURVE SMOOTH",
"386 485 OFFCURVE",
"313 470 OFFCURVE",
"268 451 OFFCURVE",
"243 438 QCURVE SMOOTH",
"225 428 OFFCURVE",
"220 428 QCURVE SMOOTH",
"213 428 OFFCURVE",
"213 436 QCURVE SMOOTH",
"213 451 OFFCURVE",
"217 472 QCURVE SMOOTH",
"221 493 OFFCURVE",
"222 499 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
22 25 46 43 54 50 12 36 106 12 12 43 50 2 114 43 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 662;
}
);
note = uni04BA;
unicode = 04BA;
},
{
glyphname = "Schwa-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"406 740 OFFCURVE",
"294 718 OFFCURVE",
"248 703 QCURVE",
"259 636 LINE SMOOTH",
"261 625 OFFCURVE",
"270 625 QCURVE SMOOTH",
"277 625 OFFCURVE",
"288 632 QCURVE SMOOTH",
"318 650 OFFCURVE",
"399 672 OFFCURVE",
"446 672 QCURVE SMOOTH",
"508 672 OFFCURVE",
"587 635 OFFCURVE",
"625 555 OFFCURVE",
"625 489 QCURVE SMOOTH",
"625 442 OFFCURVE",
"621 407 QCURVE",
"137 407 LINE SMOOTH",
"113 407 OFFCURVE",
"86 386 OFFCURVE",
"82 362 QCURVE SMOOTH",
"70 296 OFFCURVE",
"70 233 QCURVE SMOOTH",
"70 107 OFFCURVE",
"195 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH",
"459 -16 OFFCURVE",
"631 135 OFFCURVE",
"707 368 OFFCURVE",
"707 495 QCURVE SMOOTH",
"707 619 OFFCURVE",
"585 740 OFFCURVE",
"459 740 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"243 55 OFFCURVE",
"155 142 OFFCURVE",
"155 241 QCURVE SMOOTH",
"155 271 OFFCURVE",
"161 330 OFFCURVE",
"162 335 QCURVE",
"611 335 LINE",
"586 204 OFFCURVE",
"444 55 OFFCURVE",
"334 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
6 42 106 36 14 106 36 36 6 32 21 106 32 3 114 6 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 715;
}
);
leftKerningGroup = "O-cy";
note = uni04D8;
rightKerningGroup = "O-cy";
unicode = 04D8;
},
{
glyphname = "Obarred-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"459 -16 OFFCURVE",
"631 135 OFFCURVE",
"707 368 OFFCURVE",
"707 495 QCURVE SMOOTH",
"707 620 OFFCURVE",
"584 740 OFFCURVE",
"456 740 QCURVE SMOOTH",
"321 740 OFFCURVE",
"148 590 OFFCURVE",
"70 359 OFFCURVE",
"70 233 QCURVE SMOOTH",
"70 107 OFFCURVE",
"195 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"506 672 OFFCURVE",
"586 635 OFFCURVE",
"625 555 OFFCURVE",
"625 489 QCURVE SMOOTH",
"625 458 OFFCURVE",
"621 406 QCURVE",
"172 406 LINE",
"200 530 OFFCURVE",
"339 672 OFFCURVE",
"443 672 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"243 55 OFFCURVE",
"155 142 OFFCURVE",
"155 241 QCURVE SMOOTH",
"155 285 OFFCURVE",
"160 335 QCURVE",
"611 335 LINE",
"586 204 OFFCURVE",
"444 55 OFFCURVE",
"334 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
13 32 106 27 16 106 27 27 13 6 23 106 6 3 114 13 9 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 715;
}
);
leftKerningGroup = "O-cy";
note = uni04E8;
rightKerningGroup = "O-cy";
unicode = 04E8;
},
{
glyphname = "a-cy";
layers = (
{
components = (
{
name = a;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = "a-cy";
note = uni0430;
unicode = 0430;
},
{
glyphname = "be-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"554 421 OFFCURVE",
"454 512 OFFCURVE",
"359 512 QCURVE SMOOTH",
"303 512 OFFCURVE",
"209 469 OFFCURVE",
"179 438 QCURVE",
"200 494 OFFCURVE",
"260 564 OFFCURVE",
"340 601 OFFCURVE",
"395 608 QCURVE SMOOTH",
"441 614 OFFCURVE",
"514 634 OFFCURVE",
"568 676 OFFCURVE",
"568 711 QCURVE SMOOTH",
"568 727 OFFCURVE",
"545 727 QCURVE SMOOTH",
"506 727 LINE",
"500 711 OFFCURVE",
"483 691 OFFCURVE",
"433 674 OFFCURVE",
"383 668 QCURVE SMOOTH",
"290 657 OFFCURVE",
"169 564 OFFCURVE",
"100 410 OFFCURVE",
"80 297 QCURVE SMOOTH",
"67 222 OFFCURVE",
"67 172 QCURVE SMOOTH",
"67 82 OFFCURVE",
"162 -12 OFFCURVE",
"269 -12 QCURVE SMOOTH",
"364 -12 OFFCURVE",
"492 85 OFFCURVE",
"554 240 OFFCURVE",
"554 329 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"213 49 OFFCURVE",
"144 116 OFFCURVE",
"144 183 QCURVE SMOOTH",
"144 247 OFFCURVE",
"183 369 OFFCURVE",
"272 451 OFFCURVE",
"341 451 QCURVE SMOOTH",
"406 451 OFFCURVE",
"475 385 OFFCURVE",
"475 319 QCURVE SMOOTH",
"475 250 OFFCURVE",
"435 127 OFFCURVE",
"346 49 OFFCURVE",
"278 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
27 9 3 30 40 106 30 6 114 19 16 0 114 3 47 106 3 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 571;
}
);
leftKerningGroup = "be-cy";
note = uni0431;
rightKerningGroup = "be-cy";
unicode = 0431;
},
{
glyphname = "ve-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"311 -14 OFFCURVE",
"429 27 OFFCURVE",
"504 111 OFFCURVE",
"504 173 QCURVE SMOOTH",
"504 200 OFFCURVE",
"475 247 OFFCURVE",
"450 261 QCURVE",
"449 262 OFFCURVE",
"447 263 QCURVE SMOOTH",
"445 264 OFFCURVE",
"440 268 OFFCURVE",
"440 271 QCURVE SMOOTH",
"440 274 OFFCURVE",
"449 281 OFFCURVE",
"454 284 QCURVE SMOOTH",
"492 308 OFFCURVE",
"525 368 OFFCURVE",
"525 410 QCURVE SMOOTH",
"525 440 OFFCURVE",
"493 493 OFFCURVE",
"420 527 OFFCURVE",
"362 527 QCURVE SMOOTH",
"265 527 OFFCURVE",
"126 426 OFFCURVE",
"55 259 OFFCURVE",
"55 161 QCURVE SMOOTH",
"55 73 OFFCURVE",
"153 -14 OFFCURVE",
"246 -14 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402 465 OFFCURVE",
"446 420 OFFCURVE",
"446 389 QCURVE SMOOTH",
"446 363 OFFCURVE",
"424 324 OFFCURVE",
"409 311 QCURVE SMOOTH",
"398 302 OFFCURVE",
"385 297 OFFCURVE",
"367 297 QCURVE SMOOTH",
"152 297 LINE",
"174 375 OFFCURVE",
"275 465 OFFCURVE",
"350 465 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"357 237 LINE SMOOTH",
"377 237 OFFCURVE",
"394 230 OFFCURVE",
"402 219 QCURVE SMOOTH",
"409 209 OFFCURVE",
"419 179 OFFCURVE",
"419 159 QCURVE SMOOTH",
"419 123 OFFCURVE",
"376 73 OFFCURVE",
"305 49 OFFCURVE",
"262 49 QCURVE SMOOTH",
"202 49 OFFCURVE",
"136 109 OFFCURVE",
"136 173 QCURVE SMOOTH",
"136 209 OFFCURVE",
"140 237 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
15 57 31 106 57 57 6 28 46 106 28 11 114 6 41 106 6 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 535;
}
);
leftKerningGroup = "ve-cy";
note = uni0432;
unicode = 0432;
},
{
glyphname = "ge-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"335 92 LINE",
"311 74 OFFCURVE",
"244 50 OFFCURVE",
"210 50 QCURVE SMOOTH",
"163 50 OFFCURVE",
"107 83 OFFCURVE",
"107 119 QCURVE SMOOTH",
"107 141 OFFCURVE",
"137 177 OFFCURVE",
"179 203 OFFCURVE",
"212 220 QCURVE SMOOTH",
"230 229 LINE",
"265 247 LINE SMOOTH",
"312 270 OFFCURVE",
"371 308 OFFCURVE",
"412 364 OFFCURVE",
"412 402 QCURVE SMOOTH",
"412 462 OFFCURVE",
"324 524 OFFCURVE",
"245 524 QCURVE SMOOTH",
"208 524 OFFCURVE",
"130 504 OFFCURVE",
"99 490 QCURVE",
"123 435 LINE",
"151 447 OFFCURVE",
"213 464 OFFCURVE",
"238 464 QCURVE SMOOTH",
"284 464 OFFCURVE",
"332 428 OFFCURVE",
"332 394 QCURVE SMOOTH",
"332 372 OFFCURVE",
"307 340 OFFCURVE",
"266 316 OFFCURVE",
"227 297 QCURVE SMOOTH",
"188 278 LINE SMOOTH",
"137 252 OFFCURVE",
"72 210 OFFCURVE",
"26 149 OFFCURVE",
"26 110 QCURVE SMOOTH",
"26 51 OFFCURVE",
"114 -12 OFFCURVE",
"196 -12 QCURVE SMOOTH",
"249 -12 OFFCURVE",
"336 17 OFFCURVE",
"363 38 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
29 2 24 17 106 7 40 24 7 114 2 40 106 2 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 397;
}
);
leftKerningGroup = "ge-cy";
note = uni0433;
rightKerningGroup = "ge-cy";
unicode = 0433;
},
{
glyphname = "gje-cy";
layers = (
{
components = (
{
name = "ge-cy";
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 565, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 397;
}
);
leftKerningGroup = "gje-cy";
note = uni0453;
rightKerningGroup = "ge-cy";
unicode = 0453;
},
{
glyphname = "gheupturn-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"403 455 LINE",
"424 572 LINE",
"425 576 OFFCURVE",
"430 603 OFFCURVE",
"430 611 QCURVE SMOOTH",
"430 620 OFFCURVE",
"420 629 OFFCURVE",
"406 629 QCURVE SMOOTH",
"368 629 LINE",
"348 515 LINE",
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"200 455 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
15 11 9 9 0 106 9 6 114 5 2 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00110]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 371;
}
);
leftKerningGroup = "ve-cy";
note = uni0491;
rightKerningGroup = "gheupturn-cy";
unicode = 0491;
},
{
glyphname = "de-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"363 -12 OFFCURVE",
"494 92 OFFCURVE",
"549 247 OFFCURVE",
"549 328 QCURVE SMOOTH",
"549 337 LINE",
"547 449 OFFCURVE",
"491 593 OFFCURVE",
"368 692 OFFCURVE",
"259 732 QCURVE",
"232 673 LINE",
"295 652 OFFCURVE",
"382 602 OFFCURVE",
"442 528 OFFCURVE",
"460 473 QCURVE",
"438 489 OFFCURVE",
"373 512 OFFCURVE",
"336 512 QCURVE SMOOTH",
"241 512 OFFCURVE",
"117 407 OFFCURVE",
"61 251 OFFCURVE",
"61 172 QCURVE SMOOTH",
"61 81 OFFCURVE",
"160 -12 OFFCURVE",
"257 -12 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402 451 OFFCURVE",
"470 383 OFFCURVE",
"470 320 QCURVE SMOOTH",
"470 267 OFFCURVE",
"439 144 OFFCURVE",
"351 49 OFFCURVE",
"273 49 QCURVE SMOOTH",
"208 49 OFFCURVE",
"140 117 OFFCURVE",
"140 180 QCURVE SMOOTH",
"140 233 OFFCURVE",
"171 356 OFFCURVE",
"259 451 OFFCURVE",
"337 451 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
9 17 6 23 30 106 23 11 114 14 13 106 14 0 114 6 37 106 6 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 566;
}
);
leftKerningGroup = "de-cy";
note = uni0434;
unicode = 0434;
},
{
glyphname = "ie-cy";
layers = (
{
components = (
{
name = e;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = "a-cy";
note = uni0435;
unicode = 0435;
},
{
glyphname = "io-cy";
layers = (
{
components = (
{
name = e;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, 146, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 498;
}
);
leftKerningGroup = "a-cy";
note = uni0451;
unicode = 0451;
},
{
glyphname = "zhe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"88 442 LINE",
"99 452 OFFCURVE",
"137 465 OFFCURVE",
"161 465 QCURVE SMOOTH",
"187 465 OFFCURVE",
"230 433 OFFCURVE",
"256 371 OFFCURVE",
"256 328 QCURVE SMOOTH",
"256 276 OFFCURVE",
"234 174 OFFCURVE",
"192 91 OFFCURVE",
"164 70 QCURVE SMOOTH",
"138 50 OFFCURVE",
"110 50 QCURVE SMOOTH",
"89 50 OFFCURVE",
"63 62 OFFCURVE",
"54 70 QCURVE SMOOTH",
"45 78 OFFCURVE",
"43 78 QCURVE SMOOTH",
"35 78 OFFCURVE",
"23 57 QCURVE SMOOTH",
"-5 10 LINE",
"6 1 OFFCURVE",
"54 -12 OFFCURVE",
"87 -12 QCURVE SMOOTH",
"146 -12 OFFCURVE",
"245 59 OFFCURVE",
"313 178 OFFCURVE",
"327 248 QCURVE",
"402 248 LINE",
"368 57 LINE",
"367 53 OFFCURVE",
"362 26 OFFCURVE",
"362 18 QCURVE SMOOTH",
"362 9 OFFCURVE",
"372 0 OFFCURVE",
"386 0 QCURVE SMOOTH",
"430 0 LINE",
"474 248 LINE",
"547 248 LINE",
"543 220 OFFCURVE",
"543 185 QCURVE SMOOTH",
"543 114 OFFCURVE",
"589 26 OFFCURVE",
"657 -12 OFFCURVE",
"693 -12 QCURVE SMOOTH",
"729 -12 OFFCURVE",
"790 14 OFFCURVE",
"810 32 QCURVE",
"790 73 LINE",
"779 63 OFFCURVE",
"741 50 OFFCURVE",
"717 50 QCURVE SMOOTH",
"691 50 OFFCURVE",
"648 82 OFFCURVE",
"622 144 OFFCURVE",
"622 187 QCURVE SMOOTH",
"622 239 OFFCURVE",
"644 341 OFFCURVE",
"686 423 OFFCURVE",
"714 445 QCURVE SMOOTH",
"739 465 OFFCURVE",
"768 465 QCURVE SMOOTH",
"789 465 OFFCURVE",
"815 453 OFFCURVE",
"824 445 QCURVE SMOOTH",
"833 437 OFFCURVE",
"835 437 QCURVE SMOOTH",
"839 437 OFFCURVE",
"848 446 OFFCURVE",
"855 458 QCURVE SMOOTH",
"883 505 LINE",
"872 514 OFFCURVE",
"824 527 OFFCURVE",
"791 527 QCURVE SMOOTH",
"736 527 OFFCURVE",
"642 465 OFFCURVE",
"575 360 OFFCURVE",
"558 297 QCURVE",
"482 297 LINE",
"511 458 LINE",
"512 462 OFFCURVE",
"517 489 OFFCURVE",
"517 497 QCURVE SMOOTH",
"517 506 OFFCURVE",
"507 515 OFFCURVE",
"493 515 QCURVE SMOOTH",
"449 515 LINE",
"410 297 LINE",
"334 297 LINE",
"335 308 OFFCURVE",
"335 330 QCURVE SMOOTH",
"335 401 OFFCURVE",
"289 489 OFFCURVE",
"221 527 OFFCURVE",
"185 527 QCURVE SMOOTH",
"149 527 OFFCURVE",
"88 501 OFFCURVE",
"68 483 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
73 84 106 52 45 106 52 73 18 59 69 8 106 69 69 73 2 23 35 106 23 2 94 106 61 10 114 10 6 114 2 7 114 73 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 838;
}
);
leftKerningGroup = "zhe-cy";
note = uni0436;
rightKerningGroup = "zhe-cy";
unicode = 0436;
},
{
glyphname = "ze-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"421 234 OFFCURVE",
"377 256 QCURVE",
"370 259 OFFCURVE",
"355 266 OFFCURVE",
"343 274 OFFCURVE",
"343 278 QCURVE SMOOTH",
"343 282 OFFCURVE",
"353 289 OFFCURVE",
"374 300 OFFCURVE",
"380 303 QCURVE SMOOTH",
"413 320 OFFCURVE",
"449 388 OFFCURVE",
"449 426 QCURVE SMOOTH",
"449 476 OFFCURVE",
"367 528 OFFCURVE",
"273 528 QCURVE SMOOTH",
"233 528 OFFCURVE",
"148 512 OFFCURVE",
"113 500 QCURVE",
"121 438 LINE",
"151 450 OFFCURVE",
"226 466 OFFCURVE",
"261 466 QCURVE SMOOTH",
"367 466 OFFCURVE",
"367 406 QCURVE SMOOTH",
"367 346 OFFCURVE",
"279 300 OFFCURVE",
"216 300 QCURVE SMOOTH",
"129 300 LINE",
"118 237 LINE",
"203 237 LINE SMOOTH",
"248 237 OFFCURVE",
"306 226 OFFCURVE",
"338 194 OFFCURVE",
"338 165 QCURVE SMOOTH",
"338 122 OFFCURVE",
"289 71 OFFCURVE",
"215 50 OFFCURVE",
"174 50 QCURVE SMOOTH",
"133 50 OFFCURVE",
"61 62 OFFCURVE",
"37 71 QCURVE",
"10 14 LINE",
"35 3 OFFCURVE",
"117 -12 OFFCURVE",
"167 -12 QCURVE SMOOTH",
"234 -12 OFFCURVE",
"350 30 OFFCURVE",
"421 115 OFFCURVE",
"421 177 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
42 19 20 106 19 19 3 33 26 106 33 7 114 3 10 106 3 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 464;
}
);
note = uni0437;
unicode = 0437;
},
{
glyphname = "ii-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH",
"134 515 LINE",
"77 191 LINE SMOOTH",
"69 150 OFFCURVE",
"67 132 QCURVE SMOOTH",
"65 114 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"149 -12 OFFCURVE",
"213 -12 QCURVE SMOOTH",
"284 -12 OFFCURVE",
"354 35 QCURVE",
"358 38 OFFCURVE",
"386 58 OFFCURVE",
"391 58 QCURVE SMOOTH",
"396 58 OFFCURVE",
"400 52 OFFCURVE",
"400 44 QCURVE SMOOTH",
"400 23 LINE SMOOTH",
"400 11 OFFCURVE",
"410 0 OFFCURVE",
"421 0 QCURVE SMOOTH",
"469 0 LINE",
"469 37 LINE SMOOTH",
"469 71 OFFCURVE",
"476 135 OFFCURVE",
"484 182 QCURVE SMOOTH",
"533 458 LINE",
"534 462 OFFCURVE",
"539 489 OFFCURVE",
"539 497 QCURVE SMOOTH",
"539 506 OFFCURVE",
"529 515 OFFCURVE",
"515 515 QCURVE SMOOTH",
"469 515 LINE",
"411 189 LINE SMOOTH",
"410 182 OFFCURVE",
"409 170 QCURVE",
"407 157 OFFCURVE",
"399 134 OFFCURVE",
"390 125 QCURVE SMOOTH",
"368 103 OFFCURVE",
"290 54 OFFCURVE",
"247 54 QCURVE SMOOTH",
"194 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
18 51 15 47 39 5 106 27 10 114 47 6 114 39 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
leftKerningGroup = "ii-cy";
note = uni0438;
unicode = 0438;
},
{
glyphname = "iishort-cy";
layers = (
{
components = (
{
name = "ii-cy";
},
{
name = breve;
transform = "{1, 0, 0, 1, 129, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = "gje-cy";
note = uni0439;
unicode = 0439;
},
{
glyphname = "ka-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"119 0 LINE",
"159 222 LINE",
"190 228 OFFCURVE",
"242 248 QCURVE",
"376 20 LINE SMOOTH",
"384 7 OFFCURVE",
"393 0 OFFCURVE",
"404 0 QCURVE SMOOTH",
"476 0 LINE",
"310 283 LINE",
"369 327 OFFCURVE",
"452 420 OFFCURVE",
"497 482 QCURVE",
"506 493 OFFCURVE",
"522 515 QCURVE",
"451 515 LINE SMOOTH",
"439 515 OFFCURVE",
"424 507 OFFCURVE",
"416 495 QCURVE",
"360 418 OFFCURVE",
"238 305 OFFCURVE",
"168 285 QCURVE",
"200 458 LINE",
"201 462 OFFCURVE",
"206 489 OFFCURVE",
"206 497 QCURVE SMOOTH",
"206 506 OFFCURVE",
"196 515 OFFCURVE",
"182 515 QCURVE SMOOTH",
"136 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
26 32 21 14 34 106 14 14 6 28 36 10 114 21 6 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 497;
}
);
leftKerningGroup = "ve-cy";
note = uni043A;
rightKerningGroup = "ka-cy";
unicode = 043A;
},
{
glyphname = "kje-cy";
layers = (
{
components = (
{
name = "ka-cy";
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 594, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 497;
}
);
leftKerningGroup = "gje-cy";
note = uni045C;
rightKerningGroup = "ka-cy";
unicode = 045C;
},
{
glyphname = "el-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"201 515 LINE",
"183 412 OFFCURVE",
"137 200 OFFCURVE",
"116 127 QCURVE SMOOTH",
"107 97 OFFCURVE",
"93 67 OFFCURVE",
"68 51 OFFCURVE",
"46 51 QCURVE SMOOTH",
"27 51 OFFCURVE",
"3 59 QCURVE",
"-12 3 LINE",
"22 -7 OFFCURVE",
"55 -7 QCURVE SMOOTH",
"93 -7 OFFCURVE",
"141 24 OFFCURVE",
"170 78 OFFCURVE",
"182 119 QCURVE SMOOTH",
"197 172 OFFCURVE",
"239 358 OFFCURVE",
"259 456 QCURVE",
"454 456 LINE",
"383 57 LINE",
"382 53 OFFCURVE",
"377 26 OFFCURVE",
"377 18 QCURVE SMOOTH",
"377 9 OFFCURVE",
"387 0 OFFCURVE",
"401 0 QCURVE SMOOTH",
"447 0 LINE",
"528 458 LINE",
"529 462 OFFCURVE",
"534 489 OFFCURVE",
"534 497 QCURVE SMOOTH",
"534 506 OFFCURVE",
"524 515 OFFCURVE",
"510 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
24 7 2 34 22 27 106 34 15 106 7 10 114 34 6 114 22 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 546;
}
);
leftKerningGroup = "el-cy";
note = uni043B;
unicode = 043B;
},
{
glyphname = "em-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"653 0 LINE",
"692 478 LINE",
"693 495 LINE",
"693 515 OFFCURVE",
"676 515 QCURVE SMOOTH",
"586 515 LINE",
"357 72 LINE",
"299 492 LINE SMOOTH",
"297 504 OFFCURVE",
"286 515 OFFCURVE",
"274 515 QCURVE SMOOTH",
"190 515 LINE",
"37 0 LINE",
"86 0 LINE SMOOTH",
"98 0 OFFCURVE",
"109 9 OFFCURVE",
"113 21 QCURVE",
"238 452 LINE",
"294 24 LINE SMOOTH",
"296 11 OFFCURVE",
"306 0 OFFCURVE",
"316 0 QCURVE SMOOTH",
"385 0 LINE",
"623 455 LINE",
"582 43 LINE SMOOTH",
"580 23 OFFCURVE",
"580 17 QCURVE SMOOTH",
"580 0 OFFCURVE",
"600 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
4 10 10 25 23 16 6 114 21 6 6 28 1 15 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 736;
}
);
leftKerningGroup = "em-cy";
note = uni043C;
unicode = 043C;
},
{
glyphname = "en-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"470 0 LINE",
"551 458 LINE",
"552 462 OFFCURVE",
"557 489 OFFCURVE",
"557 497 QCURVE SMOOTH",
"557 506 OFFCURVE",
"547 515 OFFCURVE",
"533 515 QCURVE SMOOTH",
"487 515 LINE",
"448 293 LINE",
"172 293 LINE",
"201 458 LINE",
"202 462 OFFCURVE",
"207 489 OFFCURVE",
"207 497 QCURVE SMOOTH",
"207 506 OFFCURVE",
"197 515 OFFCURVE",
"183 515 QCURVE SMOOTH",
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"161 233 LINE",
"437 233 LINE",
"406 57 LINE",
"405 53 OFFCURVE",
"400 26 OFFCURVE",
"400 18 QCURVE SMOOTH",
"400 9 OFFCURVE",
"410 0 OFFCURVE",
"424 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
35 3 13 10 21 31 28 17 8 25 106 8 8 10 17 6 114 10 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 569;
}
);
leftKerningGroup = "ve-cy";
note = uni043D;
unicode = 043D;
},
{
glyphname = "o-cy";
layers = (
{
components = (
{
name = o;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = "a-cy";
note = uni043E;
rightKerningGroup = "be-cy";
unicode = 043E;
},
{
glyphname = "pe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"120 0 LINE",
"184 359 LINE SMOOTH",
"186 369 OFFCURVE",
"192 383 OFFCURVE",
"199 390 QCURVE SMOOTH",
"220 411 OFFCURVE",
"302 461 OFFCURVE",
"347 461 QCURVE SMOOTH",
"452 461 OFFCURVE",
"452 382 QCURVE SMOOTH",
"452 363 OFFCURVE",
"448 341 QCURVE SMOOTH",
"444 319 OFFCURVE",
"444 316 QCURVE",
"397 57 LINE",
"396 53 OFFCURVE",
"391 26 OFFCURVE",
"391 18 QCURVE SMOOTH",
"391 9 OFFCURVE",
"401 0 OFFCURVE",
"415 0 QCURVE SMOOTH",
"461 0 LINE",
"525 356 LINE SMOOTH",
"531 390 OFFCURVE",
"531 408 QCURVE SMOOTH",
"531 449 OFFCURVE",
"490 502 OFFCURVE",
"423 527 OFFCURVE",
"381 527 QCURVE SMOOTH",
"333 527 OFFCURVE",
"257 495 OFFCURVE",
"235 480 QCURVE",
"231 477 OFFCURVE",
"203 457 OFFCURVE",
"198 457 QCURVE SMOOTH",
"193 457 OFFCURVE",
"189 463 OFFCURVE",
"189 471 QCURVE SMOOTH",
"189 492 LINE SMOOTH",
"189 504 OFFCURVE",
"179 515 OFFCURVE",
"168 515 QCURVE SMOOTH",
"120 515 LINE",
"120 478 LINE SMOOTH",
"120 422 OFFCURVE",
"111 368 QCURVE SMOOTH",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
31 2 34 52 23 44 106 9 6 114 23 7 114 52 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
leftKerningGroup = "ve-cy";
note = uni043F;
unicode = 043F;
},
{
glyphname = "er-cy";
layers = (
{
components = (
{
name = p;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 550;
}
);
leftKerningGroup = "ve-cy";
note = uni0440;
rightKerningGroup = "be-cy";
unicode = 0440;
},
{
glyphname = "es-cy";
layers = (
{
components = (
{
name = c;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 449;
}
);
leftKerningGroup = "a-cy";
note = uni0441;
rightKerningGroup = "es-cy";
unicode = 0441;
},
{
glyphname = "te-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"716 57 LINE",
"715 53 OFFCURVE",
"710 26 OFFCURVE",
"710 18 QCURVE SMOOTH",
"710 9 OFFCURVE",
"720 0 OFFCURVE",
"734 0 QCURVE SMOOTH",
"780 0 LINE",
"844 356 LINE SMOOTH",
"850 390 OFFCURVE",
"850 408 QCURVE SMOOTH",
"850 468 OFFCURVE",
"769 527 OFFCURVE",
"707 527 QCURVE SMOOTH",
"662 527 OFFCURVE",
"586 495 OFFCURVE",
"565 480 QCURVE SMOOTH",
"559 476 OFFCURVE",
"551 470 QCURVE SMOOTH",
"542 463 OFFCURVE",
"524 450 OFFCURVE",
"520 450 QCURVE SMOOTH",
"517 450 OFFCURVE",
"512 454 OFFCURVE",
"506 464 OFFCURVE",
"505 466 QCURVE",
"493 488 OFFCURVE",
"435 527 OFFCURVE",
"377 527 QCURVE SMOOTH",
"332 527 OFFCURVE",
"256 495 OFFCURVE",
"235 480 QCURVE SMOOTH",
"231 477 OFFCURVE",
"203 457 OFFCURVE",
"198 457 QCURVE SMOOTH",
"193 457 OFFCURVE",
"189 463 OFFCURVE",
"189 471 QCURVE SMOOTH",
"189 492 LINE SMOOTH",
"189 504 OFFCURVE",
"179 515 OFFCURVE",
"168 515 QCURVE SMOOTH",
"120 515 LINE",
"120 478 LINE SMOOTH",
"120 447 OFFCURVE",
"116 397 OFFCURVE",
"111 368 QCURVE SMOOTH",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"183 356 LINE SMOOTH",
"185 366 OFFCURVE",
"191 380 OFFCURVE",
"198 387 QCURVE SMOOTH",
"221 410 OFFCURVE",
"300 461 OFFCURVE",
"343 461 QCURVE SMOOTH",
"393 461 OFFCURVE",
"441 422 OFFCURVE",
"441 382 QCURVE SMOOTH",
"441 365 OFFCURVE",
"434 324 OFFCURVE",
"433 319 QCURVE SMOOTH",
"386 57 LINE",
"385 53 OFFCURVE",
"380 26 OFFCURVE",
"380 18 QCURVE SMOOTH",
"380 9 OFFCURVE",
"390 0 OFFCURVE",
"404 0 QCURVE SMOOTH",
"450 0 LINE",
"513 356 LINE SMOOTH",
"515 366 OFFCURVE",
"521 380 OFFCURVE",
"528 387 QCURVE SMOOTH",
"551 410 OFFCURVE",
"630 461 OFFCURVE",
"673 461 QCURVE SMOOTH",
"723 461 OFFCURVE",
"771 422 OFFCURVE",
"771 382 QCURVE SMOOTH",
"771 365 OFFCURVE",
"764 324 OFFCURVE",
"763 319 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
13 81 16 37 84 34 74 5 106 74 59 26 106 45 6 114 59 7 114 34 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 870;
}
);
leftKerningGroup = "te-cy";
note = uni0442;
rightKerningGroup = "ge-cy";
unicode = 0442;
},
{
glyphname = "u-cy";
layers = (
{
components = (
{
name = y;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = "ii-cy";
note = uni0443;
unicode = 0443;
},
{
glyphname = "ushort-cy";
layers = (
{
components = (
{
name = y;
},
{
name = breve;
transform = "{1, 0, 0, 1, 137, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 549;
}
);
leftKerningGroup = "gje-cy";
note = uni045E;
unicode = 045E;
},
{
glyphname = "ef-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"311 -55 LINE SMOOTH",
"305 -101 OFFCURVE",
"273 -142 OFFCURVE",
"244 -142 QCURVE SMOOTH",
"230 -142 OFFCURVE",
"198 -135 QCURVE",
"183 -190 LINE",
"213 -200 OFFCURVE",
"251 -200 QCURVE SMOOTH",
"292 -200 OFFCURVE",
"345 -168 OFFCURVE",
"378 -96 OFFCURVE",
"388 -34 QCURVE SMOOTH",
"395 12 LINE",
"413 6 OFFCURVE",
"455 -3 OFFCURVE",
"474 -3 QCURVE SMOOTH",
"549 -3 OFFCURVE",
"667 89 OFFCURVE",
"734 245 OFFCURVE",
"734 338 QCURVE SMOOTH",
"734 403 OFFCURVE",
"689 484 OFFCURVE",
"616 519 OFFCURVE",
"571 519 QCURVE SMOOTH",
"542 519 OFFCURVE",
"488 502 OFFCURVE",
"469 489 QCURVE",
"483 582 LINE SMOOTH",
"488 615 OFFCURVE",
"506 657 OFFCURVE",
"544 680 OFFCURVE",
"576 680 QCURVE SMOOTH",
"604 680 OFFCURVE",
"653 667 QCURVE",
"668 723 LINE",
"648 729 OFFCURVE",
"601 737 OFFCURVE",
"580 737 QCURVE SMOOTH",
"504 737 OFFCURVE",
"421 661 OFFCURVE",
"408 577 QCURVE SMOOTH",
"397 504 LINE",
"379 510 OFFCURVE",
"337 519 OFFCURVE",
"318 519 QCURVE SMOOTH",
"243 519 OFFCURVE",
"125 427 OFFCURVE",
"58 271 OFFCURVE",
"58 178 QCURVE SMOOTH",
"58 113 OFFCURVE",
"103 32 OFFCURVE",
"176 -3 OFFCURVE",
"221 -3 QCURVE SMOOTH",
"250 -3 OFFCURVE",
"304 14 OFFCURVE",
"323 27 QCURVE"
);
},
{
closed = 1;
nodes = (
"460 433 LINE",
"482 443 OFFCURVE",
"529 458 OFFCURVE",
"546 458 QCURVE SMOOTH",
"654 458 OFFCURVE",
"654 331 QCURVE SMOOTH",
"654 255 OFFCURVE",
"610 131 OFFCURVE",
"531 59 OFFCURVE",
"479 59 QCURVE SMOOTH",
"457 59 OFFCURVE",
"418 69 OFFCURVE",
"405 77 QCURVE"
);
},
{
closed = 1;
nodes = (
"332 83 LINE",
"310 73 OFFCURVE",
"263 58 OFFCURVE",
"246 58 QCURVE SMOOTH",
"138 58 OFFCURVE",
"138 185 QCURVE SMOOTH",
"138 261 OFFCURVE",
"182 385 OFFCURVE",
"261 457 OFFCURVE",
"313 457 QCURVE SMOOTH",
"335 457 OFFCURVE",
"374 447 OFFCURVE",
"387 439 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
47 52 106 49 47 15 114 17 23 106 20 17 1 114 72 31 65 106 31 10 6 114 59 2 78 106 39 2 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 750;
}
);
leftKerningGroup = "a-cy";
note = uni0444;
rightKerningGroup = "be-cy";
unicode = 0444;
},
{
glyphname = "ha-cy";
layers = (
{
components = (
{
name = x;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 491;
}
);
leftKerningGroup = "ha-cy";
note = uni0445;
rightKerningGroup = "ka-cy";
unicode = 0445;
},
{
glyphname = "che-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"350 212 OFFCURVE",
"356 218 QCURVE",
"362 223 OFFCURVE",
"374 232 OFFCURVE",
"377 232 QCURVE SMOOTH",
"382 232 OFFCURVE",
"382 226 QCURVE SMOOTH",
"382 221 OFFCURVE",
"377 199 OFFCURVE",
"374 186 QCURVE SMOOTH",
"346 57 LINE SMOOTH",
"345 53 OFFCURVE",
"340 26 OFFCURVE",
"340 18 QCURVE SMOOTH",
"340 9 OFFCURVE",
"350 0 OFFCURVE",
"364 0 QCURVE SMOOTH",
"410 0 LINE",
"492 458 LINE",
"493 462 OFFCURVE",
"498 489 OFFCURVE",
"498 497 QCURVE SMOOTH",
"498 506 OFFCURVE",
"488 515 OFFCURVE",
"474 515 QCURVE SMOOTH",
"428 515 LINE",
"395 328 LINE SMOOTH",
"393 318 OFFCURVE",
"387 304 OFFCURVE",
"380 297 QCURVE SMOOTH",
"359 276 OFFCURVE",
"282 226 OFFCURVE",
"243 226 QCURVE SMOOTH",
"195 226 OFFCURVE",
"147 266 OFFCURVE",
"147 305 QCURVE SMOOTH",
"147 322 OFFCURVE",
"154 363 OFFCURVE",
"155 368 QCURVE SMOOTH",
"171 458 LINE",
"172 462 OFFCURVE",
"177 489 OFFCURVE",
"177 497 QCURVE SMOOTH",
"177 506 OFFCURVE",
"167 515 OFFCURVE",
"153 515 QCURVE SMOOTH",
"107 515 LINE",
"74 331 LINE SMOOTH",
"68 297 OFFCURVE",
"68 279 QCURVE SMOOTH",
"68 238 OFFCURVE",
"107 185 OFFCURVE",
"171 160 OFFCURVE",
"209 160 QCURVE SMOOTH",
"252 160 OFFCURVE",
"324 192 OFFCURVE",
"344 207 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
42 39 13 34 31 9 2 23 106 2 2 39 9 6 114 39 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 517;
}
);
leftKerningGroup = "ii-cy";
note = uni0447;
unicode = 0447;
},
{
glyphname = "tse-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"396 58 OFFCURVE",
"400 52 OFFCURVE",
"401 44 QCURVE SMOOTH",
"405 11 OFFCURVE",
"447 4 QCURVE",
"420 -111 LINE",
"419 -117 OFFCURVE",
"415 -135 QCURVE SMOOTH",
"411 -153 OFFCURVE",
"411 -160 QCURVE SMOOTH",
"411 -169 OFFCURVE",
"421 -178 OFFCURVE",
"435 -178 QCURVE SMOOTH",
"473 -178 LINE",
"519 -6 LINE SMOOTH",
"522 6 OFFCURVE",
"531 44 OFFCURVE",
"531 51 QCURVE SMOOTH",
"531 60 OFFCURVE",
"521 69 OFFCURVE",
"507 69 QCURVE SMOOTH",
"491 69 OFFCURVE",
"478 71 OFFCURVE",
"471 81 OFFCURVE",
"471 93 QCURVE SMOOTH",
"471 103 OFFCURVE",
"474 122 QCURVE SMOOTH",
"477 140 OFFCURVE",
"478 147 QCURVE SMOOTH",
"533 458 LINE",
"534 462 OFFCURVE",
"539 489 OFFCURVE",
"539 497 QCURVE SMOOTH",
"539 506 OFFCURVE",
"529 515 OFFCURVE",
"515 515 QCURVE SMOOTH",
"469 515 LINE",
"405 156 LINE SMOOTH",
"403 146 OFFCURVE",
"397 132 OFFCURVE",
"390 125 QCURVE SMOOTH",
"368 103 OFFCURVE",
"290 54 OFFCURVE",
"247 54 QCURVE SMOOTH",
"194 54 OFFCURVE",
"144 94 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH",
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH",
"134 515 LINE",
"71 159 LINE SMOOTH",
"65 125 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"149 -12 OFFCURVE",
"213 -12 QCURVE SMOOTH",
"258 -12 OFFCURVE",
"332 20 OFFCURVE",
"354 35 QCURVE",
"358 38 OFFCURVE",
"386 58 OFFCURVE",
"391 58 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
64 48 106 64 10 114 59 56 14 114 36 33 15 11 6 114 5 25 106 5 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 559;
}
);
leftKerningGroup = "ii-cy";
note = uni0446;
unicode = 0446;
},
{
glyphname = "sha-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"199 458 LINE",
"200 462 OFFCURVE",
"205 489 OFFCURVE",
"205 497 QCURVE SMOOTH",
"205 506 OFFCURVE",
"195 515 OFFCURVE",
"181 515 QCURVE SMOOTH",
"135 515 LINE",
"71 159 LINE SMOOTH",
"65 125 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"143 -12 OFFCURVE",
"205 -12 QCURVE SMOOTH",
"250 -12 OFFCURVE",
"322 19 OFFCURVE",
"344 35 QCURVE",
"350 39 OFFCURVE",
"359 46 QCURVE SMOOTH",
"367 52 OFFCURVE",
"385 65 OFFCURVE",
"389 65 QCURVE SMOOTH",
"392 65 OFFCURVE",
"397 61 OFFCURVE",
"403 51 OFFCURVE",
"404 49 QCURVE",
"417 26 OFFCURVE",
"471 -12 OFFCURVE",
"529 -12 QCURVE SMOOTH",
"574 -12 OFFCURVE",
"646 19 OFFCURVE",
"668 35 QCURVE SMOOTH",
"672 38 OFFCURVE",
"700 58 OFFCURVE",
"705 58 QCURVE SMOOTH",
"710 58 OFFCURVE",
"714 52 OFFCURVE",
"714 44 QCURVE SMOOTH",
"714 23 LINE SMOOTH",
"714 11 OFFCURVE",
"724 0 OFFCURVE",
"735 0 QCURVE SMOOTH",
"783 0 LINE",
"783 37 LINE SMOOTH",
"783 68 OFFCURVE",
"787 118 OFFCURVE",
"792 147 QCURVE SMOOTH",
"847 458 LINE",
"848 462 OFFCURVE",
"853 489 OFFCURVE",
"853 497 QCURVE SMOOTH",
"853 506 OFFCURVE",
"843 515 OFFCURVE",
"829 515 QCURVE SMOOTH",
"783 515 LINE",
"720 159 LINE SMOOTH",
"718 149 OFFCURVE",
"712 135 OFFCURVE",
"705 128 QCURVE SMOOTH",
"681 103 OFFCURVE",
"606 54 OFFCURVE",
"563 54 QCURVE SMOOTH",
"513 54 OFFCURVE",
"468 93 OFFCURVE",
"468 133 QCURVE SMOOTH",
"468 150 OFFCURVE",
"475 191 OFFCURVE",
"476 196 QCURVE SMOOTH",
"523 458 LINE",
"524 462 OFFCURVE",
"529 489 OFFCURVE",
"529 497 QCURVE SMOOTH",
"529 506 OFFCURVE",
"519 515 OFFCURVE",
"505 515 QCURVE SMOOTH",
"459 515 LINE",
"396 159 LINE SMOOTH",
"394 149 OFFCURVE",
"388 135 OFFCURVE",
"381 128 QCURVE SMOOTH",
"357 103 OFFCURVE",
"282 54 OFFCURVE",
"239 54 QCURVE SMOOTH",
"189 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
16 37 84 13 34 80 74 5 106 59 26 106 59 74 46 10 114 80 6 114 74 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 863;
}
);
leftKerningGroup = "ii-cy";
note = uni0448;
unicode = 0448;
},
{
glyphname = "shcha-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"805 69 OFFCURVE",
"792 71 OFFCURVE",
"785 81 OFFCURVE",
"785 93 QCURVE SMOOTH",
"785 103 OFFCURVE",
"788 122 QCURVE SMOOTH",
"791 140 OFFCURVE",
"792 147 QCURVE SMOOTH",
"847 458 LINE",
"848 462 OFFCURVE",
"853 489 OFFCURVE",
"853 497 QCURVE SMOOTH",
"853 506 OFFCURVE",
"843 515 OFFCURVE",
"829 515 QCURVE SMOOTH",
"783 515 LINE",
"720 159 LINE SMOOTH",
"718 149 OFFCURVE",
"712 135 OFFCURVE",
"705 128 QCURVE SMOOTH",
"681 103 OFFCURVE",
"606 54 OFFCURVE",
"563 54 QCURVE SMOOTH",
"513 54 OFFCURVE",
"468 93 OFFCURVE",
"468 133 QCURVE SMOOTH",
"468 150 OFFCURVE",
"475 191 OFFCURVE",
"476 196 QCURVE SMOOTH",
"523 458 LINE",
"524 462 OFFCURVE",
"529 489 OFFCURVE",
"529 497 QCURVE SMOOTH",
"529 506 OFFCURVE",
"519 515 OFFCURVE",
"505 515 QCURVE SMOOTH",
"459 515 LINE",
"396 159 LINE SMOOTH",
"394 149 OFFCURVE",
"388 135 OFFCURVE",
"381 128 QCURVE SMOOTH",
"357 103 OFFCURVE",
"282 54 OFFCURVE",
"239 54 QCURVE SMOOTH",
"189 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH",
"199 458 LINE",
"200 462 OFFCURVE",
"205 489 OFFCURVE",
"205 497 QCURVE SMOOTH",
"205 506 OFFCURVE",
"195 515 OFFCURVE",
"181 515 QCURVE SMOOTH",
"135 515 LINE",
"71 159 LINE SMOOTH",
"65 125 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"143 -12 OFFCURVE",
"205 -12 QCURVE SMOOTH",
"250 -12 OFFCURVE",
"322 19 OFFCURVE",
"344 35 QCURVE",
"350 39 OFFCURVE",
"359 46 QCURVE SMOOTH",
"367 52 OFFCURVE",
"385 65 OFFCURVE",
"389 65 QCURVE SMOOTH",
"392 65 OFFCURVE",
"397 61 OFFCURVE",
"403 51 OFFCURVE",
"404 49 QCURVE",
"417 26 OFFCURVE",
"471 -12 OFFCURVE",
"529 -12 QCURVE SMOOTH",
"574 -12 OFFCURVE",
"646 19 OFFCURVE",
"668 35 QCURVE SMOOTH",
"672 38 OFFCURVE",
"700 58 OFFCURVE",
"705 58 QCURVE SMOOTH",
"710 58 OFFCURVE",
"714 52 OFFCURVE",
"715 44 QCURVE SMOOTH",
"719 11 OFFCURVE",
"761 4 QCURVE",
"734 -111 LINE",
"733 -117 OFFCURVE",
"729 -135 QCURVE SMOOTH",
"725 -153 OFFCURVE",
"725 -160 QCURVE SMOOTH",
"725 -169 OFFCURVE",
"735 -178 OFFCURVE",
"749 -178 QCURVE SMOOTH",
"787 -178 LINE",
"833 -6 LINE SMOOTH",
"836 6 OFFCURVE",
"845 44 OFFCURVE",
"845 51 QCURVE SMOOTH",
"845 60 OFFCURVE",
"835 69 OFFCURVE",
"821 69 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
93 90 72 69 51 47 6 114 26 82 106 26 41 61 106 41 11 114 15 105 106 15 10 114 10 7 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 873;
}
);
leftKerningGroup = "ii-cy";
note = uni0449;
unicode = 0449;
},
{
glyphname = "dzhe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH",
"134 515 LINE",
"77 191 LINE SMOOTH",
"69 150 OFFCURVE",
"67 132 QCURVE SMOOTH",
"65 114 OFFCURVE",
"65 107 QCURVE SMOOTH",
"65 47 OFFCURVE",
"149 -12 OFFCURVE",
"213 -12 QCURVE SMOOTH",
"284 -12 OFFCURVE",
"354 35 QCURVE",
"358 38 OFFCURVE",
"386 58 OFFCURVE",
"391 58 QCURVE SMOOTH",
"396 58 OFFCURVE",
"400 52 OFFCURVE",
"400 44 QCURVE SMOOTH",
"400 23 LINE SMOOTH",
"400 11 OFFCURVE",
"410 0 OFFCURVE",
"421 0 QCURVE SMOOTH",
"469 0 LINE",
"469 37 LINE SMOOTH",
"469 71 OFFCURVE",
"476 135 OFFCURVE",
"484 182 QCURVE SMOOTH",
"533 458 LINE",
"534 462 OFFCURVE",
"539 489 OFFCURVE",
"539 497 QCURVE SMOOTH",
"539 506 OFFCURVE",
"529 515 OFFCURVE",
"515 515 QCURVE SMOOTH",
"469 515 LINE",
"411 189 LINE SMOOTH",
"410 182 OFFCURVE",
"409 170 QCURVE",
"407 157 OFFCURVE",
"399 134 OFFCURVE",
"390 125 QCURVE SMOOTH",
"368 103 OFFCURVE",
"290 54 OFFCURVE",
"247 54 QCURVE SMOOTH",
"194 54 OFFCURVE",
"144 93 OFFCURVE",
"144 133 QCURVE SMOOTH",
"144 150 OFFCURVE",
"151 191 OFFCURVE",
"152 196 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"256 -221 LINE",
"277 -120 LINE SMOOTH",
"280 -105 OFFCURVE",
"284 -87 QCURVE SMOOTH",
"288 -68 OFFCURVE",
"288 -60 QCURVE SMOOTH",
"288 -51 OFFCURVE",
"278 -42 OFFCURVE",
"264 -42 QCURVE SMOOTH",
"216 -42 LINE",
"200 -154 LINE SMOOTH",
"199 -160 OFFCURVE",
"194 -196 OFFCURVE",
"194 -203 QCURVE SMOOTH",
"194 -212 OFFCURVE",
"204 -221 OFFCURVE",
"218 -221 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
64 64 73 59 56 15 114 51 18 15 47 6 114 39 5 106 39 11 114 27 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
leftKerningGroup = "ii-cy";
note = uni045F;
unicode = 045F;
},
{
glyphname = "softsign-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"197 458 LINE",
"198 462 OFFCURVE",
"203 489 OFFCURVE",
"203 497 QCURVE SMOOTH",
"203 506 OFFCURVE",
"193 515 OFFCURVE",
"179 515 QCURVE SMOOTH",
"133 515 LINE",
"58 78 LINE SMOOTH",
"53 47 OFFCURVE",
"53 42 QCURVE SMOOTH",
"53 31 OFFCURVE",
"62 21 OFFCURVE",
"74 15 QCURVE",
"100 4 OFFCURVE",
"183 -12 OFFCURVE",
"233 -12 QCURVE SMOOTH",
"312 -12 OFFCURVE",
"421 54 OFFCURVE",
"474 154 OFFCURVE",
"474 203 QCURVE SMOOTH",
"474 239 OFFCURVE",
"443 302 OFFCURVE",
"378 341 OFFCURVE",
"330 341 QCURVE SMOOTH",
"296 341 OFFCURVE",
"236 322 OFFCURVE",
"220 311 QCURVE",
"204 299 OFFCURVE",
"202 298 QCURVE",
"196 294 OFFCURVE",
"190 289 QCURVE",
"184 283 OFFCURVE",
"170 273 OFFCURVE",
"167 273 QCURVE SMOOTH",
"162 273 OFFCURVE",
"162 279 QCURVE SMOOTH",
"162 283 OFFCURVE",
"166 295 QCURVE",
"169 307 OFFCURVE",
"172 322 QCURVE SMOOTH",
"184 390 LINE"
);
},
{
closed = 1;
nodes = (
"148 182 OFFCURVE",
"153 194 OFFCURVE",
"160 201 QCURVE SMOOTH",
"186 227 OFFCURVE",
"258 277 OFFCURVE",
"297 277 QCURVE SMOOTH",
"344 277 OFFCURVE",
"394 228 OFFCURVE",
"394 183 QCURVE SMOOTH",
"394 152 OFFCURVE",
"361 91 OFFCURVE",
"293 51 OFFCURVE",
"244 51 QCURVE SMOOTH",
"201 51 OFFCURVE",
"150 62 OFFCURVE",
"131 76 OFFCURVE",
"131 81 QCURVE SMOOTH",
"131 84 OFFCURVE",
"134 101 QCURVE SMOOTH",
"137 118 OFFCURVE",
"146 172 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
38 34 25 49 106 17 56 106 17 17 25 34 6 114 25 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 481;
}
);
leftKerningGroup = "ve-cy";
note = uni044C;
unicode = 044C;
},
{
glyphname = "hardsign-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"60 454 LINE",
"218 454 LINE",
"153 72 LINE SMOOTH",
"149 51 OFFCURVE",
"149 42 QCURVE SMOOTH",
"149 31 OFFCURVE",
"158 21 OFFCURVE",
"170 15 QCURVE",
"196 4 OFFCURVE",
"279 -12 OFFCURVE",
"329 -12 QCURVE SMOOTH",
"408 -12 OFFCURVE",
"517 54 OFFCURVE",
"570 154 OFFCURVE",
"570 203 QCURVE SMOOTH",
"570 239 OFFCURVE",
"539 302 OFFCURVE",
"474 341 OFFCURVE",
"426 341 QCURVE SMOOTH",
"392 341 OFFCURVE",
"332 322 OFFCURVE",
"316 311 QCURVE",
"300 299 OFFCURVE",
"298 298 QCURVE",
"292 294 OFFCURVE",
"286 289 QCURVE",
"280 283 OFFCURVE",
"266 273 OFFCURVE",
"263 273 QCURVE SMOOTH",
"258 273 OFFCURVE",
"258 279 QCURVE SMOOTH",
"258 283 OFFCURVE",
"262 295 QCURVE",
"265 307 OFFCURVE",
"268 322 QCURVE SMOOTH",
"293 458 LINE",
"294 462 OFFCURVE",
"299 489 OFFCURVE",
"299 497 QCURVE SMOOTH",
"299 506 OFFCURVE",
"289 515 OFFCURVE",
"275 515 QCURVE SMOOTH",
"71 515 LINE"
);
},
{
closed = 1;
nodes = (
"244 182 OFFCURVE",
"249 194 OFFCURVE",
"256 201 QCURVE SMOOTH",
"282 227 OFFCURVE",
"354 277 OFFCURVE",
"393 277 QCURVE SMOOTH",
"440 277 OFFCURVE",
"490 228 OFFCURVE",
"490 183 QCURVE SMOOTH",
"490 152 OFFCURVE",
"457 91 OFFCURVE",
"389 51 OFFCURVE",
"340 51 QCURVE SMOOTH",
"297 51 OFFCURVE",
"246 62 OFFCURVE",
"227 76 OFFCURVE",
"227 81 QCURVE SMOOTH",
"227 84 OFFCURVE",
"230 101 QCURVE SMOOTH",
"233 118 OFFCURVE",
"242 172 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
24 57 106 24 24 0 32 50 106 32 11 114 0 42 106 0 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 577;
}
);
leftKerningGroup = "hardsign-cy";
note = uni044A;
unicode = 044A;
},
{
glyphname = "yeru-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"202 458 LINE",
"203 462 OFFCURVE",
"208 489 OFFCURVE",
"208 497 QCURVE SMOOTH",
"208 506 OFFCURVE",
"198 515 OFFCURVE",
"184 515 QCURVE SMOOTH",
"138 515 LINE",
"63 78 LINE SMOOTH",
"58 47 OFFCURVE",
"58 42 QCURVE SMOOTH",
"58 31 OFFCURVE",
"67 21 OFFCURVE",
"79 15 QCURVE",
"105 4 OFFCURVE",
"188 -12 OFFCURVE",
"238 -12 QCURVE SMOOTH",
"317 -12 OFFCURVE",
"426 54 OFFCURVE",
"479 154 OFFCURVE",
"479 203 QCURVE SMOOTH",
"479 239 OFFCURVE",
"448 302 OFFCURVE",
"383 341 OFFCURVE",
"335 341 QCURVE SMOOTH",
"301 341 OFFCURVE",
"241 322 OFFCURVE",
"225 311 QCURVE",
"209 299 OFFCURVE",
"207 298 QCURVE",
"201 294 OFFCURVE",
"195 289 QCURVE",
"189 283 OFFCURVE",
"175 273 OFFCURVE",
"172 273 QCURVE SMOOTH",
"167 273 OFFCURVE",
"167 279 QCURVE SMOOTH",
"167 283 OFFCURVE",
"171 295 QCURVE",
"174 307 OFFCURVE",
"177 322 QCURVE SMOOTH",
"189 390 LINE"
);
},
{
closed = 1;
nodes = (
"589 515 LINE",
"508 57 LINE",
"507 53 OFFCURVE",
"502 26 OFFCURVE",
"502 18 QCURVE SMOOTH",
"502 9 OFFCURVE",
"512 0 OFFCURVE",
"526 0 QCURVE SMOOTH",
"572 0 LINE",
"653 458 LINE",
"654 462 OFFCURVE",
"659 489 OFFCURVE",
"659 497 QCURVE SMOOTH",
"659 506 OFFCURVE",
"649 515 OFFCURVE",
"635 515 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"153 182 OFFCURVE",
"158 194 OFFCURVE",
"165 201 QCURVE SMOOTH",
"191 227 OFFCURVE",
"263 277 OFFCURVE",
"302 277 QCURVE SMOOTH",
"349 277 OFFCURVE",
"399 228 OFFCURVE",
"399 183 QCURVE SMOOTH",
"399 152 OFFCURVE",
"366 91 OFFCURVE",
"298 51 OFFCURVE",
"249 51 QCURVE SMOOTH",
"206 51 OFFCURVE",
"155 62 OFFCURVE",
"136 76 OFFCURVE",
"136 81 QCURVE SMOOTH",
"136 84 OFFCURVE",
"139 101 QCURVE SMOOTH",
"142 118 OFFCURVE",
"151 172 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
50 10 114 17 72 106 17 17 25 57 34 6 114 25 65 106 25 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 671;
}
);
leftKerningGroup = "ve-cy";
note = uni044B;
unicode = 044B;
},
{
glyphname = "lje-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"454 456 LINE",
"390 84 LINE SMOOTH",
"384 46 OFFCURVE",
"384 41 QCURVE SMOOTH",
"384 31 OFFCURVE",
"393 21 OFFCURVE",
"405 15 QCURVE",
"431 4 OFFCURVE",
"514 -12 OFFCURVE",
"564 -12 QCURVE SMOOTH",
"643 -12 OFFCURVE",
"752 54 OFFCURVE",
"805 154 OFFCURVE",
"805 203 QCURVE SMOOTH",
"805 239 OFFCURVE",
"774 302 OFFCURVE",
"709 341 OFFCURVE",
"661 341 QCURVE SMOOTH",
"614 341 OFFCURVE",
"554 314 OFFCURVE",
"533 298 QCURVE",
"527 294 OFFCURVE",
"521 289 QCURVE",
"515 283 OFFCURVE",
"501 273 OFFCURVE",
"498 273 QCURVE SMOOTH",
"493 273 OFFCURVE",
"493 279 QCURVE",
"495 291 OFFCURVE",
"499 309 QCURVE",
"502 326 OFFCURVE",
"504 338 QCURVE",
"521 417 OFFCURVE",
"528 458 QCURVE",
"529 462 OFFCURVE",
"534 489 OFFCURVE",
"534 497 QCURVE SMOOTH",
"534 506 OFFCURVE",
"524 515 OFFCURVE",
"510 515 QCURVE SMOOTH",
"201 515 LINE",
"183 412 OFFCURVE",
"137 200 OFFCURVE",
"116 127 QCURVE SMOOTH",
"107 97 OFFCURVE",
"93 67 OFFCURVE",
"68 51 OFFCURVE",
"46 51 QCURVE SMOOTH",
"27 51 OFFCURVE",
"3 59 QCURVE",
"-12 3 LINE",
"22 -7 OFFCURVE",
"55 -7 QCURVE SMOOTH",
"93 -7 OFFCURVE",
"141 24 OFFCURVE",
"170 78 OFFCURVE",
"182 119 QCURVE SMOOTH",
"197 172 OFFCURVE",
"239 358 OFFCURVE",
"259 456 QCURVE"
);
},
{
closed = 1;
nodes = (
"479 182 OFFCURVE",
"484 194 OFFCURVE",
"491 201 QCURVE SMOOTH",
"517 227 OFFCURVE",
"589 277 OFFCURVE",
"628 277 QCURVE SMOOTH",
"675 277 OFFCURVE",
"725 228 OFFCURVE",
"725 183 QCURVE SMOOTH",
"725 152 OFFCURVE",
"692 91 OFFCURVE",
"624 51 OFFCURVE",
"575 51 QCURVE SMOOTH",
"532 51 OFFCURVE",
"481 62 OFFCURVE",
"462 76 OFFCURVE",
"462 81 QCURVE SMOOTH",
"462 84 OFFCURVE",
"465 101 QCURVE SMOOTH",
"468 118 OFFCURVE",
"477 172 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
41 74 106 41 41 18 49 67 106 49 11 114 18 59 106 22 18 6 114 6 11 106 6 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 812;
}
);
leftKerningGroup = "el-cy";
note = uni0459;
unicode = 0459;
},
{
glyphname = "nje-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"134 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"160 233 LINE",
"436 233 LINE",
"405 53 OFFCURVE",
"405 40 QCURVE SMOOTH",
"405 31 OFFCURVE",
"414 21 OFFCURVE",
"426 15 QCURVE",
"452 4 OFFCURVE",
"535 -12 OFFCURVE",
"585 -12 QCURVE SMOOTH",
"664 -12 OFFCURVE",
"773 54 OFFCURVE",
"826 154 OFFCURVE",
"826 203 QCURVE SMOOTH",
"826 239 OFFCURVE",
"795 302 OFFCURVE",
"730 341 OFFCURVE",
"682 341 QCURVE SMOOTH",
"649 341 OFFCURVE",
"592 323 OFFCURVE",
"557 300 OFFCURVE",
"554 298 QCURVE SMOOTH",
"548 294 OFFCURVE",
"542 289 QCURVE",
"536 283 OFFCURVE",
"522 273 OFFCURVE",
"519 273 QCURVE SMOOTH",
"514 273 OFFCURVE",
"514 279 QCURVE",
"536 390 LINE",
"549 458 LINE",
"550 462 OFFCURVE",
"555 489 OFFCURVE",
"555 497 QCURVE SMOOTH",
"555 506 OFFCURVE",
"545 515 OFFCURVE",
"531 515 QCURVE SMOOTH",
"485 515 LINE",
"447 293 LINE",
"170 293 LINE",
"198 458 LINE",
"199 462 OFFCURVE",
"204 489 OFFCURVE",
"204 497 QCURVE SMOOTH",
"204 506 OFFCURVE",
"194 515 OFFCURVE",
"180 515 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"500 182 OFFCURVE",
"505 194 OFFCURVE",
"512 201 QCURVE SMOOTH",
"538 227 OFFCURVE",
"610 277 OFFCURVE",
"649 277 QCURVE SMOOTH",
"696 277 OFFCURVE",
"746 228 OFFCURVE",
"746 183 QCURVE SMOOTH",
"746 152 OFFCURVE",
"713 91 OFFCURVE",
"645 51 OFFCURVE",
"596 51 QCURVE SMOOTH",
"553 51 OFFCURVE",
"502 62 OFFCURVE",
"483 76 OFFCURVE",
"483 81 QCURVE SMOOTH",
"483 84 OFFCURVE",
"486 101 QCURVE SMOOTH",
"489 118 OFFCURVE",
"498 172 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
3 13 10 55 37 63 106 46 7 106 46 46 37 55 29 70 106 29 29 37 55 48 10 114 55 6 114 37 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 833;
}
);
leftKerningGroup = "ve-cy";
note = uni045A;
unicode = 045A;
},
{
glyphname = "dze-cy";
layers = (
{
components = (
{
name = s;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 425;
}
);
leftKerningGroup = "dze-cy";
note = uni0455;
unicode = 0455;
},
{
glyphname = "e-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"369 465 OFFCURVE",
"402 453 OFFCURVE",
"415 445 QCURVE",
"427 437 OFFCURVE",
"431 437 QCURVE SMOOTH",
"436 437 OFFCURVE",
"445 446 OFFCURVE",
"452 458 QCURVE SMOOTH",
"480 505 LINE",
"452 515 OFFCURVE",
"393 527 OFFCURVE",
"351 527 QCURVE SMOOTH",
"259 527 OFFCURVE",
"127 428 OFFCURVE",
"60 271 OFFCURVE",
"60 185 QCURVE SMOOTH",
"60 79 OFFCURVE",
"160 -12 OFFCURVE",
"244 -12 QCURVE SMOOTH",
"291 -12 OFFCURVE",
"380 14 OFFCURVE",
"412 32 QCURVE",
"391 85 LINE",
"366 70 OFFCURVE",
"306 50 OFFCURVE",
"279 50 QCURVE SMOOTH",
"207 50 OFFCURVE",
"139 119 OFFCURVE",
"139 187 QCURVE SMOOTH",
"139 218 OFFCURVE",
"141 234 QCURVE",
"376 234 LINE",
"387 295 LINE",
"152 295 LINE",
"165 344 OFFCURVE",
"214 420 OFFCURVE",
"251 442 QCURVE SMOOTH",
"291 465 OFFCURVE",
"343 465 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
19 12 106 7 4 106 7 7 19 26 38 106 26 7 114 19 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 449;
}
);
leftKerningGroup = "a-cy";
note = uni0454;
unicode = 0454;
},
{
glyphname = "ereversed-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"444 433 OFFCURVE",
"350 527 OFFCURVE",
"256 527 QCURVE SMOOTH",
"218 527 OFFCURVE",
"141 511 OFFCURVE",
"114 500 QCURVE",
"120 458 LINE SMOOTH",
"122 446 OFFCURVE",
"126 438 OFFCURVE",
"131 438 QCURVE SMOOTH",
"138 438 OFFCURVE",
"156 446 QCURVE SMOOTH",
"178 455 OFFCURVE",
"216 465 OFFCURVE",
"238 465 QCURVE SMOOTH",
"298 465 OFFCURVE",
"363 399 OFFCURVE",
"363 330 QCURVE SMOOTH",
"363 315 OFFCURVE",
"361 295 QCURVE",
"128 295 LINE",
"117 234 LINE",
"352 234 LINE",
"331 140 OFFCURVE",
"234 50 OFFCURVE",
"153 50 QCURVE SMOOTH",
"122 50 OFFCURVE",
"60 63 OFFCURVE",
"37 73 QCURVE",
"15 16 LINE",
"41 4 OFFCURVE",
"111 -12 OFFCURVE",
"146 -12 QCURVE SMOOTH",
"244 -12 OFFCURVE",
"378 90 OFFCURVE",
"444 252 OFFCURVE",
"444 343 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
3 10 106 14 15 106 14 14 3 33 21 106 33 7 114 3 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 456;
}
);
leftKerningGroup = "ereversed-cy";
note = uni044D;
rightKerningGroup = "be-cy";
unicode = 044D;
},
{
glyphname = "i-cy";
layers = (
{
components = (
{
name = i;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
leftKerningGroup = "i-cy";
note = uni0456;
unicode = 0456;
},
{
glyphname = "yi-cy";
layers = (
{
components = (
{
name = idotless;
},
{
name = dieresis;
transform = "{1, 0, 0, 1, -9, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 219;
}
);
note = uni0457;
unicode = 0457;
},
{
glyphname = "je-cy";
layers = (
{
components = (
{
name = j;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 229;
}
);
leftKerningGroup = "je-cy";
note = uni0458;
unicode = 0458;
},
{
glyphname = "tshe-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"74 585 LINE",
"149 585 LINE",
"55 51 LINE",
"54 47 OFFCURVE",
"50 25 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"182 349 LINE SMOOTH",
"184 359 OFFCURVE",
"190 373 OFFCURVE",
"197 380 QCURVE SMOOTH",
"218 401 OFFCURVE",
"300 451 OFFCURVE",
"345 451 QCURVE SMOOTH",
"450 451 OFFCURVE",
"450 372 QCURVE SMOOTH",
"450 355 OFFCURVE",
"443 314 OFFCURVE",
"442 309 QCURVE SMOOTH",
"396 51 LINE",
"395 47 OFFCURVE",
"391 25 OFFCURVE",
"391 18 QCURVE SMOOTH",
"391 9 OFFCURVE",
"401 0 OFFCURVE",
"415 0 QCURVE SMOOTH",
"461 0 LINE",
"523 346 LINE SMOOTH",
"529 380 OFFCURVE",
"529 398 QCURVE SMOOTH",
"529 439 OFFCURVE",
"488 492 OFFCURVE",
"421 517 OFFCURVE",
"379 517 QCURVE SMOOTH",
"329 517 OFFCURVE",
"252 483 OFFCURVE",
"227 465 QCURVE",
"224 463 OFFCURVE",
"220 460 QCURVE SMOOTH",
"216 457 OFFCURVE",
"208 452 OFFCURVE",
"204 452 QCURVE SMOOTH",
"199 452 OFFCURVE",
"199 458 QCURVE SMOOTH",
"199 464 OFFCURVE",
"202 474 QCURVE",
"204 484 OFFCURVE",
"206 495 QCURVE SMOOTH",
"223 585 LINE",
"420 585 LINE",
"430 643 LINE",
"233 643 LINE",
"238 670 LINE",
"239 674 OFFCURVE",
"244 701 OFFCURVE",
"244 709 QCURVE SMOOTH",
"244 718 OFFCURVE",
"234 727 OFFCURVE",
"220 727 QCURVE SMOOTH",
"174 727 LINE",
"159 643 LINE",
"84 643 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
59 39 36 56 10 114 64 10 13 106 0 10 10 2 28 48 106 28 6 114 6 2 0 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
note = uni045B;
unicode = 045B;
},
{
glyphname = "iu-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"161 233 LINE",
"286 233 LINE",
"282 206 OFFCURVE",
"282 176 QCURVE SMOOTH",
"282 84 OFFCURVE",
"375 -12 OFFCURVE",
"465 -12 QCURVE SMOOTH",
"557 -12 OFFCURVE",
"682 93 OFFCURVE",
"742 255 OFFCURVE",
"742 341 QCURVE SMOOTH",
"742 433 OFFCURVE",
"650 528 OFFCURVE",
"560 528 QCURVE SMOOTH",
"461 528 OFFCURVE",
"327 405 OFFCURVE",
"297 293 QCURVE",
"171 293 LINE",
"201 458 LINE",
"202 462 OFFCURVE",
"207 489 OFFCURVE",
"207 497 QCURVE SMOOTH",
"207 506 OFFCURVE",
"197 515 OFFCURVE",
"183 515 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"418 49 OFFCURVE",
"362 115 OFFCURVE",
"362 181 QCURVE SMOOTH",
"362 248 OFFCURVE",
"400 379 OFFCURVE",
"484 467 OFFCURVE",
"549 467 QCURVE SMOOTH",
"606 467 OFFCURVE",
"663 400 OFFCURVE",
"663 335 QCURVE SMOOTH",
"663 269 OFFCURVE",
"625 137 OFFCURVE",
"540 49 OFFCURVE",
"475 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
24 7 106 24 24 26 33 6 114 26 10 114 9 21 11 18 47 106 18 11 114 11 40 106 11 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 758;
}
);
leftKerningGroup = "ve-cy";
note = uni044E;
rightKerningGroup = "be-cy";
unicode = 044E;
},
{
glyphname = "ia-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"472 520 OFFCURVE",
"373 520 QCURVE SMOOTH",
"256 520 OFFCURVE",
"121 425 OFFCURVE",
"121 322 QCURVE SMOOTH",
"121 267 OFFCURVE",
"162 248 QCURVE",
"167 246 OFFCURVE",
"174 240 OFFCURVE",
"174 237 QCURVE SMOOTH",
"174 233 OFFCURVE",
"167 227 OFFCURVE",
"158 223 QCURVE SMOOTH",
"134 213 OFFCURVE",
"101 175 OFFCURVE",
"92 143 QCURVE SMOOTH",
"52 0 LINE",
"102 0 LINE SMOOTH",
"116 0 OFFCURVE",
"130 12 OFFCURVE",
"134 25 QCURVE",
"164 138 LINE SMOOTH",
"173 173 OFFCURVE",
"215 205 OFFCURVE",
"249 205 QCURVE SMOOTH",
"407 205 LINE",
"381 57 LINE",
"380 53 OFFCURVE",
"375 26 OFFCURVE",
"375 18 QCURVE SMOOTH",
"375 9 OFFCURVE",
"385 0 OFFCURVE",
"399 0 QCURVE SMOOTH",
"445 0 LINE",
"526 460 LINE",
"527 464 OFFCURVE",
"532 491 OFFCURVE",
"532 499 QCURVE SMOOTH",
"532 507 OFFCURVE",
"522 516 OFFCURVE",
"508 517 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"418 267 LINE",
"268 267 LINE SMOOTH",
"248 267 OFFCURVE",
"227 270 OFFCURVE",
"216 278 OFFCURVE",
"212 286 QCURVE",
"200 308 OFFCURVE",
"200 334 QCURVE SMOOTH",
"200 383 OFFCURVE",
"241 438 OFFCURVE",
"310 458 OFFCURVE",
"359 458 QCURVE SMOOTH",
"395 458 OFFCURVE",
"422 457 QCURVE SMOOTH",
"449 456 OFFCURVE",
"451 456 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
30 15 54 106 15 15 23 38 44 106 40 38 6 114 10 7 23 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 544;
}
);
leftKerningGroup = "ia-cy";
note = uni044F;
unicode = 044F;
},
{
glyphname = "dje-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"523 346 LINE SMOOTH",
"529 380 OFFCURVE",
"529 398 QCURVE SMOOTH",
"529 439 OFFCURVE",
"488 492 OFFCURVE",
"421 517 OFFCURVE",
"379 517 QCURVE SMOOTH",
"329 517 OFFCURVE",
"252 483 OFFCURVE",
"227 465 QCURVE",
"224 463 OFFCURVE",
"220 460 QCURVE SMOOTH",
"216 457 OFFCURVE",
"208 452 OFFCURVE",
"204 452 QCURVE SMOOTH",
"199 452 OFFCURVE",
"199 458 QCURVE SMOOTH",
"199 464 OFFCURVE",
"202 474 QCURVE",
"204 484 OFFCURVE",
"206 495 QCURVE SMOOTH",
"223 585 LINE",
"420 585 LINE",
"430 643 LINE",
"233 643 LINE",
"238 670 LINE",
"239 674 OFFCURVE",
"244 701 OFFCURVE",
"244 709 QCURVE SMOOTH",
"244 718 OFFCURVE",
"234 727 OFFCURVE",
"220 727 QCURVE SMOOTH",
"174 727 LINE",
"159 643 LINE",
"84 643 LINE",
"74 585 LINE",
"149 585 LINE",
"55 51 LINE",
"54 47 OFFCURVE",
"50 25 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"182 349 LINE SMOOTH",
"184 359 OFFCURVE",
"190 373 OFFCURVE",
"197 380 QCURVE SMOOTH",
"218 401 OFFCURVE",
"300 451 OFFCURVE",
"345 451 QCURVE SMOOTH",
"450 451 OFFCURVE",
"450 372 QCURVE SMOOTH",
"450 355 OFFCURVE",
"443 314 OFFCURVE",
"442 309 QCURVE SMOOTH",
"385 -10 LINE SMOOTH",
"378 -52 OFFCURVE",
"352 -105 OFFCURVE",
"306 -132 OFFCURVE",
"269 -132 QCURVE SMOOTH",
"244 -132 OFFCURVE",
"199 -117 OFFCURVE",
"182 -106 QCURVE",
"146 -159 LINE",
"165 -174 OFFCURVE",
"226 -194 OFFCURVE",
"263 -194 QCURVE SMOOTH",
"323 -194 OFFCURVE",
"402 -149 OFFCURVE",
"450 -61 OFFCURVE",
"462 8 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
36 47 50 106 37 47 47 39 65 20 106 65 6 114 43 39 0 114 28 10 114 3 10 106 3 15 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
note = uni0452;
unicode = 0452;
},
{
glyphname = "ghestroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"244 148 LINE",
"301 180 LINE",
"264 246 LINE",
"313 271 OFFCURVE",
"371 307 OFFCURVE",
"412 363 OFFCURVE",
"412 402 QCURVE SMOOTH",
"412 462 OFFCURVE",
"324 524 OFFCURVE",
"245 524 QCURVE SMOOTH",
"208 524 OFFCURVE",
"130 504 OFFCURVE",
"99 490 QCURVE",
"123 435 LINE",
"151 447 OFFCURVE",
"213 464 OFFCURVE",
"238 464 QCURVE SMOOTH",
"284 464 OFFCURVE",
"332 428 OFFCURVE",
"332 394 QCURVE SMOOTH",
"332 373 OFFCURVE",
"309 342 OFFCURVE",
"270 318 OFFCURVE",
"235 301 QCURVE",
"196 373 LINE",
"139 341 LINE",
"176 272 LINE",
"131 249 OFFCURVE",
"68 206 OFFCURVE",
"26 147 OFFCURVE",
"26 110 QCURVE SMOOTH",
"26 51 OFFCURVE",
"114 -12 OFFCURVE",
"196 -12 QCURVE SMOOTH",
"249 -12 OFFCURVE",
"336 17 OFFCURVE",
"363 38 QCURVE",
"335 92 LINE",
"311 74 OFFCURVE",
"244 50 OFFCURVE",
"210 50 QCURVE SMOOTH",
"163 50 OFFCURVE",
"107 83 OFFCURVE",
"107 119 QCURVE SMOOTH",
"107 149 OFFCURVE",
"160 193 OFFCURVE",
"206 217 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
12 5 106 36 29 106 36 7 114 12 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 397;
}
);
note = uni0493;
rightKerningGroup = "ge-cy";
unicode = 0493;
},
{
glyphname = "kadescender-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"377 -111 LINE SMOOTH",
"374 -124 OFFCURVE",
"368 -153 OFFCURVE",
"368 -160 QCURVE SMOOTH",
"368 -169 OFFCURVE",
"378 -178 OFFCURVE",
"392 -178 QCURVE SMOOTH",
"430 -178 LINE",
"476 -6 LINE SMOOTH",
"479 6 OFFCURVE",
"488 44 OFFCURVE",
"488 51 QCURVE SMOOTH",
"488 60 OFFCURVE",
"478 69 OFFCURVE",
"464 69 QCURVE SMOOTH",
"448 69 OFFCURVE",
"437 71 OFFCURVE",
"429 80 OFFCURVE",
"421 93 QCURVE SMOOTH",
"310 283 LINE",
"369 325 OFFCURVE",
"455 420 OFFCURVE",
"501 483 QCURVE SMOOTH",
"525 515 LINE",
"451 515 LINE SMOOTH",
"439 515 OFFCURVE",
"424 507 OFFCURVE",
"416 495 QCURVE",
"360 418 OFFCURVE",
"238 305 OFFCURVE",
"168 285 QCURVE",
"200 458 LINE",
"201 462 OFFCURVE",
"206 489 OFFCURVE",
"206 497 QCURVE SMOOTH",
"206 506 OFFCURVE",
"196 515 OFFCURVE",
"182 515 QCURVE SMOOTH",
"136 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"119 0 LINE",
"159 224 LINE",
"190 230 OFFCURVE",
"242 248 QCURVE",
"375 22 LINE SMOOTH",
"382 11 OFFCURVE",
"393 2 OFFCURVE",
"404 0 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
53 38 106 53 10 114 49 46 14 114 33 3 29 22 5 106 22 29 7 29 25 18 14 6 114 7 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 503;
}
);
note = uni049B;
rightKerningGroup = "ka-cy";
unicode = 049B;
},
{
glyphname = "kaverticalstroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"119 0 LINE",
"159 222 LINE",
"179 226 OFFCURVE",
"194 231 QCURVE",
"188 198 LINE",
"187 194 OFFCURVE",
"185 184 OFFCURVE",
"185 178 QCURVE SMOOTH",
"185 163 OFFCURVE",
"203 163 QCURVE SMOOTH",
"227 163 LINE",
"242 249 LINE",
"376 20 LINE SMOOTH",
"384 7 OFFCURVE",
"393 0 OFFCURVE",
"404 0 QCURVE SMOOTH",
"476 0 LINE",
"310 283 LINE",
"369 327 OFFCURVE",
"452 420 OFFCURVE",
"497 482 QCURVE",
"506 493 OFFCURVE",
"522 515 QCURVE",
"451 515 LINE SMOOTH",
"439 515 OFFCURVE",
"424 507 OFFCURVE",
"416 495 QCURVE",
"377 441 OFFCURVE",
"299 354 OFFCURVE",
"255 325 QCURVE",
"259 348 LINE SMOOTH",
"262 365 OFFCURVE",
"262 367 QCURVE SMOOTH",
"262 382 OFFCURVE",
"244 382 QCURVE SMOOTH",
"220 382 LINE",
"206 299 LINE",
"187 289 OFFCURVE",
"168 285 QCURVE",
"200 458 LINE",
"201 462 OFFCURVE",
"206 489 OFFCURVE",
"206 497 QCURVE SMOOTH",
"206 506 OFFCURVE",
"196 515 OFFCURVE",
"182 515 QCURVE SMOOTH",
"136 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
35 41 49 3 30 14 51 106 23 16 6 14 14 6 40 37 2 53 10 114 30 26 10 6 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SLOOP[ ]\011/* SetLoopVariable */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 497;
}
);
note = uni049D;
rightKerningGroup = "ka-cy";
unicode = 049D;
},
{
glyphname = "endescender-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"400 9 OFFCURVE",
"410 0 OFFCURVE",
"424 0 QCURVE SMOOTH",
"464 0 LINE",
"438 -111 LINE",
"437 -117 OFFCURVE",
"433 -135 QCURVE SMOOTH",
"429 -153 OFFCURVE",
"429 -160 QCURVE SMOOTH",
"429 -169 OFFCURVE",
"439 -178 OFFCURVE",
"453 -178 QCURVE SMOOTH",
"491 -178 LINE",
"537 -6 LINE SMOOTH",
"540 6 OFFCURVE",
"549 44 OFFCURVE",
"549 51 QCURVE SMOOTH",
"549 60 OFFCURVE",
"539 69 OFFCURVE",
"525 69 QCURVE SMOOTH",
"509 69 OFFCURVE",
"496 71 OFFCURVE",
"489 81 OFFCURVE",
"489 93 QCURVE SMOOTH",
"489 109 OFFCURVE",
"496 145 QCURVE SMOOTH",
"551 458 LINE",
"552 462 OFFCURVE",
"557 489 OFFCURVE",
"557 497 QCURVE SMOOTH",
"557 506 OFFCURVE",
"547 515 OFFCURVE",
"533 515 QCURVE SMOOTH",
"487 515 LINE",
"448 293 LINE",
"172 293 LINE",
"201 458 LINE",
"202 462 OFFCURVE",
"207 489 OFFCURVE",
"207 497 QCURVE SMOOTH",
"207 506 OFFCURVE",
"197 515 OFFCURVE",
"183 515 QCURVE SMOOTH",
"137 515 LINE",
"56 57 LINE",
"55 53 OFFCURVE",
"50 26 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"161 233 LINE",
"437 233 LINE",
"406 57 LINE",
"405 53 OFFCURVE",
"400 26 OFFCURVE",
"400 18 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
53 37 106 53 10 114 48 45 14 114 4 21 106 4 4 6 27 24 17 13 6 114 6 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 577;
}
);
note = uni04A3;
unicode = 04A3;
},
{
glyphname = "ustraight-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"184 -178 LINE",
"215 0 LINE",
"327 117 OFFCURVE",
"483 381 OFFCURVE",
"504 515 QCURVE",
"450 515 LINE SMOOTH",
"438 515 OFFCURVE",
"424 506 OFFCURVE",
"421 494 QCURVE SMOOTH",
"402 411 OFFCURVE",
"343 276 OFFCURVE",
"264 156 OFFCURVE",
"204 82 QCURVE",
"159 494 LINE",
"157 506 OFFCURVE",
"149 515 OFFCURVE",
"138 515 QCURVE SMOOTH",
"80 515 LINE",
"141 0 LINE",
"117 -138 LINE SMOOTH",
"114 -156 OFFCURVE",
"114 -163 QCURVE SMOOTH",
"114 -178 OFFCURVE",
"131 -178 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
1 23 14 114 18 5 6 114 21 10 4 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 472;
}
);
note = uni04AF;
unicode = 04AF;
},
{
glyphname = "ustraightstroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"2 0 LINE",
"141 0 LINE",
"117 -138 LINE SMOOTH",
"114 -156 OFFCURVE",
"114 -163 QCURVE SMOOTH",
"114 -178 OFFCURVE",
"131 -178 QCURVE SMOOTH",
"184 -178 LINE",
"215 0 LINE",
"382 0 LINE",
"394 67 LINE",
"275 67 LINE",
"365 173 OFFCURVE",
"486 400 OFFCURVE",
"504 515 QCURVE",
"450 515 LINE SMOOTH",
"438 515 OFFCURVE",
"424 506 OFFCURVE",
"421 494 QCURVE SMOOTH",
"402 411 OFFCURVE",
"343 276 OFFCURVE",
"264 156 OFFCURVE",
"204 82 QCURVE",
"159 494 LINE",
"157 506 OFFCURVE",
"149 515 OFFCURVE",
"138 515 QCURVE SMOOTH",
"80 515 LINE",
"133 67 LINE",
"14 67 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
7 18 29 0 106 21 29 10 114 25 23 14 114 15 2 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 472;
}
);
note = uni04B1;
unicode = 04B1;
},
{
glyphname = "hadescender-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"359 -111 LINE SMOOTH",
"356 -124 OFFCURVE",
"350 -153 OFFCURVE",
"350 -160 QCURVE SMOOTH",
"350 -169 OFFCURVE",
"360 -178 OFFCURVE",
"374 -178 QCURVE SMOOTH",
"412 -178 LINE",
"458 -6 LINE SMOOTH",
"461 6 OFFCURVE",
"470 44 OFFCURVE",
"470 51 QCURVE SMOOTH",
"470 60 OFFCURVE",
"460 69 OFFCURVE",
"446 69 QCURVE SMOOTH",
"430 69 OFFCURVE",
"419 71 OFFCURVE",
"411 80 OFFCURVE",
"404 93 QCURVE SMOOTH",
"313 257 LINE",
"534 515 LINE",
"465 515 LINE SMOOTH",
"454 515 OFFCURVE",
"439 507 OFFCURVE",
"429 495 QCURVE SMOOTH",
"277 309 LINE",
"184 495 LINE SMOOTH",
"178 507 OFFCURVE",
"167 515 OFFCURVE",
"156 515 QCURVE SMOOTH",
"88 515 LINE",
"221 258 LINE",
"-1 0 LINE",
"66 0 LINE SMOOTH",
"77 0 OFFCURVE",
"91 8 OFFCURVE",
"101 20 QCURVE SMOOTH",
"257 203 LINE",
"353 27 LINE SMOOTH",
"360 15 OFFCURVE",
"375 2 OFFCURVE",
"385 0 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
3 21 15 3 10 41 26 106 41 10 114 37 34 14 114 20 16 14 10 6 114 8 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
SLOOP[ ]\011/* SetLoopVariable */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 491;
}
);
leftKerningGroup = "ha-cy";
note = uni04B3;
rightKerningGroup = "ka-cy";
unicode = 04B3;
},
{
glyphname = "cheverticalstroke-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"350 212 OFFCURVE",
"356 218 QCURVE",
"362 223 OFFCURVE",
"374 232 OFFCURVE",
"377 232 QCURVE SMOOTH",
"382 232 OFFCURVE",
"382 226 QCURVE SMOOTH",
"382 221 OFFCURVE",
"377 199 OFFCURVE",
"374 186 QCURVE SMOOTH",
"346 57 LINE SMOOTH",
"345 53 OFFCURVE",
"340 26 OFFCURVE",
"340 18 QCURVE SMOOTH",
"340 9 OFFCURVE",
"350 0 OFFCURVE",
"364 0 QCURVE SMOOTH",
"410 0 LINE",
"492 458 LINE",
"493 462 OFFCURVE",
"498 489 OFFCURVE",
"498 497 QCURVE SMOOTH",
"498 506 OFFCURVE",
"488 515 OFFCURVE",
"474 515 QCURVE SMOOTH",
"428 515 LINE",
"395 328 LINE SMOOTH",
"393 318 OFFCURVE",
"387 304 OFFCURVE",
"380 297 QCURVE SMOOTH",
"365 282 OFFCURVE",
"313 244 OFFCURVE",
"283 233 QCURVE",
"290 271 LINE SMOOTH",
"293 285 OFFCURVE",
"293 290 QCURVE SMOOTH",
"293 298 OFFCURVE",
"284 305 OFFCURVE",
"275 305 QCURVE SMOOTH",
"235 305 LINE",
"221 227 LINE",
"147 236 OFFCURVE",
"147 305 QCURVE SMOOTH",
"147 322 OFFCURVE",
"154 363 OFFCURVE",
"155 368 QCURVE SMOOTH",
"171 458 LINE",
"172 462 OFFCURVE",
"177 489 OFFCURVE",
"177 497 QCURVE SMOOTH",
"177 506 OFFCURVE",
"167 515 OFFCURVE",
"153 515 QCURVE SMOOTH",
"107 515 LINE",
"74 331 LINE SMOOTH",
"68 297 OFFCURVE",
"68 279 QCURVE SMOOTH",
"68 238 OFFCURVE",
"107 185 OFFCURVE",
"171 160 OFFCURVE",
"209 160 QCURVE",
"202 119 LINE SMOOTH",
"198 97 OFFCURVE",
"198 92 QCURVE SMOOTH",
"198 79 OFFCURVE",
"216 79 QCURVE SMOOTH",
"256 79 LINE",
"272 170 LINE",
"296 178 OFFCURVE",
"333 199 OFFCURVE",
"344 207 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
37 9 29 106 2 9 9 16 56 53 10 114 48 45 20 16 6 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 517;
}
);
note = uni04B9;
unicode = 04B9;
},
{
glyphname = "shha-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"238 670 LINE",
"239 674 OFFCURVE",
"244 701 OFFCURVE",
"244 709 QCURVE SMOOTH",
"244 718 OFFCURVE",
"234 727 OFFCURVE",
"220 727 QCURVE SMOOTH",
"174 727 LINE",
"55 51 LINE",
"54 47 OFFCURVE",
"50 25 OFFCURVE",
"50 18 QCURVE SMOOTH",
"50 9 OFFCURVE",
"60 0 OFFCURVE",
"74 0 QCURVE SMOOTH",
"120 0 LINE",
"184 359 LINE SMOOTH",
"186 369 OFFCURVE",
"192 383 OFFCURVE",
"199 390 QCURVE SMOOTH",
"220 411 OFFCURVE",
"302 461 OFFCURVE",
"347 461 QCURVE SMOOTH",
"452 461 OFFCURVE",
"452 382 QCURVE SMOOTH",
"452 365 OFFCURVE",
"445 324 OFFCURVE",
"444 319 QCURVE SMOOTH",
"396 51 LINE",
"395 47 OFFCURVE",
"391 25 OFFCURVE",
"391 18 QCURVE SMOOTH",
"391 9 OFFCURVE",
"401 0 OFFCURVE",
"415 0 QCURVE SMOOTH",
"461 0 LINE",
"525 356 LINE SMOOTH",
"531 390 OFFCURVE",
"531 408 QCURVE SMOOTH",
"531 449 OFFCURVE",
"490 502 OFFCURVE",
"423 527 OFFCURVE",
"381 527 QCURVE SMOOTH",
"331 527 OFFCURVE",
"254 493 OFFCURVE",
"229 475 QCURVE",
"226 473 OFFCURVE",
"222 470 QCURVE SMOOTH",
"218 467 OFFCURVE",
"210 462 OFFCURVE",
"206 462 QCURVE SMOOTH",
"201 462 OFFCURVE",
"201 468 QCURVE SMOOTH",
"201 474 OFFCURVE",
"204 484 QCURVE",
"206 494 OFFCURVE",
"208 505 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 24 44 41 52 48 13 33 106 13 7 114 48 0 114 41 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
note = uni04BB;
unicode = 04BB;
},
{
glyphname = "schwa-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"310 528 OFFCURVE",
"216 513 OFFCURVE",
"177 503 QCURVE",
"178 450 LINE",
"214 457 OFFCURVE",
"299 467 OFFCURVE",
"337 467 QCURVE SMOOTH",
"402 467 OFFCURVE",
"470 399 OFFCURVE",
"470 336 QCURVE SMOOTH",
"470 317 OFFCURVE",
"467 291 QCURVE",
"121 291 LINE SMOOTH",
"97 291 OFFCURVE",
"70 270 OFFCURVE",
"66 246 QCURVE SMOOTH",
"60 213 OFFCURVE",
"60 182 QCURVE SMOOTH",
"60 87 OFFCURVE",
"160 -12 OFFCURVE",
"257 -12 QCURVE SMOOTH",
"363 -12 OFFCURVE",
"494 99 OFFCURVE",
"549 262 OFFCURVE",
"549 344 QCURVE SMOOTH",
"549 435 OFFCURVE",
"450 528 OFFCURVE",
"353 528 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"207 49 OFFCURVE",
"140 118 OFFCURVE",
"140 185 QCURVE SMOOTH",
"140 208 OFFCURVE",
"143 233 QCURVE",
"458 233 LINE",
"440 155 OFFCURVE",
"352 49 OFFCURVE",
"273 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
6 36 106 31 14 106 31 31 6 27 20 106 27 7 114 6 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 566;
}
);
leftKerningGroup = "a-cy";
note = uni04D9;
rightKerningGroup = "be-cy";
unicode = 04D9;
},
{
glyphname = "obarred-cy";
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"363 -12 OFFCURVE",
"494 99 OFFCURVE",
"549 262 OFFCURVE",
"549 344 QCURVE SMOOTH",
"549 435 OFFCURVE",
"450 528 OFFCURVE",
"353 528 QCURVE SMOOTH",
"247 528 OFFCURVE",
"116 417 OFFCURVE",
"61 254 OFFCURVE",
"61 172 QCURVE SMOOTH",
"61 81 OFFCURVE",
"160 -12 OFFCURVE",
"257 -12 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402 467 OFFCURVE",
"470 399 OFFCURVE",
"470 336 QCURVE SMOOTH",
"470 317 OFFCURVE",
"467 291 QCURVE",
"153 291 LINE",
"172 366 OFFCURVE",
"260 467 OFFCURVE",
"337 467 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"208 49 OFFCURVE",
"140 117 OFFCURVE",
"140 180 QCURVE SMOOTH",
"140 202 OFFCURVE",
"143 233 QCURVE",
"458 233 LINE",
"440 155 OFFCURVE",
"352 49 OFFCURVE",
"273 49 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
13 31 106 26 16 106 26 26 13 6 22 106 6 7 114 13 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 566;
}
);
leftKerningGroup = "a-cy";
note = uni04E9;
rightKerningGroup = "be-cy";
unicode = 04E9;
},
{
glyphname = Omega;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"379 0 LINE",
"611 0 LINE",
"623 67 LINE",
"472 67 LINE",
"538 125 OFFCURVE",
"633 271 OFFCURVE",
"684 435 OFFCURVE",
"684 517 QCURVE SMOOTH",
"684 620 OFFCURVE",
"571 733 OFFCURVE",
"451 733 QCURVE SMOOTH",
"336 733 OFFCURVE",
"181 611 OFFCURVE",
"107 420 OFFCURVE",
"107 314 QCURVE SMOOTH",
"107 239 OFFCURVE",
"149 119 OFFCURVE",
"190 67 QCURVE",
"41 67 LINE",
"29 0 LINE",
"262 0 LINE",
"274 67 LINE",
"251 89 OFFCURVE",
"211 168 OFFCURVE",
"186 273 OFFCURVE",
"186 330 QCURVE SMOOTH",
"186 418 OFFCURVE",
"239 570 OFFCURVE",
"352 665 OFFCURVE",
"439 665 QCURVE SMOOTH",
"526 665 OFFCURVE",
"604 586 OFFCURVE",
"604 506 QCURVE SMOOTH",
"604 425 OFFCURVE",
"551 258 OFFCURVE",
"454 115 OFFCURVE",
"391 67 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
26 7 106 26 2 114 36 33 106 36 17 0 15 15 17 18 106 17 8 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 706;
}
);
note = uni03A9;
unicode = 03A9;
},
{
glyphname = mu;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"145 515 LINE",
"33 -121 LINE",
"32 -125 OFFCURVE",
"27 -152 OFFCURVE",
"27 -160 QCURVE SMOOTH",
"27 -169 OFFCURVE",
"37 -178 OFFCURVE",
"51 -178 QCURVE SMOOTH",
"97 -178 LINE",
"135 34 LINE",
"144 15 OFFCURVE",
"189 -12 OFFCURVE",
"224 -12 QCURVE SMOOTH",
"269 -12 OFFCURVE",
"342 19 OFFCURVE",
"365 35 QCURVE",
"369 38 OFFCURVE",
"397 58 OFFCURVE",
"402 58 QCURVE SMOOTH",
"407 58 OFFCURVE",
"411 52 OFFCURVE",
"411 44 QCURVE SMOOTH",
"411 23 LINE SMOOTH",
"411 11 OFFCURVE",
"421 0 OFFCURVE",
"432 0 QCURVE SMOOTH",
"480 0 LINE",
"480 37 LINE SMOOTH",
"480 71 OFFCURVE",
"487 135 OFFCURVE",
"495 182 QCURVE SMOOTH",
"544 458 LINE",
"545 462 OFFCURVE",
"550 489 OFFCURVE",
"550 497 QCURVE SMOOTH",
"550 506 OFFCURVE",
"540 515 OFFCURVE",
"526 515 QCURVE SMOOTH",
"480 515 LINE",
"416 156 LINE SMOOTH",
"414 146 OFFCURVE",
"408 132 OFFCURVE",
"401 125 QCURVE SMOOTH",
"379 103 OFFCURVE",
"301 54 OFFCURVE",
"258 54 QCURVE SMOOTH",
"205 54 OFFCURVE",
"155 94 OFFCURVE",
"155 133 QCURVE SMOOTH",
"155 150 OFFCURVE",
"162 191 OFFCURVE",
"163 196 QCURVE SMOOTH",
"209 458 LINE",
"210 462 OFFCURVE",
"215 489 OFFCURVE",
"215 497 QCURVE SMOOTH",
"215 506 OFFCURVE",
"205 515 OFFCURVE",
"191 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
54 51 3 24 21 58 46 13 106 46 11 114 33 10 114 58 6 114 51 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
note = uni03BC;
unicode = 03BC;
},
{
glyphname = pi;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"580 55 LINE",
"560 47 OFFCURVE",
"541 47 QCURVE SMOOTH",
"521 47 OFFCURVE",
"505 59 OFFCURVE",
"505 76 QCURVE SMOOTH",
"505 89 OFFCURVE",
"508 108 QCURVE SMOOTH",
"569 451 LINE",
"667 451 LINE",
"678 515 LINE",
"255 515 LINE SMOOTH",
"214 515 OFFCURVE",
"137 500 OFFCURVE",
"114 489 QCURVE",
"122 437 LINE",
"156 451 OFFCURVE",
"227 451 QCURVE",
"170 130 LINE SMOOTH",
"157 55 OFFCURVE",
"133 0 QCURVE",
"199 0 LINE",
"229 64 OFFCURVE",
"240 128 QCURVE SMOOTH",
"297 451 LINE",
"499 451 LINE",
"437 101 LINE SMOOTH",
"432 74 OFFCURVE",
"432 57 QCURVE SMOOTH",
"432 22 OFFCURVE",
"470 -11 OFFCURVE",
"514 -11 QCURVE SMOOTH",
"535 -11 OFFCURVE",
"575 -1 OFFCURVE",
"590 6 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
34 13 2 31 106 25 9 22 16 106 13 10 114 22 6 114 2 11 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 670;
}
);
note = uni03C0;
unicode = 03C0;
},
{
glyphname = zero;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"392 -13 OFFCURVE",
"546 139 OFFCURVE",
"619 376 OFFCURVE",
"619 506 QCURVE SMOOTH",
"619 621 OFFCURVE",
"518 734 OFFCURVE",
"409 734 QCURVE SMOOTH",
"294 734 OFFCURVE",
"140 581 OFFCURVE",
"67 343 OFFCURVE",
"67 215 QCURVE SMOOTH",
"67 100 OFFCURVE",
"168 -13 OFFCURVE",
"277 -13 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"469 664 OFFCURVE",
"536 587 OFFCURVE",
"536 500 QCURVE SMOOTH",
"536 393 OFFCURVE",
"482 189 OFFCURVE",
"371 57 OFFCURVE",
"290 57 QCURVE SMOOTH",
"218 57 OFFCURVE",
"150 134 OFFCURVE",
"150 221 QCURVE SMOOTH",
"150 327 OFFCURVE",
"204 531 OFFCURVE",
"316 664 OFFCURVE",
"397 664 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 20 106 13 13 114 6 27 106 6 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 626;
}
);
note = uni0030;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"224 669 LINE",
"117 57 LINE",
"116 53 OFFCURVE",
"111 26 OFFCURVE",
"111 18 QCURVE SMOOTH",
"111 9 OFFCURVE",
"121 0 OFFCURVE",
"135 0 QCURVE SMOOTH",
"184 0 LINE",
"303 670 LINE",
"304 674 OFFCURVE",
"309 701 OFFCURVE",
"309 709 QCURVE SMOOTH",
"309 718 OFFCURVE",
"299 727 OFFCURVE",
"285 727 QCURVE SMOOTH",
"159 727 LINE",
"148 669 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 10 5 1 0 106 1 4 114 10 12 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 307;
}
);
note = uni0031;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"19 57 LINE",
"18 53 OFFCURVE",
"13 26 OFFCURVE",
"13 18 QCURVE SMOOTH",
"13 9 OFFCURVE",
"23 0 OFFCURVE",
"37 0 QCURVE SMOOTH",
"440 0 LINE",
"452 69 LINE",
"97 69 LINE",
"105 114 LINE SMOOTH",
"113 158 OFFCURVE",
"167 223 OFFCURVE",
"239 270 OFFCURVE",
"296 299 QCURVE SMOOTH",
"378 341 OFFCURVE",
"480 412 OFFCURVE",
"543 513 OFFCURVE",
"543 583 QCURVE SMOOTH",
"543 660 OFFCURVE",
"436 733 OFFCURVE",
"331 733 QCURVE SMOOTH",
"275 733 OFFCURVE",
"175 708 OFFCURVE",
"141 690 QCURVE",
"156 626 LINE",
"185 643 OFFCURVE",
"269 666 OFFCURVE",
"316 666 QCURVE SMOOTH",
"388 666 OFFCURVE",
"463 621 OFFCURVE",
"463 565 QCURVE SMOOTH",
"463 511 OFFCURVE",
"406 434 OFFCURVE",
"329 386 OFFCURVE",
"268 357 QCURVE SMOOTH",
"203 326 OFFCURVE",
"111 266 OFFCURVE",
"41 178 OFFCURVE",
"30 117 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
4 17 32 29 106 23 10 35 32 12 114 17 10 106 17 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 525;
}
);
note = uni0032;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-20 38 LINE",
"9 17 OFFCURVE",
"108 -12 OFFCURVE",
"169 -12 QCURVE SMOOTH",
"258 -12 OFFCURVE",
"392 47 OFFCURVE",
"466 163 OFFCURVE",
"466 246 QCURVE SMOOTH",
"466 290 OFFCURVE",
"439 336 OFFCURVE",
"419 351 QCURVE SMOOTH",
"411 357 OFFCURVE",
"397 364 QCURVE",
"386 369 OFFCURVE",
"377 377 OFFCURVE",
"377 384 QCURVE SMOOTH",
"377 391 OFFCURVE",
"390 402 OFFCURVE",
"404 409 QCURVE",
"429 425 LINE",
"469 454 OFFCURVE",
"509 540 OFFCURVE",
"509 589 QCURVE SMOOTH",
"509 661 OFFCURVE",
"405 733 OFFCURVE",
"316 733 QCURVE SMOOTH",
"264 733 OFFCURVE",
"166 707 OFFCURVE",
"131 689 QCURVE",
"139 623 LINE",
"173 642 OFFCURVE",
"262 668 OFFCURVE",
"305 668 QCURVE SMOOTH",
"364 668 OFFCURVE",
"428 619 OFFCURVE",
"428 575 QCURVE SMOOTH",
"428 518 OFFCURVE",
"370 444 OFFCURVE",
"276 410 OFFCURVE",
"221 410 QCURVE SMOOTH",
"182 410 LINE",
"170 341 LINE",
"222 341 LINE SMOOTH",
"307 341 OFFCURVE",
"384 284 OFFCURVE",
"384 229 QCURVE SMOOTH",
"384 170 OFFCURVE",
"330 91 OFFCURVE",
"238 54 OFFCURVE",
"182 54 QCURVE SMOOTH",
"129 54 OFFCURVE",
"39 80 OFFCURVE",
"10 99 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
36 10 11 106 10 10 26 48 2 106 48 13 114 26 19 106 26 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 504;
}
);
leftKerningGroup = three;
note = uni0033;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"380 145 LINE",
"364 57 LINE",
"363 53 OFFCURVE",
"358 26 OFFCURVE",
"358 18 QCURVE SMOOTH",
"358 9 OFFCURVE",
"368 0 OFFCURVE",
"382 0 QCURVE SMOOTH",
"432 0 LINE",
"485 296 LINE",
"486 300 OFFCURVE",
"491 327 OFFCURVE",
"491 335 QCURVE SMOOTH",
"491 344 OFFCURVE",
"481 353 OFFCURVE",
"467 353 QCURVE SMOOTH",
"417 353 LINE",
"391 210 LINE",
"116 210 LINE",
"121 238 LINE SMOOTH",
"131 291 OFFCURVE",
"219 381 OFFCURVE",
"295 432 QCURVE SMOOTH",
"373 484 OFFCURVE",
"460 551 OFFCURVE",
"531 639 OFFCURVE",
"544 691 QCURVE SMOOTH",
"545 695 OFFCURVE",
"548 708 OFFCURVE",
"548 713 QCURVE SMOOTH",
"548 728 OFFCURVE",
"530 728 QCURVE SMOOTH",
"471 728 LINE",
"462 677 OFFCURVE",
"400 594 OFFCURVE",
"321 532 OFFCURVE",
"252 486 QCURVE SMOOTH",
"194 447 OFFCURVE",
"112 378 OFFCURVE",
"52 289 OFFCURVE",
"42 234 QCURVE SMOOTH",
"36 202 LINE",
"35 198 OFFCURVE",
"30 171 OFFCURVE",
"30 163 QCURVE SMOOTH",
"30 154 OFFCURVE",
"40 145 OFFCURVE",
"54 145 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 30 14 47 28 106 23 47 47 14 42 39 12 114 17 14 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 538;
}
);
leftKerningGroup = four;
note = uni0034;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 25 LINE",
"29 10 OFFCURVE",
"125 -12 OFFCURVE",
"184 -12 QCURVE SMOOTH",
"275 -12 OFFCURVE",
"417 67 OFFCURVE",
"495 202 OFFCURVE",
"495 285 QCURVE SMOOTH",
"495 355 OFFCURVE",
"409 445 OFFCURVE",
"309 445 QCURVE SMOOTH",
"277 445 OFFCURVE",
"209 437 OFFCURVE",
"183 432 QCURVE",
"223 658 LINE",
"524 658 LINE",
"536 727 LINE",
"161 727 LINE",
"106 413 LINE SMOOTH",
"100 383 OFFCURVE",
"100 378 QCURVE SMOOTH",
"100 362 OFFCURVE",
"118 362 QCURVE SMOOTH",
"128 362 OFFCURVE",
"147 365 QCURVE SMOOTH",
"209 376 OFFCURVE",
"276 376 QCURVE SMOOTH",
"409 376 OFFCURVE",
"409 271 QCURVE SMOOTH",
"409 205 OFFCURVE",
"349 107 OFFCURVE",
"245 55 OFFCURVE",
"180 55 QCURVE SMOOTH",
"137 55 OFFCURVE",
"59 75 OFFCURVE",
"32 89 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
24 8 106 24 24 17 31 2 106 31 13 114 17 20 106 17 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 526;
}
);
leftKerningGroup = five;
note = uni0035;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"531 375 OFFCURVE",
"434 464 OFFCURVE",
"341 464 QCURVE SMOOTH",
"291 464 OFFCURVE",
"202 428 OFFCURVE",
"171 402 QCURVE",
"204 509 OFFCURVE",
"375 660 OFFCURVE",
"535 660 QCURVE",
"547 726 LINE",
"399 726 OFFCURVE",
"214 628 OFFCURVE",
"157 537 QCURVE SMOOTH",
"107 456 OFFCURVE",
"57 260 OFFCURVE",
"57 179 QCURVE SMOOTH",
"57 95 OFFCURVE",
"143 -13 OFFCURVE",
"250 -13 QCURVE SMOOTH",
"334 -13 OFFCURVE",
"462 73 OFFCURVE",
"531 212 OFFCURVE",
"531 290 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"201 48 OFFCURVE",
"136 121 OFFCURVE",
"136 186 QCURVE SMOOTH",
"136 247 OFFCURVE",
"179 344 OFFCURVE",
"263 399 OFFCURVE",
"322 399 QCURVE SMOOTH",
"384 399 OFFCURVE",
"450 338 OFFCURVE",
"450 277 QCURVE SMOOTH",
"450 218 OFFCURVE",
"405 113 OFFCURVE",
"319 48 OFFCURVE",
"261 48 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
19 29 106 16 8 19 19 3 12 13 106 12 4 114 3 36 106 3 13 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 557;
}
);
note = uni0036;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"95 58 LINE",
"94 55 OFFCURVE",
"89 26 OFFCURVE",
"89 18 QCURVE SMOOTH",
"89 9 OFFCURVE",
"99 0 OFFCURVE",
"113 0 QCURVE SMOOTH",
"160 0 LINE",
"176 88 LINE SMOOTH",
"186 145 OFFCURVE",
"210 228 OFFCURVE",
"266 317 OFFCURVE",
"315 357 QCURVE SMOOTH",
"348 384 OFFCURVE",
"388 413 QCURVE SMOOTH",
"439 452 OFFCURVE",
"489 499 OFFCURVE",
"525 568 OFFCURVE",
"534 624 QCURVE SMOOTH",
"551 727 LINE",
"116 727 LINE",
"104 658 LINE",
"467 658 LINE",
"459 613 LINE SMOOTH",
"452 575 OFFCURVE",
"421 522 OFFCURVE",
"381 487 OFFCURVE",
"343 459 QCURVE SMOOTH",
"324 445 OFFCURVE",
"280 412 OFFCURVE",
"260 394 QCURVE SMOOTH",
"209 348 OFFCURVE",
"146 255 OFFCURVE",
"111 154 OFFCURVE",
"100 88 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
30 27 13 12 106 13 4 114 27 12 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 477;
}
);
leftKerningGroup = seven;
note = uni0037;
rightKerningGroup = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"556 314 OFFCURVE",
"512 350 QCURVE SMOOTH",
"504 357 OFFCURVE",
"488 366 OFFCURVE",
"486 367 QCURVE SMOOTH",
"476 372 OFFCURVE",
"468 380 OFFCURVE",
"468 386 QCURVE SMOOTH",
"468 391 OFFCURVE",
"477 399 OFFCURVE",
"488 404 QCURVE",
"490 405 OFFCURVE",
"511 416 OFFCURVE",
"521 425 QCURVE",
"555 452 OFFCURVE",
"590 536 OFFCURVE",
"590 580 QCURVE SMOOTH",
"590 627 OFFCURVE",
"546 696 OFFCURVE",
"460 734 OFFCURVE",
"398 734 QCURVE SMOOTH",
"328 734 OFFCURVE",
"209 676 OFFCURVE",
"139 573 OFFCURVE",
"139 507 QCURVE SMOOTH",
"139 479 OFFCURVE",
"155 437 OFFCURVE",
"166 425 QCURVE SMOOTH",
"177 413 OFFCURVE",
"191 405 QCURVE",
"197 401 OFFCURVE",
"204 393 OFFCURVE",
"204 388 QCURVE SMOOTH",
"204 382 OFFCURVE",
"192 373 OFFCURVE",
"179 367 QCURVE SMOOTH",
"160 358 OFFCURVE",
"147 350 QCURVE SMOOTH",
"100 319 OFFCURVE",
"52 212 OFFCURVE",
"52 153 QCURVE SMOOTH",
"52 73 OFFCURVE",
"161 -14 OFFCURVE",
"266 -14 QCURVE SMOOTH",
"348 -14 OFFCURVE",
"480 50 OFFCURVE",
"556 167 OFFCURVE",
"556 244 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"280 414 OFFCURVE",
"216 464 OFFCURVE",
"216 513 QCURVE SMOOTH",
"216 561 OFFCURVE",
"263 633 OFFCURVE",
"341 672 OFFCURVE",
"387 672 QCURVE SMOOTH",
"444 672 OFFCURVE",
"511 622 OFFCURVE",
"511 571 QCURVE SMOOTH",
"511 522 OFFCURVE",
"464 451 OFFCURVE",
"387 414 OFFCURVE",
"342 414 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"212 55 OFFCURVE",
"131 115 OFFCURVE",
"131 171 QCURVE SMOOTH",
"131 225 OFFCURVE",
"187 307 OFFCURVE",
"278 350 OFFCURVE",
"330 350 QCURVE SMOOTH",
"401 350 OFFCURVE",
"477 288 OFFCURVE",
"477 232 QCURVE SMOOTH",
"477 178 OFFCURVE",
"421 98 OFFCURVE",
"329 55 OFFCURVE",
"278 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
14 39 68 61 106 68 68 3 26 54 106 26 5 114 3 75 106 3 13 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 602;
}
);
note = uni0038;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"88 345 OFFCURVE",
"185 256 OFFCURVE",
"278 256 QCURVE SMOOTH",
"328 256 OFFCURVE",
"417 292 OFFCURVE",
"448 318 QCURVE",
"415 213 OFFCURVE",
"245 66 OFFCURVE",
"84 66 QCURVE",
"72 0 LINE",
"221 0 OFFCURVE",
"406 93 OFFCURVE",
"462 183 QCURVE SMOOTH",
"512 264 OFFCURVE",
"562 460 OFFCURVE",
"562 541 QCURVE SMOOTH",
"562 625 OFFCURVE",
"476 733 OFFCURVE",
"369 733 QCURVE SMOOTH",
"285 733 OFFCURVE",
"157 647 OFFCURVE",
"88 508 OFFCURVE",
"88 430 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"418 672 OFFCURVE",
"483 599 OFFCURVE",
"483 534 QCURVE SMOOTH",
"483 473 OFFCURVE",
"440 376 OFFCURVE",
"356 321 OFFCURVE",
"297 321 QCURVE SMOOTH",
"235 321 OFFCURVE",
"169 382 OFFCURVE",
"169 443 QCURVE SMOOTH",
"169 502 OFFCURVE",
"214 607 OFFCURVE",
"300 672 OFFCURVE",
"358 672 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
19 29 106 8 16 19 19 3 12 13 106 12 12 114 3 36 106 3 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 557;
}
);
note = uni0039;
unicode = 0039;
},
{
glyphname = zero.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"368 -13 OFFCURVE",
"519 140 OFFCURVE",
"591 378 OFFCURVE",
"591 508 QCURVE SMOOTH",
"591 622 OFFCURVE",
"493 734 OFFCURVE",
"387 734 QCURVE SMOOTH",
"274 734 OFFCURVE",
"122 580 OFFCURVE",
"50 341 OFFCURVE",
"50 213 QCURVE SMOOTH",
"50 99 OFFCURVE",
"149 -13 OFFCURVE",
"255 -13 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"444 664 OFFCURVE",
"509 587 OFFCURVE",
"509 502 QCURVE SMOOTH",
"509 395 OFFCURVE",
"456 190 OFFCURVE",
"347 57 OFFCURVE",
"268 57 QCURVE SMOOTH",
"198 57 OFFCURVE",
"132 134 OFFCURVE",
"132 219 QCURVE SMOOTH",
"132 325 OFFCURVE",
"185 530 OFFCURVE",
"295 664 OFFCURVE",
"375 664 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 20 106 13 13 114 6 27 106 6 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00441;
},
{
glyphname = one.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"250 727 LINE",
"236 667 LINE",
"357 667 LINE",
"248 60 LINE",
"110 60 LINE",
"99 0 LINE",
"465 0 LINE",
"476 60 LINE",
"334 60 LINE",
"442 670 LINE",
"443 674 OFFCURVE",
"448 700 OFFCURVE",
"448 708 QCURVE SMOOTH",
"448 717 OFFCURVE",
"437 727 OFFCURVE",
"421 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
14 13 106 2 14 4 114 6 9 10 106 9 12 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00442;
},
{
glyphname = two.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"39 57 LINE",
"38 53 OFFCURVE",
"33 26 OFFCURVE",
"33 18 QCURVE SMOOTH",
"33 9 OFFCURVE",
"43 0 OFFCURVE",
"58 0 QCURVE SMOOTH",
"473 0 LINE",
"484 69 LINE",
"118 69 LINE",
"126 114 LINE SMOOTH",
"134 158 OFFCURVE",
"189 223 OFFCURVE",
"263 270 OFFCURVE",
"322 299 QCURVE SMOOTH",
"407 341 OFFCURVE",
"511 412 OFFCURVE",
"576 512 OFFCURVE",
"576 582 QCURVE SMOOTH",
"576 659 OFFCURVE",
"465 733 OFFCURVE",
"357 733 QCURVE SMOOTH",
"299 733 OFFCURVE",
"196 708 OFFCURVE",
"161 690 QCURVE",
"177 626 LINE",
"207 643 OFFCURVE",
"293 666 OFFCURVE",
"342 666 QCURVE SMOOTH",
"417 666 OFFCURVE",
"494 621 OFFCURVE",
"494 564 QCURVE SMOOTH",
"494 511 OFFCURVE",
"435 434 OFFCURVE",
"356 386 OFFCURVE",
"294 357 QCURVE SMOOTH",
"227 326 OFFCURVE",
"133 266 OFFCURVE",
"61 178 OFFCURVE",
"50 117 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
4 17 32 29 106 23 10 35 32 12 114 17 10 106 17 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00443;
},
{
glyphname = three.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"6 38 LINE",
"37 17 OFFCURVE",
"140 -12 OFFCURVE",
"204 -12 QCURVE SMOOTH",
"296 -12 OFFCURVE",
"435 47 OFFCURVE",
"511 162 OFFCURVE",
"511 244 QCURVE SMOOTH",
"511 289 OFFCURVE",
"482 336 OFFCURVE",
"461 351 QCURVE SMOOTH",
"451 358 OFFCURVE",
"438 364 QCURVE SMOOTH",
"426 370 OFFCURVE",
"417 377 OFFCURVE",
"417 384 QCURVE SMOOTH",
"417 391 OFFCURVE",
"431 402 OFFCURVE",
"445 409 QCURVE",
"471 425 LINE",
"513 454 OFFCURVE",
"553 539 OFFCURVE",
"553 588 QCURVE SMOOTH",
"553 661 OFFCURVE",
"445 733 OFFCURVE",
"351 733 QCURVE SMOOTH",
"297 733 OFFCURVE",
"196 707 OFFCURVE",
"159 689 QCURVE",
"168 623 LINE",
"204 642 OFFCURVE",
"296 668 OFFCURVE",
"341 668 QCURVE SMOOTH",
"403 668 OFFCURVE",
"470 619 OFFCURVE",
"470 574 QCURVE SMOOTH",
"470 517 OFFCURVE",
"410 444 OFFCURVE",
"313 410 OFFCURVE",
"255 410 QCURVE SMOOTH",
"214 410 LINE",
"202 341 LINE",
"257 341 LINE SMOOTH",
"347 341 OFFCURVE",
"427 283 OFFCURVE",
"427 228 QCURVE SMOOTH",
"427 169 OFFCURVE",
"371 91 OFFCURVE",
"276 54 OFFCURVE",
"217 54 QCURVE SMOOTH",
"161 54 OFFCURVE",
"67 80 OFFCURVE",
"37 99 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
36 10 11 106 10 10 26 48 2 106 48 13 114 26 19 106 26 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00444;
},
{
glyphname = four.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"404 145 LINE",
"387 57 LINE",
"386 53 OFFCURVE",
"381 26 OFFCURVE",
"381 18 QCURVE SMOOTH",
"381 9 OFFCURVE",
"391 0 OFFCURVE",
"406 0 QCURVE SMOOTH",
"457 0 LINE",
"510 296 LINE",
"511 300 OFFCURVE",
"516 327 OFFCURVE",
"516 335 QCURVE SMOOTH",
"516 344 OFFCURVE",
"506 353 OFFCURVE",
"491 353 QCURVE SMOOTH",
"441 353 LINE",
"414 210 LINE",
"132 210 LINE",
"137 238 LINE SMOOTH",
"147 291 OFFCURVE",
"237 382 OFFCURVE",
"314 432 QCURVE SMOOTH",
"393 484 OFFCURVE",
"483 551 OFFCURVE",
"556 639 OFFCURVE",
"569 691 QCURVE SMOOTH",
"570 695 OFFCURVE",
"573 708 OFFCURVE",
"573 713 QCURVE SMOOTH",
"573 728 OFFCURVE",
"554 728 QCURVE SMOOTH",
"494 728 LINE",
"485 677 OFFCURVE",
"422 594 OFFCURVE",
"341 533 OFFCURVE",
"271 486 QCURVE SMOOTH",
"210 446 OFFCURVE",
"126 377 OFFCURVE",
"64 288 OFFCURVE",
"56 234 QCURVE SMOOTH",
"51 202 LINE",
"50 198 OFFCURVE",
"45 171 OFFCURVE",
"45 163 QCURVE SMOOTH",
"45 154 OFFCURVE",
"55 145 OFFCURVE",
"69 145 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 30 14 47 28 106 23 47 47 14 42 39 12 114 17 14 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00445;
},
{
glyphname = five.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"19 25 LINE",
"49 10 OFFCURVE",
"147 -12 OFFCURVE",
"208 -12 QCURVE SMOOTH",
"302 -12 OFFCURVE",
"447 66 OFFCURVE",
"527 201 OFFCURVE",
"527 284 QCURVE SMOOTH",
"527 354 OFFCURVE",
"438 445 OFFCURVE",
"335 445 QCURVE SMOOTH",
"301 445 OFFCURVE",
"231 437 OFFCURVE",
"204 432 QCURVE",
"244 658 LINE",
"555 658 LINE",
"567 727 LINE",
"181 727 LINE",
"126 413 LINE SMOOTH",
"120 383 OFFCURVE",
"120 378 QCURVE SMOOTH",
"120 362 OFFCURVE",
"138 362 QCURVE SMOOTH",
"148 362 OFFCURVE",
"169 365 QCURVE SMOOTH",
"233 376 OFFCURVE",
"301 376 QCURVE SMOOTH",
"440 376 OFFCURVE",
"440 270 QCURVE SMOOTH",
"440 204 OFFCURVE",
"378 107 OFFCURVE",
"271 55 OFFCURVE",
"204 55 QCURVE SMOOTH",
"160 55 OFFCURVE",
"79 75 OFFCURVE",
"51 89 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
24 8 106 24 24 17 31 2 106 31 13 114 17 20 106 17 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00446;
},
{
glyphname = six.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"545 375 OFFCURVE",
"446 464 OFFCURVE",
"352 464 QCURVE SMOOTH",
"302 464 OFFCURVE",
"211 428 OFFCURVE",
"180 402 QCURVE",
"213 508 OFFCURVE",
"386 660 OFFCURVE",
"548 660 QCURVE",
"560 726 LINE",
"411 726 OFFCURVE",
"224 628 OFFCURVE",
"167 537 QCURVE SMOOTH",
"117 456 OFFCURVE",
"66 262 OFFCURVE",
"66 180 QCURVE SMOOTH",
"66 96 OFFCURVE",
"152 -13 OFFCURVE",
"261 -13 QCURVE SMOOTH",
"346 -13 OFFCURVE",
"475 73 OFFCURVE",
"545 212 OFFCURVE",
"545 289 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"211 48 OFFCURVE",
"145 121 OFFCURVE",
"145 187 QCURVE SMOOTH",
"145 247 OFFCURVE",
"188 344 OFFCURVE",
"273 399 OFFCURVE",
"333 399 QCURVE SMOOTH",
"397 399 OFFCURVE",
"463 338 OFFCURVE",
"463 276 QCURVE SMOOTH",
"463 217 OFFCURVE",
"418 113 OFFCURVE",
"331 48 OFFCURVE",
"272 48 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
19 29 106 16 8 19 19 3 12 13 106 12 4 114 3 36 106 3 13 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00447;
},
{
glyphname = seven.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"139 58 LINE",
"138 55 OFFCURVE",
"133 26 OFFCURVE",
"133 18 QCURVE SMOOTH",
"133 9 OFFCURVE",
"143 0 OFFCURVE",
"158 0 QCURVE SMOOTH",
"206 0 LINE",
"222 88 LINE SMOOTH",
"233 147 OFFCURVE",
"257 228 OFFCURVE",
"315 317 OFFCURVE",
"367 357 QCURVE SMOOTH",
"444 414 LINE SMOOTH",
"497 451 OFFCURVE",
"550 499 OFFCURVE",
"587 569 OFFCURVE",
"596 624 QCURVE SMOOTH",
"613 727 LINE",
"154 727 LINE",
"142 658 LINE",
"527 658 LINE",
"519 613 LINE SMOOTH",
"512 575 OFFCURVE",
"480 522 OFFCURVE",
"437 487 OFFCURVE",
"398 460 QCURVE SMOOTH",
"351 429 OFFCURVE",
"310 394 QCURVE SMOOTH",
"256 348 OFFCURVE",
"191 255 OFFCURVE",
"155 154 OFFCURVE",
"144 88 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
28 24 12 114 12 11 106 12 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00448;
},
{
glyphname = eight.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"542 315 OFFCURVE",
"499 350 QCURVE",
"490 358 OFFCURVE",
"474 367 QCURVE",
"464 372 OFFCURVE",
"456 380 OFFCURVE",
"456 386 QCURVE SMOOTH",
"456 391 OFFCURVE",
"468 400 OFFCURVE",
"476 405 QCURVE",
"493 413 OFFCURVE",
"508 425 QCURVE SMOOTH",
"542 452 OFFCURVE",
"577 536 OFFCURVE",
"577 580 QCURVE SMOOTH",
"577 627 OFFCURVE",
"534 696 OFFCURVE",
"448 734 OFFCURVE",
"387 734 QCURVE SMOOTH",
"318 734 OFFCURVE",
"201 676 OFFCURVE",
"131 573 OFFCURVE",
"131 507 QCURVE SMOOTH",
"131 479 OFFCURVE",
"147 437 OFFCURVE",
"158 425 QCURVE SMOOTH",
"170 412 OFFCURVE",
"182 405 QCURVE",
"188 401 OFFCURVE",
"195 393 OFFCURVE",
"195 388 QCURVE SMOOTH",
"195 382 OFFCURVE",
"183 373 OFFCURVE",
"170 367 QCURVE SMOOTH",
"150 358 OFFCURVE",
"139 350 QCURVE",
"92 319 OFFCURVE",
"45 213 OFFCURVE",
"45 153 QCURVE SMOOTH",
"45 73 OFFCURVE",
"153 -14 OFFCURVE",
"255 -14 QCURVE SMOOTH",
"336 -14 OFFCURVE",
"467 50 OFFCURVE",
"542 167 OFFCURVE",
"542 244 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"271 414 OFFCURVE",
"208 464 OFFCURVE",
"208 513 QCURVE SMOOTH",
"208 561 OFFCURVE",
"254 633 OFFCURVE",
"331 672 OFFCURVE",
"376 672 QCURVE SMOOTH",
"432 672 OFFCURVE",
"498 622 OFFCURVE",
"498 571 QCURVE SMOOTH",
"498 522 OFFCURVE",
"451 451 OFFCURVE",
"375 414 OFFCURVE",
"331 414 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"202 55 OFFCURVE",
"123 115 OFFCURVE",
"123 171 QCURVE SMOOTH",
"123 225 OFFCURVE",
"178 307 OFFCURVE",
"268 350 OFFCURVE",
"319 350 QCURVE SMOOTH",
"389 350 OFFCURVE",
"464 288 OFFCURVE",
"464 232 QCURVE SMOOTH",
"464 178 OFFCURVE",
"408 98 OFFCURVE",
"318 55 OFFCURVE",
"268 55 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
15 38 66 59 106 66 66 3 26 52 106 26 5 114 3 73 106 3 13 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00449;
},
{
glyphname = nine.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"96 345 OFFCURVE",
"195 256 OFFCURVE",
"289 256 QCURVE SMOOTH",
"339 256 OFFCURVE",
"430 292 OFFCURVE",
"461 318 QCURVE",
"428 213 OFFCURVE",
"256 66 OFFCURVE",
"93 66 QCURVE",
"81 0 LINE",
"231 0 OFFCURVE",
"419 93 OFFCURVE",
"475 183 QCURVE SMOOTH",
"525 264 OFFCURVE",
"576 458 OFFCURVE",
"576 540 QCURVE SMOOTH",
"576 624 OFFCURVE",
"489 733 OFFCURVE",
"380 733 QCURVE SMOOTH",
"295 733 OFFCURVE",
"166 647 OFFCURVE",
"96 508 OFFCURVE",
"96 431 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"430 672 OFFCURVE",
"496 599 OFFCURVE",
"496 533 QCURVE SMOOTH",
"496 473 OFFCURVE",
"453 376 OFFCURVE",
"368 321 OFFCURVE",
"308 321 QCURVE SMOOTH",
"245 321 OFFCURVE",
"178 383 OFFCURVE",
"178 444 QCURVE SMOOTH",
"178 503 OFFCURVE",
"223 607 OFFCURVE",
"310 672 OFFCURVE",
"369 672 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
19 29 106 8 16 19 19 3 12 13 106 12 12 114 3 36 106 3 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00450;
},
{
glyphname = onesuperior;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"132 727 LINE",
"123 679 LINE",
"164 679 LINE",
"106 349 LINE SMOOTH",
"103 331 OFFCURVE",
"103 325 QCURVE SMOOTH",
"103 311 OFFCURVE",
"121 311 QCURVE SMOOTH",
"159 311 LINE",
"225 689 LINE SMOOTH",
"228 707 OFFCURVE",
"228 713 QCURVE SMOOTH",
"228 727 OFFCURVE",
"210 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
12 11 106 12 234 114 4 236 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 200;
}
);
note = uni00B9;
unicode = 00B9;
},
{
glyphname = twosuperior;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"307 314 LINE",
"316 368 LINE",
"121 368 LINE",
"124 385 LINE SMOOTH",
"128 408 OFFCURVE",
"157 442 OFFCURVE",
"198 466 OFFCURVE",
"230 481 QCURVE SMOOTH",
"294 511 OFFCURVE",
"365 588 OFFCURVE",
"365 646 QCURVE SMOOTH",
"365 689 OFFCURVE",
"301 733 OFFCURVE",
"242 733 QCURVE SMOOTH",
"211 733 OFFCURVE",
"149 716 OFFCURVE",
"126 704 QCURVE",
"138 657 LINE",
"157 667 OFFCURVE",
"205 680 OFFCURVE",
"230 680 QCURVE SMOOTH",
"306 680 OFFCURVE",
"306 630 QCURVE SMOOTH",
"306 603 OFFCURVE",
"275 563 OFFCURVE",
"234 538 OFFCURVE",
"205 524 QCURVE SMOOTH",
"164 505 OFFCURVE",
"113 473 OFFCURVE",
"73 422 OFFCURVE",
"66 386 QCURVE SMOOTH",
"60 352 LINE SMOOTH",
"57 334 OFFCURVE",
"57 328 QCURVE SMOOTH",
"57 314 OFFCURVE",
"75 314 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
35 32 106 35 236 114 21 14 106 21 235 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 345;
}
);
note = uni00B2;
unicode = 00B2;
},
{
glyphname = threesuperior;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"45 334 LINE",
"63 323 OFFCURVE",
"121 308 OFFCURVE",
"156 308 QCURVE SMOOTH",
"206 308 OFFCURVE",
"287 344 OFFCURVE",
"334 412 OFFCURVE",
"334 458 QCURVE SMOOTH",
"334 483 OFFCURVE",
"316 511 OFFCURVE",
"301 520 QCURVE SMOOTH",
"296 523 OFFCURVE",
"288 528 OFFCURVE",
"283 532 OFFCURVE",
"283 534 QCURVE SMOOTH",
"283 537 OFFCURVE",
"291 544 OFFCURVE",
"297 547 QCURVE SMOOTH",
"303 550 OFFCURVE",
"308 554 QCURVE",
"333 571 OFFCURVE",
"358 621 OFFCURVE",
"358 651 QCURVE SMOOTH",
"358 694 OFFCURVE",
"295 733 OFFCURVE",
"240 733 QCURVE SMOOTH",
"213 733 OFFCURVE",
"155 718 OFFCURVE",
"132 707 QCURVE",
"139 655 LINE",
"159 666 OFFCURVE",
"208 682 OFFCURVE",
"231 682 QCURVE SMOOTH",
"262 682 OFFCURVE",
"296 661 OFFCURVE",
"296 639 QCURVE SMOOTH",
"296 597 OFFCURVE",
"237 556 OFFCURVE",
"192 556 QCURVE SMOOTH",
"167 556 LINE",
"158 502 LINE",
"190 502 LINE SMOOTH",
"233 502 OFFCURVE",
"272 473 OFFCURVE",
"272 446 QCURVE SMOOTH",
"272 418 OFFCURVE",
"241 379 OFFCURVE",
"193 360 OFFCURVE",
"166 360 QCURVE SMOOTH",
"137 360 OFFCURVE",
"86 373 OFFCURVE",
"68 382 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
35 10 11 106 10 10 25 47 2 106 47 237 114 25 18 106 25 235 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 351;
}
);
note = uni00B3;
unicode = 00B3;
},
{
glyphname = fraction;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-66 -32 LINE",
"-17 -32 LINE SMOOTH",
"-6 -32 OFFCURVE",
"9 -23 OFFCURVE",
"19 -11 QCURVE",
"600 743 LINE",
"549 743 LINE SMOOTH",
"538 743 OFFCURVE",
"521 734 OFFCURVE",
"512 722 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
8 239 3 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 471;
}
);
note = uni2044;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"33 -32 LINE",
"82 -32 LINE SMOOTH",
"93 -32 OFFCURVE",
"108 -23 OFFCURVE",
"118 -11 QCURVE",
"699 743 LINE",
"648 743 LINE SMOOTH",
"637 743 OFFCURVE",
"620 734 OFFCURVE",
"611 722 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"172 727 LINE",
"163 679 LINE",
"204 679 LINE",
"146 349 LINE SMOOTH",
"143 331 OFFCURVE",
"143 325 QCURVE SMOOTH",
"143 311 OFFCURVE",
"161 311 QCURVE SMOOTH",
"199 311 LINE",
"265 689 LINE SMOOTH",
"268 707 OFFCURVE",
"268 713 QCURVE SMOOTH",
"268 727 OFFCURVE",
"250 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"678 0 LINE",
"687 54 LINE",
"492 54 LINE",
"495 71 LINE SMOOTH",
"499 94 OFFCURVE",
"528 128 OFFCURVE",
"569 152 OFFCURVE",
"601 167 QCURVE SMOOTH",
"665 197 OFFCURVE",
"736 274 OFFCURVE",
"736 332 QCURVE SMOOTH",
"736 375 OFFCURVE",
"672 419 OFFCURVE",
"613 419 QCURVE SMOOTH",
"582 419 OFFCURVE",
"520 402 OFFCURVE",
"497 390 QCURVE",
"509 343 LINE",
"528 353 OFFCURVE",
"576 366 OFFCURVE",
"601 366 QCURVE SMOOTH",
"677 366 OFFCURVE",
"677 316 QCURVE SMOOTH",
"677 289 OFFCURVE",
"646 249 OFFCURVE",
"605 224 OFFCURVE",
"576 210 QCURVE SMOOTH",
"535 191 OFFCURVE",
"484 159 OFFCURVE",
"444 108 OFFCURVE",
"437 72 QCURVE SMOOTH",
"431 38 LINE SMOOTH",
"428 20 OFFCURVE",
"428 14 QCURVE SMOOTH",
"428 0 OFFCURVE",
"446 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
59 56 106 25 59 232 114 45 38 106 45 231 114 22 21 106 22 234 114 14 236 114 8 239 3 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 761;
}
);
note = uni00BD;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"33 -32 LINE",
"82 -32 LINE SMOOTH",
"93 -32 OFFCURVE",
"108 -23 OFFCURVE",
"118 -11 QCURVE",
"699 743 LINE",
"648 743 LINE SMOOTH",
"637 743 OFFCURVE",
"620 734 OFFCURVE",
"611 722 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"164 727 LINE",
"155 679 LINE",
"196 679 LINE",
"138 349 LINE SMOOTH",
"135 331 OFFCURVE",
"135 325 QCURVE SMOOTH",
"135 311 OFFCURVE",
"153 311 QCURVE SMOOTH",
"191 311 LINE",
"257 689 LINE SMOOTH",
"260 707 OFFCURVE",
"260 713 QCURVE SMOOTH",
"260 727 OFFCURVE",
"242 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"574 80 LINE",
"567 38 LINE SMOOTH",
"564 20 OFFCURVE",
"564 14 QCURVE SMOOTH",
"564 0 OFFCURVE",
"582 0 QCURVE SMOOTH",
"619 0 LINE",
"650 172 LINE SMOOTH",
"653 190 OFFCURVE",
"653 196 QCURVE SMOOTH",
"653 210 OFFCURVE",
"635 210 QCURVE SMOOTH",
"597 210 LINE",
"583 132 LINE",
"447 132 LINE",
"449 140 LINE SMOOTH",
"456 170 OFFCURVE",
"507 218 OFFCURVE",
"553 249 QCURVE SMOOTH",
"606 284 OFFCURVE",
"671 350 OFFCURVE",
"681 388 QCURVE",
"682 391 OFFCURVE",
"684 401 OFFCURVE",
"684 405 QCURVE SMOOTH",
"684 417 OFFCURVE",
"668 417 QCURVE SMOOTH",
"627 417 LINE",
"622 388 OFFCURVE",
"590 342 OFFCURVE",
"548 307 OFFCURVE",
"516 286 QCURVE SMOOTH",
"480 262 OFFCURVE",
"431 222 OFFCURVE",
"394 169 OFFCURVE",
"389 137 QCURVE SMOOTH",
"386 118 LINE SMOOTH",
"383 100 OFFCURVE",
"383 94 QCURVE SMOOTH",
"383 80 OFFCURVE",
"401 80 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
64 49 106 51 64 64 36 57 232 114 36 230 114 22 21 106 22 234 114 14 236 114 8 239 3 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 701;
}
);
note = uni00BC;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"128 -32 LINE",
"177 -32 LINE SMOOTH",
"188 -32 OFFCURVE",
"203 -23 OFFCURVE",
"213 -11 QCURVE",
"794 743 LINE",
"743 743 LINE SMOOTH",
"732 743 OFFCURVE",
"715 734 OFFCURVE",
"706 722 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"76 334 LINE",
"94 323 OFFCURVE",
"152 308 OFFCURVE",
"187 308 QCURVE SMOOTH",
"237 308 OFFCURVE",
"318 344 OFFCURVE",
"365 412 OFFCURVE",
"365 458 QCURVE SMOOTH",
"365 483 OFFCURVE",
"347 511 OFFCURVE",
"332 520 QCURVE SMOOTH",
"327 523 OFFCURVE",
"319 528 OFFCURVE",
"314 532 OFFCURVE",
"314 534 QCURVE SMOOTH",
"314 537 OFFCURVE",
"322 544 OFFCURVE",
"328 547 QCURVE SMOOTH",
"334 550 OFFCURVE",
"339 554 QCURVE",
"364 571 OFFCURVE",
"389 621 OFFCURVE",
"389 651 QCURVE SMOOTH",
"389 694 OFFCURVE",
"326 733 OFFCURVE",
"271 733 QCURVE SMOOTH",
"244 733 OFFCURVE",
"186 718 OFFCURVE",
"163 707 QCURVE",
"170 655 LINE",
"190 666 OFFCURVE",
"239 682 OFFCURVE",
"262 682 QCURVE SMOOTH",
"293 682 OFFCURVE",
"327 661 OFFCURVE",
"327 639 QCURVE SMOOTH",
"327 597 OFFCURVE",
"268 556 OFFCURVE",
"223 556 QCURVE SMOOTH",
"198 556 LINE",
"189 502 LINE",
"221 502 LINE SMOOTH",
"264 502 OFFCURVE",
"303 473 OFFCURVE",
"303 446 QCURVE SMOOTH",
"303 418 OFFCURVE",
"272 379 OFFCURVE",
"224 360 OFFCURVE",
"197 360 QCURVE SMOOTH",
"168 360 OFFCURVE",
"117 373 OFFCURVE",
"99 382 QCURVE"
);
},
{
closed = 1;
nodes = (
"669 80 LINE",
"662 38 LINE SMOOTH",
"659 20 OFFCURVE",
"659 14 QCURVE SMOOTH",
"659 0 OFFCURVE",
"677 0 QCURVE SMOOTH",
"714 0 LINE",
"745 172 LINE SMOOTH",
"748 190 OFFCURVE",
"748 196 QCURVE SMOOTH",
"748 210 OFFCURVE",
"730 210 QCURVE SMOOTH",
"692 210 LINE",
"678 132 LINE",
"542 132 LINE",
"544 140 LINE SMOOTH",
"551 170 OFFCURVE",
"602 218 OFFCURVE",
"648 249 QCURVE SMOOTH",
"701 284 OFFCURVE",
"766 350 OFFCURVE",
"776 388 QCURVE",
"777 391 OFFCURVE",
"779 401 OFFCURVE",
"779 405 QCURVE SMOOTH",
"779 417 OFFCURVE",
"763 417 QCURVE SMOOTH",
"722 417 LINE",
"717 388 OFFCURVE",
"685 342 OFFCURVE",
"643 307 OFFCURVE",
"611 286 QCURVE SMOOTH",
"575 262 OFFCURVE",
"526 222 OFFCURVE",
"489 169 OFFCURVE",
"484 137 QCURVE SMOOTH",
"481 118 LINE SMOOTH",
"478 100 OFFCURVE",
"478 94 QCURVE SMOOTH",
"478 80 OFFCURVE",
"496 80 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
102 87 106 89 102 102 74 95 232 114 74 230 114 46 20 21 106 20 20 35 57 12 106 57 237 114 35 28 106 35 235 114 8 239 3 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 796;
}
);
note = uni00BE;
unicode = 00BE;
},
{
glyphname = onehalf.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-28 -32 LINE",
"18 -32 LINE SMOOTH",
"28 -32 OFFCURVE",
"43 -23 OFFCURVE",
"52 -11 QCURVE SMOOTH",
"592 743 LINE",
"544 743 LINE SMOOTH",
"533 743 OFFCURVE",
"517 734 OFFCURVE",
"509 722 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"108 727 LINE",
"99 679 LINE",
"136 679 LINE",
"79 349 LINE SMOOTH",
"76 331 OFFCURVE",
"76 325 QCURVE SMOOTH",
"76 318 OFFCURVE",
"83 311 OFFCURVE",
"92 311 QCURVE SMOOTH",
"128 311 LINE",
"194 689 LINE SMOOTH",
"197 707 OFFCURVE",
"197 713 QCURVE SMOOTH",
"197 720 OFFCURVE",
"190 727 OFFCURVE",
"181 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"563 0 LINE",
"572 54 LINE",
"395 54 LINE",
"398 71 LINE SMOOTH",
"402 94 OFFCURVE",
"429 128 OFFCURVE",
"467 152 OFFCURVE",
"496 167 QCURVE SMOOTH",
"555 197 OFFCURVE",
"621 275 OFFCURVE",
"621 334 QCURVE SMOOTH",
"621 376 OFFCURVE",
"563 419 OFFCURVE",
"510 419 QCURVE SMOOTH",
"481 419 OFFCURVE",
"424 402 OFFCURVE",
"403 390 QCURVE",
"413 343 LINE",
"430 353 OFFCURVE",
"475 366 OFFCURVE",
"498 366 QCURVE SMOOTH",
"565 366 OFFCURVE",
"565 317 QCURVE SMOOTH",
"565 290 OFFCURVE",
"536 249 OFFCURVE",
"499 224 OFFCURVE",
"472 210 QCURVE SMOOTH",
"435 191 OFFCURVE",
"388 159 OFFCURVE",
"351 108 OFFCURVE",
"344 72 QCURVE SMOOTH",
"338 38 LINE SMOOTH",
"335 20 OFFCURVE",
"335 14 QCURVE SMOOTH",
"335 0 OFFCURVE",
"352 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
61 58 106 61 232 114 47 40 106 47 231 114 24 23 106 24 234 114 15 236 114 9 239 4 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00458;
},
{
glyphname = onequarter.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-9 -32 LINE",
"38 -32 LINE SMOOTH",
"48 -32 OFFCURVE",
"64 -23 OFFCURVE",
"73 -11 QCURVE SMOOTH",
"625 743 LINE",
"576 743 LINE SMOOTH",
"565 743 OFFCURVE",
"549 734 OFFCURVE",
"541 722 QCURVE"
);
},
{
closed = 1;
nodes = (
"121 727 LINE",
"112 679 LINE",
"150 679 LINE",
"93 349 LINE SMOOTH",
"90 331 OFFCURVE",
"90 325 QCURVE SMOOTH",
"90 318 OFFCURVE",
"98 311 OFFCURVE",
"107 311 QCURVE SMOOTH",
"143 311 LINE",
"209 689 LINE SMOOTH",
"212 707 OFFCURVE",
"212 713 QCURVE SMOOTH",
"212 727 OFFCURVE",
"195 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"501 80 LINE",
"494 38 LINE SMOOTH",
"491 20 OFFCURVE",
"491 14 QCURVE SMOOTH",
"491 0 OFFCURVE",
"508 0 QCURVE SMOOTH",
"543 0 LINE",
"574 172 LINE SMOOTH",
"577 190 OFFCURVE",
"577 196 QCURVE SMOOTH",
"577 203 OFFCURVE",
"569 210 OFFCURVE",
"560 210 QCURVE SMOOTH",
"524 210 LINE",
"510 132 LINE",
"384 132 LINE",
"386 140 LINE SMOOTH",
"391 161 OFFCURVE",
"418 198 OFFCURVE",
"455 228 OFFCURVE",
"484 249 QCURVE SMOOTH",
"534 284 OFFCURVE",
"596 350 OFFCURVE",
"606 388 QCURVE",
"607 391 OFFCURVE",
"609 401 OFFCURVE",
"609 405 QCURVE SMOOTH",
"609 417 OFFCURVE",
"593 417 QCURVE SMOOTH",
"554 417 LINE",
"549 388 OFFCURVE",
"519 342 OFFCURVE",
"479 307 OFFCURVE",
"449 286 QCURVE SMOOTH",
"415 262 OFFCURVE",
"368 221 OFFCURVE",
"333 169 OFFCURVE",
"328 137 QCURVE SMOOTH",
"325 118 LINE SMOOTH",
"322 100 OFFCURVE",
"322 94 QCURVE SMOOTH",
"322 80 OFFCURVE",
"339 80 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
67 51 106 67 67 37 60 232 114 37 230 114 23 22 106 23 234 114 14 236 114 8 239 3 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00459;
},
{
glyphname = threequarters.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"46 -32 LINE",
"92 -32 LINE SMOOTH",
"102 -32 OFFCURVE",
"117 -23 OFFCURVE",
"126 -11 QCURVE SMOOTH",
"659 743 LINE",
"611 743 LINE SMOOTH",
"600 743 OFFCURVE",
"585 734 OFFCURVE",
"577 722 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"6 334 LINE",
"22 323 OFFCURVE",
"74 308 OFFCURVE",
"105 308 QCURVE SMOOTH",
"150 308 OFFCURVE",
"225 344 OFFCURVE",
"268 413 OFFCURVE",
"268 460 QCURVE SMOOTH",
"268 484 OFFCURVE",
"252 512 OFFCURVE",
"239 520 QCURVE SMOOTH",
"231 525 OFFCURVE",
"224 531 OFFCURVE",
"224 534 QCURVE SMOOTH",
"224 537 OFFCURVE",
"231 543 OFFCURVE",
"236 547 QCURVE",
"241 550 OFFCURVE",
"246 554 QCURVE SMOOTH",
"270 572 OFFCURVE",
"293 622 OFFCURVE",
"293 653 QCURVE SMOOTH",
"293 695 OFFCURVE",
"236 733 OFFCURVE",
"188 733 QCURVE SMOOTH",
"163 733 OFFCURVE",
"111 718 OFFCURVE",
"90 707 QCURVE",
"95 655 LINE",
"113 666 OFFCURVE",
"158 682 OFFCURVE",
"178 682 QCURVE SMOOTH",
"205 682 OFFCURVE",
"235 661 OFFCURVE",
"235 640 QCURVE SMOOTH",
"235 597 OFFCURVE",
"182 556 OFFCURVE",
"141 556 QCURVE SMOOTH",
"119 556 LINE",
"110 502 LINE",
"138 502 LINE SMOOTH",
"210 502 OFFCURVE",
"210 447 QCURVE SMOOTH",
"210 418 OFFCURVE",
"183 379 OFFCURVE",
"139 360 OFFCURVE",
"115 360 QCURVE SMOOTH",
"89 360 OFFCURVE",
"43 373 OFFCURVE",
"28 382 QCURVE"
);
},
{
closed = 1;
nodes = (
"534 80 LINE",
"527 38 LINE SMOOTH",
"524 20 OFFCURVE",
"524 14 QCURVE SMOOTH",
"524 0 OFFCURVE",
"541 0 QCURVE SMOOTH",
"575 0 LINE",
"606 172 LINE SMOOTH",
"609 190 OFFCURVE",
"609 196 QCURVE SMOOTH",
"609 210 OFFCURVE",
"593 210 QCURVE SMOOTH",
"557 210 LINE",
"543 132 LINE",
"424 132 LINE",
"426 140 LINE SMOOTH",
"433 170 OFFCURVE",
"479 218 OFFCURVE",
"521 249 QCURVE SMOOTH",
"568 284 OFFCURVE",
"627 350 OFFCURVE",
"637 388 QCURVE SMOOTH",
"640 400 OFFCURVE",
"640 405 QCURVE SMOOTH",
"640 411 OFFCURVE",
"633 417 OFFCURVE",
"625 417 QCURVE SMOOTH",
"587 417 LINE",
"582 388 OFFCURVE",
"553 342 OFFCURVE",
"515 307 OFFCURVE",
"486 286 QCURVE SMOOTH",
"454 262 OFFCURVE",
"409 221 OFFCURVE",
"375 169 OFFCURVE",
"370 137 QCURVE SMOOTH",
"367 118 LINE SMOOTH",
"366 112 OFFCURVE",
"364 100 OFFCURVE",
"364 94 QCURVE SMOOTH",
"364 87 OFFCURVE",
"371 80 OFFCURVE",
"380 80 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
102 87 106 89 102 102 74 95 232 114 74 230 114 44 19 20 106 19 19 34 55 12 106 55 237 114 34 27 106 34 235 114 8 239 3 238 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00460;
},
{
glyphname = period;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"55 0 LINE",
"157 0 LINE",
"172 89 LINE",
"70 89 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
3 0 106 3 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 227;
}
);
leftKerningGroup = period;
note = uni002E;
rightKerningGroup = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"58 -126 LINE",
"63 -127 OFFCURVE",
"110 -90 OFFCURVE",
"157 -14 OFFCURVE",
"165 44 QCURVE",
"173 89 LINE",
"71 89 LINE",
"55 0 LINE",
"99 0 LINE",
"95 -26 OFFCURVE",
"58 -76 OFFCURVE",
"34 -95 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
10 3 3 4 106 3 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 216;
}
);
leftKerningGroup = comma;
note = uni002C;
rightKerningGroup = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"66 0 LINE",
"168 0 LINE",
"183 89 LINE",
"81 89 LINE"
);
},
{
closed = 1;
nodes = (
"130 396 LINE",
"232 396 LINE",
"247 485 LINE",
"145 485 LINE"
);
},
{
closed = 1;
nodes = (
"176 515 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
4 6 106 4 4 9 8 6 114 3 1 106 3 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 268;
}
);
leftKerningGroup = colon;
note = uni003A;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"69 -126 LINE",
"74 -127 OFFCURVE",
"121 -90 OFFCURVE",
"168 -14 OFFCURVE",
"176 44 QCURVE",
"184 89 LINE",
"82 89 LINE",
"66 0 LINE",
"110 0 LINE",
"106 -26 OFFCURVE",
"69 -76 OFFCURVE",
"45 -95 QCURVE"
);
},
{
closed = 1;
nodes = (
"131 396 LINE",
"233 396 LINE",
"248 485 LINE",
"146 485 LINE"
);
},
{
closed = 1;
nodes = (
"191 515 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
12 14 106 12 12 17 16 6 114 10 3 3 5 106 3 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 268;
}
);
leftKerningGroup = colon;
note = uni003B;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"55 0 LINE",
"157 0 LINE",
"172 89 LINE",
"70 89 LINE"
);
},
{
closed = 1;
nodes = (
"275 0 LINE",
"377 0 LINE",
"392 89 LINE",
"290 89 LINE"
);
},
{
closed = 1;
nodes = (
"495 0 LINE",
"597 0 LINE",
"612 89 LINE",
"510 89 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
8 0 7 4 106 7 11 3 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 667;
}
);
leftKerningGroup = period;
note = uni2026;
rightKerningGroup = period;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"189 727 LINE",
"103 239 LINE",
"102 235 OFFCURVE",
"97 208 OFFCURVE",
"97 200 QCURVE SMOOTH",
"97 191 OFFCURVE",
"107 182 OFFCURVE",
"121 182 QCURVE SMOOTH",
"169 182 LINE",
"255 670 LINE",
"256 674 OFFCURVE",
"261 701 OFFCURVE",
"261 709 QCURVE SMOOTH",
"261 718 OFFCURVE",
"251 727 OFFCURVE",
"237 727 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"49 0 LINE",
"151 0 LINE",
"167 89 LINE",
"65 89 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
7 7 15 19 16 106 19 18 114 15 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 241;
}
);
note = uni0021;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"232 549 LINE",
"130 549 LINE",
"114 460 LINE",
"216 460 LINE"
);
},
{
closed = 1;
nodes = (
"92 -178 LINE",
"178 310 LINE",
"179 314 OFFCURVE",
"184 341 OFFCURVE",
"184 349 QCURVE SMOOTH",
"184 358 OFFCURVE",
"174 367 OFFCURVE",
"160 367 QCURVE SMOOTH",
"112 367 LINE",
"26 -121 LINE",
"25 -125 OFFCURVE",
"20 -152 OFFCURVE",
"20 -160 QCURVE SMOOTH",
"20 -169 OFFCURVE",
"30 -178 OFFCURVE",
"44 -178 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
11 11 4 2 1 106 2 2 7 4 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MIRP[00100]\011/* MoveIndirectRelPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 222;
}
);
note = uni00A1;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"128 230 OFFCURVE",
"126 219 QCURVE",
"123 207 OFFCURVE",
"123 200 QCURVE SMOOTH",
"123 191 OFFCURVE",
"133 182 OFFCURVE",
"147 182 QCURVE SMOOTH",
"195 182 LINE",
"203 225 LINE SMOOTH",
"209 256 OFFCURVE",
"241 298 OFFCURVE",
"282 323 OFFCURVE",
"317 340 QCURVE",
"322 343 OFFCURVE",
"340 352 QCURVE",
"358 360 OFFCURVE",
"373 369 QCURVE SMOOTH",
"442 409 OFFCURVE",
"505 509 OFFCURVE",
"505 581 QCURVE SMOOTH",
"505 659 OFFCURVE",
"402 734 OFFCURVE",
"311 734 QCURVE SMOOTH",
"260 734 OFFCURVE",
"168 718 OFFCURVE",
"135 707 QCURVE",
"143 641 LINE",
"144 635 OFFCURVE",
"150 628 OFFCURVE",
"154 628 QCURVE SMOOTH",
"160 628 OFFCURVE",
"174 637 QCURVE",
"197 650 OFFCURVE",
"249 664 OFFCURVE",
"292 664 QCURVE SMOOTH",
"351 664 OFFCURVE",
"425 618 OFFCURVE",
"425 564 QCURVE SMOOTH",
"425 518 OFFCURVE",
"386 453 OFFCURVE",
"323 410 OFFCURVE",
"276 389 QCURVE SMOOTH",
"232 370 OFFCURVE",
"180 338 OFFCURVE",
"137 280 OFFCURVE",
"129 235 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"74 0 LINE",
"176 0 LINE",
"192 89 LINE",
"90 89 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
79 37 95 37 2 37 37 22 49 46 106 49 18 114 22 10 106 22 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 525;
}
);
note = uni003F;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"451 551 LINE",
"349 551 LINE",
"333 462 LINE",
"435 462 LINE"
);
},
{
closed = 1;
nodes = (
"397 321 OFFCURVE",
"400 333 QCURVE",
"402 344 OFFCURVE",
"402 351 QCURVE SMOOTH",
"402 360 OFFCURVE",
"392 369 OFFCURVE",
"378 369 QCURVE SMOOTH",
"330 369 LINE",
"322 326 LINE SMOOTH",
"316 295 OFFCURVE",
"284 253 OFFCURVE",
"243 228 OFFCURVE",
"208 211 QCURVE",
"203 208 OFFCURVE",
"185 200 QCURVE",
"167 191 OFFCURVE",
"152 182 QCURVE SMOOTH",
"83 141 OFFCURVE",
"20 41 OFFCURVE",
"20 -30 QCURVE SMOOTH",
"20 -108 OFFCURVE",
"123 -183 OFFCURVE",
"214 -183 QCURVE SMOOTH",
"265 -183 OFFCURVE",
"357 -167 OFFCURVE",
"390 -156 QCURVE",
"382 -90 LINE",
"381 -84 OFFCURVE",
"375 -77 OFFCURVE",
"371 -77 QCURVE SMOOTH",
"365 -77 OFFCURVE",
"351 -86 QCURVE",
"328 -99 OFFCURVE",
"276 -113 OFFCURVE",
"233 -113 QCURVE SMOOTH",
"174 -113 OFFCURVE",
"100 -67 OFFCURVE",
"100 -13 QCURVE SMOOTH",
"100 33 OFFCURVE",
"139 98 OFFCURVE",
"202 141 OFFCURVE",
"249 162 QCURVE SMOOTH",
"293 181 OFFCURVE",
"345 213 OFFCURVE",
"388 271 OFFCURVE",
"396 316 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
64 42 80 42 2 42 42 26 2 1 106 2 2 26 26 14 106 26 14 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MIRP[00100]\011/* MoveIndirectRelPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 496;
}
);
note = uni00BF;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
components = (
{
name = period;
transform = "{1, 0, 0, 1, 28, 319}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 220;
}
);
note = uni00B7;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"256 264 OFFCURVE",
"300 287 OFFCURVE",
"326 332 OFFCURVE",
"326 364 QCURVE SMOOTH",
"326 397 OFFCURVE",
"300 442 OFFCURVE",
"256 464 OFFCURVE",
"231 464 QCURVE SMOOTH",
"206 464 OFFCURVE",
"163 442 OFFCURVE",
"136 396 OFFCURVE",
"136 364 QCURVE SMOOTH",
"136 332 OFFCURVE",
"163 287 OFFCURVE",
"206 264 OFFCURVE",
"231 264 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
15 7 106 15 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 394;
}
);
note = uni2022;
unicode = 2022;
},
{
glyphname = asterisk;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"330 490 LINE",
"255 574 LINE",
"344 590 LINE SMOOTH",
"361 593 OFFCURVE",
"361 606 QCURVE SMOOTH",
"361 609 OFFCURVE",
"359 615 QCURVE SMOOTH",
"344 660 LINE",
"241 613 LINE",
"254 705 LINE",
"255 716 OFFCURVE",
"246 726 OFFCURVE",
"234 726 QCURVE SMOOTH",
"186 726 LINE",
"199 614 LINE",
"117 655 LINE SMOOTH",
"111 658 OFFCURVE",
"107 658 QCURVE SMOOTH",
"95 658 OFFCURVE",
"90 642 QCURVE SMOOTH",
"75 597 LINE",
"187 573 LINE",
"122 508 LINE",
"116 501 OFFCURVE",
"116 494 QCURVE SMOOTH",
"116 486 OFFCURVE",
"126 479 QCURVE SMOOTH",
"164 451 LINE",
"221 549 LINE",
"263 468 LINE SMOOTH",
"269 457 OFFCURVE",
"278 457 QCURVE SMOOTH",
"284 457 OFFCURVE",
"291 462 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
5 5 34 19 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 326;
}
);
leftKerningGroup = asterisk;
note = uni002A;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"640 458 LINE",
"651 520 LINE",
"546 520 LINE",
"596 727 LINE",
"546 727 LINE SMOOTH",
"535 727 OFFCURVE",
"527 719 OFFCURVE",
"524 706 QCURVE SMOOTH",
"479 520 LINE",
"299 520 LINE",
"349 727 LINE",
"299 727 LINE SMOOTH",
"288 727 OFFCURVE",
"280 719 OFFCURVE",
"277 706 QCURVE SMOOTH",
"232 520 LINE",
"114 520 LINE",
"103 458 LINE",
"217 458 LINE",
"159 214 LINE",
"38 214 LINE",
"27 152 LINE",
"144 152 LINE",
"90 -73 LINE",
"140 -73 LINE SMOOTH",
"151 -73 OFFCURVE",
"159 -65 OFFCURVE",
"162 -52 QCURVE SMOOTH",
"211 152 LINE",
"391 152 LINE",
"337 -73 LINE",
"387 -73 LINE SMOOTH",
"398 -73 OFFCURVE",
"406 -65 OFFCURVE",
"409 -52 QCURVE SMOOTH",
"458 152 LINE",
"564 152 LINE",
"575 214 LINE",
"473 214 LINE",
"531 458 LINE"
);
},
{
closed = 1;
nodes = (
"464 458 LINE",
"406 214 LINE",
"226 214 LINE",
"284 458 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
16 8 36 28 1 41 4 11 18 19 106 18 18 8 28 37 23 0 22 30 40 106 30 30 8 28 16 114 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 673;
}
);
note = uni0023;
unicode = 0023;
},
{
glyphname = slash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-47 -89 LINE",
"5 -89 LINE SMOOTH",
"16 -89 OFFCURVE",
"27 -81 OFFCURVE",
"34 -68 QCURVE SMOOTH",
"516 816 LINE",
"463 816 LINE SMOOTH",
"452 816 OFFCURVE",
"441 807 OFFCURVE",
"435 795 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
3 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 402;
}
);
leftKerningGroup = slash;
note = uni002F;
rightKerningGroup = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"341 -89 LINE",
"170 795 LINE SMOOTH",
"168 807 OFFCURVE",
"159 816 OFFCURVE",
"148 816 QCURVE SMOOTH",
"95 816 LINE",
"267 -68 LINE SMOOTH",
"269 -80 OFFCURVE",
"277 -89 OFFCURVE",
"288 -89 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
3 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 389;
}
);
note = uni005C;
unicode = 005C;
},
{
glyphname = period.salt;
layers = (
{
components = (
{
name = period;
transform = "{1, 0, 0, 1, 31, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 290;
}
);
note = glyph00476;
},
{
glyphname = comma.salt;
layers = (
{
components = (
{
name = comma;
transform = "{1, 0, 0, 1, 37, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 290;
}
);
note = glyph00477;
},
{
glyphname = colon.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"77 0 LINE",
"179 0 LINE",
"194 89 LINE",
"92 89 LINE"
);
},
{
closed = 1;
nodes = (
"141 396 LINE",
"243 396 LINE",
"258 485 LINE",
"156 485 LINE"
);
},
{
closed = 1;
nodes = (
"214 515 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
4 6 106 4 4 9 8 6 114 3 1 106 3 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 290;
}
);
note = glyph00478;
},
{
glyphname = semicolon.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"80 -126 LINE",
"85 -127 OFFCURVE",
"132 -90 OFFCURVE",
"179 -14 OFFCURVE",
"187 44 QCURVE",
"195 89 LINE",
"93 89 LINE",
"77 0 LINE",
"121 0 LINE",
"117 -26 OFFCURVE",
"80 -76 OFFCURVE",
"56 -95 QCURVE"
);
},
{
closed = 1;
nodes = (
"142 396 LINE",
"244 396 LINE",
"259 485 LINE",
"157 485 LINE"
);
},
{
closed = 1;
nodes = (
"205 515 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
12 14 106 12 12 17 16 6 114 10 3 3 4 106 3 10 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 290;
}
);
note = glyph00479;
},
{
glyphname = periodcentered.salt;
layers = (
{
components = (
{
name = period;
transform = "{1, 0, 0, 1, 61, 319}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 290;
}
);
note = glyph00480;
},
{
glyphname = numbersign.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"583 458 LINE",
"594 520 LINE",
"495 520 LINE",
"544 727 LINE",
"495 727 LINE SMOOTH",
"485 727 OFFCURVE",
"477 719 OFFCURVE",
"474 706 QCURVE SMOOTH",
"429 520 LINE",
"259 520 LINE",
"308 727 LINE",
"260 727 LINE SMOOTH",
"249 727 OFFCURVE",
"241 719 OFFCURVE",
"238 706 QCURVE SMOOTH",
"194 520 LINE",
"82 520 LINE",
"71 458 LINE",
"179 458 LINE",
"122 214 LINE",
"7 214 LINE",
"-4 152 LINE",
"107 152 LINE",
"54 -73 LINE",
"102 -73 LINE SMOOTH",
"113 -73 OFFCURVE",
"121 -65 OFFCURVE",
"124 -52 QCURVE SMOOTH",
"172 152 LINE",
"342 152 LINE",
"289 -73 LINE",
"338 -73 LINE SMOOTH",
"348 -73 OFFCURVE",
"356 -65 OFFCURVE",
"359 -52 QCURVE SMOOTH",
"407 152 LINE",
"509 152 LINE",
"520 214 LINE",
"423 214 LINE",
"479 458 LINE"
);
},
{
closed = 1;
nodes = (
"414 458 LINE",
"358 214 LINE",
"187 214 LINE",
"244 458 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
16 8 36 28 1 19 4 18 11 41 106 11 11 8 28 37 23 0 22 30 40 106 30 30 8 28 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00481;
},
{
glyphname = slash.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"19 -89 LINE",
"74 -89 LINE SMOOTH",
"86 -89 OFFCURVE",
"97 -81 OFFCURVE",
"105 -68 QCURVE SMOOTH",
"622 816 LINE",
"566 816 LINE SMOOTH",
"554 816 OFFCURVE",
"543 808 OFFCURVE",
"536 795 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
3 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00482;
},
{
glyphname = parenleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"234 -42 LINE",
"189 -39 OFFCURVE",
"149 29 OFFCURVE",
"149 99 QCURVE SMOOTH",
"149 173 OFFCURVE",
"197 467 OFFCURVE",
"293 702 OFFCURVE",
"362 702 QCURVE SMOOTH",
"368 702 LINE",
"379 763 LINE",
"366 763 LINE SMOOTH",
"261 763 OFFCURVE",
"129 517 OFFCURVE",
"73 203 OFFCURVE",
"73 99 QCURVE SMOOTH",
"73 -4 OFFCURVE",
"144 -106 OFFCURVE",
"223 -106 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
17 16 106 17 6 9 106 6 32 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 341;
}
);
note = uni0028;
rightKerningGroup = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"164 699 LINE",
"209 696 OFFCURVE",
"249 628 OFFCURVE",
"249 558 QCURVE SMOOTH",
"249 484 OFFCURVE",
"201 190 OFFCURVE",
"105 -45 OFFCURVE",
"36 -45 QCURVE SMOOTH",
"30 -45 LINE",
"19 -106 LINE",
"32 -106 LINE SMOOTH",
"137 -106 OFFCURVE",
"269 140 OFFCURVE",
"325 454 OFFCURVE",
"325 558 QCURVE SMOOTH",
"325 661 OFFCURVE",
"254 763 OFFCURVE",
"175 763 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
17 16 106 17 32 114 7 8 106 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 341;
}
);
leftKerningGroup = parenright;
note = uni0029;
unicode = 0029;
},
{
glyphname = braceleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"281 696 OFFCURVE",
"308 696 QCURVE SMOOTH",
"359 696 LINE",
"370 757 LINE",
"325 757 LINE SMOOTH",
"279 757 OFFCURVE",
"227 729 OFFCURVE",
"205 689 OFFCURVE",
"200 662 QCURVE SMOOTH",
"186 581 LINE",
"162 447 LINE",
"158 415 OFFCURVE",
"118 365 OFFCURVE",
"87 356 QCURVE",
"78 302 LINE",
"100 294 OFFCURVE",
"123 257 OFFCURVE",
"123 233 QCURVE SMOOTH",
"123 225 OFFCURVE",
"121 211 QCURVE SMOOTH",
"115 177 LINE SMOOTH",
"82 -10 OFFCURVE",
"80 -27 QCURVE SMOOTH",
"79 -37 LINE",
"79 -65 OFFCURVE",
"114 -99 OFFCURVE",
"160 -99 QCURVE SMOOTH",
"219 -99 LINE",
"230 -38 LINE",
"179 -38 LINE SMOOTH",
"155 -38 OFFCURVE",
"155 -20 QCURVE SMOOTH",
"155 -14 OFFCURVE",
"159 7 QCURVE SMOOTH",
"163 28 OFFCURVE",
"163 31 QCURVE",
"190 187 LINE SMOOTH",
"197 225 OFFCURVE",
"197 249 QCURVE SMOOTH",
"197 276 OFFCURVE",
"178 303 OFFCURVE",
"165 313 QCURVE",
"151 322 OFFCURVE",
"151 327 QCURVE SMOOTH",
"151 333 OFFCURVE",
"158 340 OFFCURVE",
"167 343 QCURVE",
"182 349 OFFCURVE",
"207 369 OFFCURVE",
"233 423 OFFCURVE",
"241 471 QCURVE SMOOTH",
"262 599 OFFCURVE",
"276 671 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
47 50 106 47 32 114 25 22 106 25 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 336;
}
);
note = uni007B;
rightKerningGroup = parenleft;
unicode = 007B;
},
{
glyphname = braceright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"104 -13 LINE SMOOTH",
"102 -26 OFFCURVE",
"85 -38 OFFCURVE",
"72 -38 QCURVE SMOOTH",
"21 -38 LINE",
"10 -99 LINE",
"55 -99 LINE SMOOTH",
"101 -99 OFFCURVE",
"153 -71 OFFCURVE",
"175 -31 OFFCURVE",
"180 -4 QCURVE SMOOTH",
"194 77 LINE",
"218 211 LINE",
"222 242 OFFCURVE",
"262 293 OFFCURVE",
"293 302 QCURVE",
"302 356 LINE",
"280 364 OFFCURVE",
"257 401 OFFCURVE",
"257 425 QCURVE SMOOTH",
"257 433 OFFCURVE",
"259 447 QCURVE SMOOTH",
"265 481 LINE SMOOTH",
"298 668 OFFCURVE",
"300 685 QCURVE SMOOTH",
"301 695 LINE",
"301 723 OFFCURVE",
"266 757 OFFCURVE",
"220 757 QCURVE SMOOTH",
"161 757 LINE",
"150 696 LINE",
"201 696 LINE SMOOTH",
"225 696 OFFCURVE",
"225 678 QCURVE SMOOTH",
"225 672 OFFCURVE",
"221 651 QCURVE SMOOTH",
"217 630 OFFCURVE",
"217 627 QCURVE",
"190 471 LINE SMOOTH",
"183 433 OFFCURVE",
"183 409 QCURVE SMOOTH",
"183 382 OFFCURVE",
"202 355 OFFCURVE",
"216 346 QCURVE",
"229 336 OFFCURVE",
"229 331 QCURVE SMOOTH",
"229 325 OFFCURVE",
"222 318 OFFCURVE",
"213 315 QCURVE",
"198 308 OFFCURVE",
"173 288 OFFCURVE",
"147 235 OFFCURVE",
"139 187 QCURVE SMOOTH",
"134 162 OFFCURVE",
"126 112 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
48 49 106 48 24 23 106 24 32 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 323;
}
);
leftKerningGroup = parenright;
note = uni007D;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"191 -99 LINE",
"202 -38 LINE",
"118 -38 LINE",
"247 696 LINE",
"331 696 LINE",
"342 757 LINE",
"184 757 LINE",
"43 -42 LINE",
"42 -46 OFFCURVE",
"37 -73 OFFCURVE",
"37 -81 QCURVE SMOOTH",
"37 -90 OFFCURVE",
"47 -99 OFFCURVE",
"61 -99 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
13 10 106 2 13 6 9 106 6 32 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 308;
}
);
note = uni005B;
rightKerningGroup = parenleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"181 -99 LINE",
"322 700 LINE",
"323 704 OFFCURVE",
"328 731 OFFCURVE",
"328 739 QCURVE SMOOTH",
"328 748 OFFCURVE",
"318 757 OFFCURVE",
"304 757 QCURVE SMOOTH",
"174 757 LINE",
"163 696 LINE",
"247 696 LINE",
"118 -38 LINE",
"34 -38 LINE",
"23 -99 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
9 5 4 106 5 32 114 0 1 106 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 308;
}
);
leftKerningGroup = parenright;
note = uni005D;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"77 235 LINE",
"338 235 LINE",
"350 305 LINE",
"89 305 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 380;
}
);
leftKerningGroup = hyphen;
note = uni002D;
rightKerningGroup = hyphen;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
components = (
{
name = hyphen;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 380;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"87 234 LINE",
"517 234 LINE",
"530 305 LINE",
"100 305 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 570;
}
);
note = uni2013;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"87 234 LINE",
"947 234 LINE",
"960 305 LINE",
"100 305 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 1000;
}
);
note = uni2014;
unicode = 2014;
},
{
glyphname = underscore;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-41 -108 LINE",
"549 -108 LINE",
"558 -52 LINE",
"-32 -52 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
0 3 106 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 551;
}
);
note = uni005F;
unicode = 005F;
},
{
glyphname = hyphen.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"161 235 LINE",
"449 235 LINE",
"461 305 LINE",
"172 305 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00494;
},
{
glyphname = underscore.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-31 -108 LINE",
"568 -108 LINE",
"577 -52 LINE",
"-22 -52 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
0 3 106 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00495;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"38 -126 LINE",
"43 -127 OFFCURVE",
"90 -90 OFFCURVE",
"137 -14 OFFCURVE",
"145 44 QCURVE",
"153 89 LINE",
"51 89 LINE",
"35 0 LINE",
"79 0 LINE",
"75 -26 OFFCURVE",
"38 -76 OFFCURVE",
"14 -95 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
10 3 3 4 106 3 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 183;
}
);
leftKerningGroup = comma;
note = uni201A;
rightKerningGroup = comma;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"38 -126 LINE",
"43 -127 OFFCURVE",
"90 -90 OFFCURVE",
"137 -14 OFFCURVE",
"145 44 QCURVE",
"153 89 LINE",
"51 89 LINE",
"35 0 LINE",
"79 0 LINE",
"75 -26 OFFCURVE",
"38 -76 OFFCURVE",
"14 -95 QCURVE"
);
},
{
closed = 1;
nodes = (
"205 -126 LINE",
"210 -127 OFFCURVE",
"257 -90 OFFCURVE",
"304 -14 OFFCURVE",
"312 44 QCURVE",
"320 89 LINE",
"218 89 LINE",
"202 0 LINE",
"246 0 LINE",
"242 -26 OFFCURVE",
"205 -76 OFFCURVE",
"181 -95 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
22 10 3 16 3 4 106 3 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 350;
}
);
leftKerningGroup = comma;
note = uni201E;
rightKerningGroup = comma;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"191 737 LINE",
"185 737 OFFCURVE",
"138 700 OFFCURVE",
"92 624 OFFCURVE",
"84 567 QCURVE",
"76 522 LINE",
"178 522 LINE",
"194 611 LINE",
"150 611 LINE",
"154 637 OFFCURVE",
"191 687 OFFCURVE",
"215 706 QCURVE"
);
},
{
closed = 1;
nodes = (
"358 737 LINE",
"352 737 OFFCURVE",
"305 700 OFFCURVE",
"259 624 OFFCURVE",
"251 567 QCURVE",
"243 522 LINE",
"345 522 LINE",
"361 611 LINE",
"317 611 LINE",
"321 637 OFFCURVE",
"358 687 OFFCURVE",
"382 706 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
5 17 128 22 10 17 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 317;
}
);
leftKerningGroup = quotedblleft;
note = uni201C;
rightKerningGroup = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"109 512 LINE",
"114 511 OFFCURVE",
"161 548 OFFCURVE",
"208 624 OFFCURVE",
"216 682 QCURVE",
"224 727 LINE",
"122 727 LINE",
"106 638 LINE",
"150 638 LINE",
"146 612 OFFCURVE",
"109 562 OFFCURVE",
"85 543 QCURVE"
);
},
{
closed = 1;
nodes = (
"276 512 LINE",
"281 511 OFFCURVE",
"328 548 OFFCURVE",
"375 624 OFFCURVE",
"383 682 QCURVE",
"391 727 LINE",
"289 727 LINE",
"273 638 LINE",
"317 638 LINE",
"313 612 OFFCURVE",
"276 562 OFFCURVE",
"252 543 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
22 10 128 16 4 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 331;
}
);
leftKerningGroup = quotedblright;
note = uni201D;
rightKerningGroup = quotedblright;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"191 737 LINE",
"185 737 OFFCURVE",
"138 700 OFFCURVE",
"92 624 OFFCURVE",
"84 567 QCURVE",
"76 522 LINE",
"178 522 LINE",
"194 611 LINE",
"150 611 LINE",
"154 637 OFFCURVE",
"191 687 OFFCURVE",
"215 706 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
5 128 10 17 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 150;
}
);
leftKerningGroup = quotedblleft;
note = uni2018;
rightKerningGroup = quotedblleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"109 512 LINE",
"114 511 OFFCURVE",
"161 548 OFFCURVE",
"208 624 OFFCURVE",
"216 682 QCURVE",
"224 727 LINE",
"122 727 LINE",
"106 638 LINE",
"150 638 LINE",
"146 612 OFFCURVE",
"109 562 OFFCURVE",
"85 543 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
10 128 4 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 164;
}
);
leftKerningGroup = quotedblright;
note = uni2019;
rightKerningGroup = quotedblright;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"272 150 LINE",
"148 366 LINE",
"341 574 LINE",
"282 574 LINE SMOOTH",
"271 574 OFFCURVE",
"254 566 OFFCURVE",
"243 554 QCURVE SMOOTH",
"70 363 LINE",
"176 170 LINE SMOOTH",
"182 159 OFFCURVE",
"197 150 OFFCURVE",
"208 150 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"442 150 LINE",
"318 366 LINE",
"511 574 LINE",
"452 574 LINE SMOOTH",
"441 574 OFFCURVE",
"424 566 OFFCURVE",
"413 554 QCURVE SMOOTH",
"240 363 LINE",
"346 170 LINE SMOOTH",
"352 159 OFFCURVE",
"367 150 OFFCURVE",
"378 150 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
22 10 10 24 19 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 498;
}
);
leftKerningGroup = guillemetleft;
note = uni00AB;
rightKerningGroup = guillemetleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"109 574 LINE",
"233 358 LINE",
"40 150 LINE",
"99 150 LINE SMOOTH",
"111 150 OFFCURVE",
"127 158 OFFCURVE",
"138 170 QCURVE SMOOTH",
"311 361 LINE",
"205 554 LINE SMOOTH",
"199 565 OFFCURVE",
"184 574 OFFCURVE",
"173 574 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"279 574 LINE",
"403 358 LINE",
"210 150 LINE",
"269 150 LINE SMOOTH",
"281 150 OFFCURVE",
"297 158 OFFCURVE",
"308 170 QCURVE SMOOTH",
"481 361 LINE",
"375 554 LINE SMOOTH",
"369 565 OFFCURVE",
"354 574 OFFCURVE",
"343 574 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
19 7 7 24 22 10 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 500;
}
);
leftKerningGroup = guillemetright;
note = uni00BB;
rightKerningGroup = guillemetright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"272 150 LINE",
"148 366 LINE",
"341 574 LINE",
"282 574 LINE SMOOTH",
"271 574 OFFCURVE",
"254 566 OFFCURVE",
"243 554 QCURVE SMOOTH",
"70 363 LINE",
"176 170 LINE SMOOTH",
"182 159 OFFCURVE",
"197 150 OFFCURVE",
"208 150 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
10 10 13 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 328;
}
);
leftKerningGroup = guillemetleft;
note = uni2039;
rightKerningGroup = guillemetleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"109 574 LINE",
"233 358 LINE",
"40 150 LINE",
"99 150 LINE SMOOTH",
"111 150 OFFCURVE",
"127 158 OFFCURVE",
"138 170 QCURVE SMOOTH",
"311 361 LINE",
"205 554 LINE SMOOTH",
"199 565 OFFCURVE",
"184 574 OFFCURVE",
"173 574 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 7 12 10 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 330;
}
);
leftKerningGroup = guillemetright;
note = uni203A;
rightKerningGroup = guillemetright;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"145 515 LINE",
"185 686 LINE SMOOTH",
"190 706 OFFCURVE",
"190 711 QCURVE SMOOTH",
"190 719 OFFCURVE",
"180 727 OFFCURVE",
"170 727 QCURVE SMOOTH",
"121 727 LINE",
"101 570 LINE",
"100 566 OFFCURVE",
"97 540 OFFCURVE",
"97 533 QCURVE SMOOTH",
"97 524 OFFCURVE",
"107 515 OFFCURVE",
"121 515 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"276 515 LINE",
"316 686 LINE SMOOTH",
"321 706 OFFCURVE",
"321 711 QCURVE SMOOTH",
"321 719 OFFCURVE",
"311 727 OFFCURVE",
"301 727 QCURVE SMOOTH",
"252 727 LINE",
"232 570 LINE",
"231 566 OFFCURVE",
"228 540 OFFCURVE",
"228 533 QCURVE SMOOTH",
"228 524 OFFCURVE",
"238 515 OFFCURVE",
"252 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
28 13 21 6 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 289;
}
);
note = uni0022;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"145 515 LINE",
"185 686 LINE SMOOTH",
"190 706 OFFCURVE",
"190 711 QCURVE SMOOTH",
"190 719 OFFCURVE",
"180 727 OFFCURVE",
"170 727 QCURVE SMOOTH",
"121 727 LINE",
"101 570 LINE",
"100 566 OFFCURVE",
"97 540 OFFCURVE",
"97 533 QCURVE SMOOTH",
"97 524 OFFCURVE",
"107 515 OFFCURVE",
"121 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
13 6 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 158;
}
);
note = uni0027;
unicode = 0027;
},
{
glyphname = quotedbl.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"275 515 LINE",
"316 686 LINE SMOOTH",
"321 706 OFFCURVE",
"321 711 QCURVE SMOOTH",
"321 719 OFFCURVE",
"309 727 OFFCURVE",
"298 727 QCURVE SMOOTH",
"243 727 LINE",
"225 570 LINE SMOOTH",
"222 540 OFFCURVE",
"222 534 QCURVE SMOOTH",
"222 525 OFFCURVE",
"234 515 OFFCURVE",
"250 515 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"426 515 LINE",
"467 686 LINE SMOOTH",
"472 706 OFFCURVE",
"472 711 QCURVE SMOOTH",
"472 718 OFFCURVE",
"460 727 OFFCURVE",
"449 727 QCURVE SMOOTH",
"394 727 LINE",
"376 570 LINE SMOOTH",
"373 540 OFFCURVE",
"373 534 QCURVE SMOOTH",
"373 525 OFFCURVE",
"385 515 OFFCURVE",
"401 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
26 12 19 5 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00508;
},
{
glyphname = quotesingle.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"206 515 LINE",
"247 686 LINE SMOOTH",
"252 706 OFFCURVE",
"252 711 QCURVE SMOOTH",
"252 719 OFFCURVE",
"240 727 OFFCURVE",
"229 727 QCURVE SMOOTH",
"175 727 LINE",
"157 570 LINE SMOOTH",
"154 543 OFFCURVE",
"154 534 QCURVE SMOOTH",
"154 525 OFFCURVE",
"165 515 OFFCURVE",
"181 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
12 5 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 290;
}
);
note = glyph00509;
},
{
glyphname = nbspace;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 0 LINE"
);
}
);
width = 250;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = space.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 0 LINE"
);
}
);
width = 290;
}
);
note = glyph00511;
},
{
glyphname = cent;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"254 -112 LINE",
"271 -11 LINE",
"311 -8 OFFCURVE",
"386 17 OFFCURVE",
"412 32 QCURVE",
"391 85 LINE",
"366 71 OFFCURVE",
"308 50 OFFCURVE",
"282 50 QCURVE",
"355 464 LINE",
"378 463 OFFCURVE",
"406 452 OFFCURVE",
"417 445 QCURVE",
"427 437 OFFCURVE",
"431 437 QCURVE SMOOTH",
"436 437 OFFCURVE",
"445 446 OFFCURVE",
"452 458 QCURVE SMOOTH",
"480 505 LINE",
"453 514 OFFCURVE",
"401 526 OFFCURVE",
"366 527 QCURVE",
"372 560 LINE",
"373 564 OFFCURVE",
"378 591 OFFCURVE",
"378 599 QCURVE SMOOTH",
"378 608 OFFCURVE",
"368 617 OFFCURVE",
"354 617 QCURVE SMOOTH",
"318 617 LINE",
"302 523 LINE",
"224 510 OFFCURVE",
"115 408 OFFCURVE",
"60 263 OFFCURVE",
"60 185 QCURVE SMOOTH",
"60 8 OFFCURVE",
"208 -10 QCURVE",
"200 -55 LINE",
"199 -59 OFFCURVE",
"194 -86 OFFCURVE",
"194 -94 QCURVE SMOOTH",
"194 -103 OFFCURVE",
"204 -112 OFFCURVE",
"218 -112 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"139 248 OFFCURVE",
"171 361 OFFCURVE",
"239 443 OFFCURVE",
"290 458 QCURVE",
"220 58 LINE",
"178 71 OFFCURVE",
"139 135 OFFCURVE",
"139 187 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
47 46 33 41 34 106 12 6 21 42 41 11 114 21 33 106 13 21 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
MDRP[01101]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDRP[01101]\011/* MoveDirectRelPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 449;
}
);
note = uni00A2;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"449 99 LINE",
"500 144 LINE",
"444 208 LINE",
"474 246 OFFCURVE",
"505 320 OFFCURVE",
"505 360 QCURVE SMOOTH",
"505 405 OFFCURVE",
"486 440 QCURVE",
"564 505 LINE",
"529 550 LINE",
"450 484 LINE",
"430 502 OFFCURVE",
"370 521 OFFCURVE",
"340 521 QCURVE SMOOTH",
"314 521 OFFCURVE",
"248 502 OFFCURVE",
"216 483 QCURVE",
"161 550 LINE",
"110 505 LINE",
"166 440 LINE",
"105 372 OFFCURVE",
"105 291 QCURVE SMOOTH",
"105 246 OFFCURVE",
"125 208 QCURVE",
"46 144 LINE",
"81 99 LINE",
"160 166 LINE",
"183 147 OFFCURVE",
"244 127 OFFCURVE",
"270 127 QCURVE SMOOTH",
"340 127 OFFCURVE",
"395 165 QCURVE"
);
},
{
closed = 1;
nodes = (
"248 188 OFFCURVE",
"196 218 OFFCURVE",
"167 271 OFFCURVE",
"167 302 QCURVE SMOOTH",
"167 344 OFFCURVE",
"214 417 OFFCURVE",
"290 460 OFFCURVE",
"330 460 QCURVE SMOOTH",
"360 460 OFFCURVE",
"412 433 OFFCURVE",
"443 382 OFFCURVE",
"443 350 QCURVE SMOOTH",
"443 307 OFFCURVE",
"396 232 OFFCURVE",
"321 188 OFFCURVE",
"281 188 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
17 39 106 17 1 1 47 106 1 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 554;
}
);
note = uni00A4;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"258 -112 LINE",
"276 -11 LINE",
"350 -7 OFFCURVE",
"453 50 OFFCURVE",
"506 139 OFFCURVE",
"506 193 QCURVE SMOOTH",
"506 239 OFFCURVE",
"471 303 OFFCURVE",
"411 350 OFFCURVE",
"358 382 QCURVE",
"350 386 OFFCURVE",
"346 389 QCURVE",
"394 666 LINE",
"410 663 OFFCURVE",
"443 650 OFFCURVE",
"468 634 OFFCURVE",
"471 632 QCURVE",
"473 631 OFFCURVE",
"476 629 QCURVE",
"479 626 OFFCURVE",
"486 623 OFFCURVE",
"490 623 QCURVE SMOOTH",
"499 623 OFFCURVE",
"505 634 QCURVE",
"544 699 LINE",
"520 711 OFFCURVE",
"447 732 OFFCURVE",
"406 735 QCURVE",
"411 760 LINE",
"412 764 OFFCURVE",
"417 791 OFFCURVE",
"417 799 QCURVE SMOOTH",
"417 808 OFFCURVE",
"407 817 OFFCURVE",
"393 817 QCURVE SMOOTH",
"358 817 LINE",
"343 736 LINE",
"270 731 OFFCURVE",
"167 674 OFFCURVE",
"114 586 OFFCURVE",
"114 534 QCURVE SMOOTH",
"114 485 OFFCURVE",
"153 417 OFFCURVE",
"217 371 OFFCURVE",
"270 342 QCURVE",
"272 340 OFFCURVE",
"273 340 QCURVE",
"224 60 LINE",
"180 65 OFFCURVE",
"100 99 OFFCURVE",
"72 121 QCURVE",
"38 55 LINE",
"67 32 OFFCURVE",
"158 -5 OFFCURVE",
"211 -10 QCURVE",
"204 -55 LINE",
"203 -59 OFFCURVE",
"198 -86 OFFCURVE",
"198 -94 QCURVE SMOOTH",
"198 -103 OFFCURVE",
"208 -112 OFFCURVE",
"222 -112 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"196 579 OFFCURVE",
"233 632 OFFCURVE",
"294 664 OFFCURVE",
"331 668 QCURVE",
"288 422 LINE",
"243 449 OFFCURVE",
"196 505 OFFCURVE",
"196 544 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"423 124 OFFCURVE",
"349 68 OFFCURVE",
"289 61 QCURVE",
"331 307 LINE",
"376 280 OFFCURVE",
"423 221 OFFCURVE",
"423 178 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
72 14 73 14 65 59 73 13 64 49 65 49 24 13 60 6 59 13 48 65 33 25 24 5 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[1]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
MDRP[01101]\011/* MoveDirectRelPt */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 565;
}
);
note = uni0024;
unicode = 0024;
},
{
glyphname = dong;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"573 645 LINE",
"578 670 LINE SMOOTH",
"579 675 OFFCURVE",
"582 686 QCURVE",
"584 697 OFFCURVE",
"584 705 QCURVE SMOOTH",
"584 727 OFFCURVE",
"560 727 QCURVE SMOOTH",
"514 727 LINE",
"500 645 LINE",
"338 645 LINE",
"328 592 LINE",
"491 592 LINE",
"475 502 LINE",
"439 515 OFFCURVE",
"394 521 QCURVE SMOOTH",
"370 524 OFFCURVE",
"343 524 QCURVE SMOOTH",
"251 524 OFFCURVE",
"123 423 OFFCURVE",
"60 260 OFFCURVE",
"60 169 QCURVE SMOOTH",
"60 113 OFFCURVE",
"101 31 OFFCURVE",
"176 -12 OFFCURVE",
"227 -12 QCURVE SMOOTH",
"259 -12 OFFCURVE",
"316 7 OFFCURVE",
"336 20 QCURVE",
"356 32 OFFCURVE",
"362 35 QCURVE",
"365 37 OFFCURVE",
"380 48 QCURVE SMOOTH",
"394 58 OFFCURVE",
"400 58 QCURVE SMOOTH",
"404 58 OFFCURVE",
"408 52 OFFCURVE",
"408 44 QCURVE SMOOTH",
"408 23 LINE SMOOTH",
"408 11 OFFCURVE",
"418 0 OFFCURVE",
"429 0 QCURVE SMOOTH",
"477 0 LINE",
"477 37 LINE SMOOTH",
"477 70 OFFCURVE",
"484 135 OFFCURVE",
"492 181 QCURVE SMOOTH",
"564 592 LINE",
"627 592 LINE",
"637 645 LINE"
);
},
{
closed = 1;
nodes = (
"414 159 LINE SMOOTH",
"412 149 OFFCURVE",
"407 137 OFFCURVE",
"400 130 QCURVE SMOOTH",
"324 54 OFFCURVE",
"260 54 QCURVE SMOOTH",
"204 54 OFFCURVE",
"141 121 OFFCURVE",
"141 194 QCURVE SMOOTH",
"141 257 OFFCURVE",
"182 378 OFFCURVE",
"268 458 OFFCURVE",
"331 458 QCURVE SMOOTH",
"369 458 OFFCURVE",
"427 442 OFFCURVE",
"459 421 OFFCURVE",
"459 415 QCURVE SMOOTH",
"459 413 OFFCURVE",
"455 389 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"77 -83 LINE",
"69 -136 LINE",
"444 -136 LINE",
"452 -83 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
72 71 106 72 38 49 2 106 39 49 49 32 41 4 114 32 55 106 32 24 62 106 24 13 114 8 12 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 557;
}
);
note = uni20AB;
unicode = 20AB;
},
{
glyphname = euro;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"539 76 LINE",
"518 73 LINE SMOOTH",
"474 66 OFFCURVE",
"406 58 OFFCURVE",
"374 58 QCURVE SMOOTH",
"311 58 OFFCURVE",
"234 90 OFFCURVE",
"197 162 OFFCURVE",
"197 223 QCURVE SMOOTH",
"197 235 OFFCURVE",
"199 267 QCURVE",
"465 267 LINE",
"477 334 LINE",
"207 334 LINE",
"213 366 LINE",
"214 373 OFFCURVE",
"219 401 OFFCURVE",
"222 412 QCURVE",
"487 412 LINE",
"499 479 LINE",
"241 479 LINE",
"276 583 OFFCURVE",
"388 671 OFFCURVE",
"463 671 QCURVE SMOOTH",
"546 671 OFFCURVE",
"596 633 QCURVE",
"604 626 OFFCURVE",
"612 626 QCURVE SMOOTH",
"616 626 OFFCURVE",
"624 632 OFFCURVE",
"627 637 QCURVE",
"661 704 LINE",
"624 720 OFFCURVE",
"525 742 OFFCURVE",
"472 742 QCURVE SMOOTH",
"243 742 OFFCURVE",
"159 479 QCURVE",
"90 479 LINE",
"78 412 LINE",
"141 412 LINE",
"138 401 OFFCURVE",
"133 373 OFFCURVE",
"132 366 QCURVE",
"126 334 LINE",
"68 334 LINE",
"56 267 LINE",
"118 267 LINE",
"115 237 OFFCURVE",
"115 211 QCURVE SMOOTH",
"115 131 OFFCURVE",
"163 33 OFFCURVE",
"264 -12 OFFCURVE",
"344 -12 QCURVE SMOOTH",
"358 -12 OFFCURVE",
"386 -10 QCURVE SMOOTH",
"449 -4 OFFCURVE",
"539 17 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
10 42 45 106 11 42 42 38 3 38 35 17 18 106 17 17 3 21 32 106 21 5 114 3 51 106 1 3 13 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 595;
}
);
note = uni20AC;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"146 457 LINE",
"67 -79 LINE SMOOTH",
"59 -123 OFFCURVE",
"29 -166 OFFCURVE",
"0 -166 QCURVE SMOOTH",
"-16 -166 OFFCURVE",
"-49 -153 OFFCURVE",
"-62 -144 QCURVE",
"-86 -195 LINE",
"-67 -207 OFFCURVE",
"-19 -224 OFFCURVE",
"5 -224 QCURVE SMOOTH",
"45 -224 OFFCURVE",
"100 -192 OFFCURVE",
"135 -120 OFFCURVE",
"144 -58 QCURVE SMOOTH",
"221 457 LINE",
"354 457 LINE",
"364 515 LINE",
"229 515 LINE",
"239 582 LINE SMOOTH",
"244 615 OFFCURVE",
"262 657 OFFCURVE",
"300 680 OFFCURVE",
"332 680 QCURVE SMOOTH",
"360 680 OFFCURVE",
"409 667 QCURVE",
"424 723 LINE",
"404 729 OFFCURVE",
"357 737 OFFCURVE",
"336 737 QCURVE SMOOTH",
"260 737 OFFCURVE",
"177 662 OFFCURVE",
"164 577 QCURVE SMOOTH",
"154 515 LINE",
"79 515 LINE",
"69 457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
9 6 25 32 106 1 0 17 20 106 6 12 106 17 6 114 6 1 114 25 15 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 324;
}
);
note = uni0192;
unicode = 0192;
},
{
glyphname = sterling;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"22 0 LINE",
"520 0 LINE",
"532 69 LINE",
"184 69 LINE",
"224 159 OFFCURVE",
"245 288 QCURVE SMOOTH",
"247 301 OFFCURVE",
"252 342 QCURVE",
"437 342 LINE",
"449 411 LINE",
"257 411 LINE",
"260 446 OFFCURVE",
"269 499 QCURVE SMOOTH",
"280 560 OFFCURVE",
"325 633 OFFCURVE",
"397 666 OFFCURVE",
"451 666 QCURVE SMOOTH",
"482 666 OFFCURVE",
"531 656 OFFCURVE",
"550 642 QCURVE SMOOTH",
"560 635 OFFCURVE",
"566 635 QCURVE SMOOTH",
"576 635 OFFCURVE",
"581 644 QCURVE SMOOTH",
"614 704 LINE",
"590 716 OFFCURVE",
"510 733 OFFCURVE",
"458 733 QCURVE SMOOTH",
"344 733 OFFCURVE",
"215 614 OFFCURVE",
"195 501 QCURVE SMOOTH",
"186 447 OFFCURVE",
"183 411 QCURVE",
"114 411 LINE",
"102 342 LINE",
"177 342 LINE",
"173 296 OFFCURVE",
"169 272 QCURVE SMOOTH",
"160 219 OFFCURVE",
"133 119 OFFCURVE",
"109 69 QCURVE",
"34 69 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
8 34 31 106 7 34 34 14 38 41 0 106 41 12 114 14 25 106 14 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 563;
}
);
note = uni00A3;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"280 0 LINE",
"319 220 LINE",
"493 220 LINE",
"504 286 LINE",
"357 286 LINE",
"398 355 LINE",
"512 355 LINE",
"525 421 LINE",
"439 421 LINE",
"625 727 LINE",
"561 727 LINE SMOOTH",
"550 727 OFFCURVE",
"540 719 OFFCURVE",
"532 706 QCURVE SMOOTH",
"295 298 LINE",
"199 706 LINE SMOOTH",
"196 719 OFFCURVE",
"189 727 OFFCURVE",
"178 727 QCURVE SMOOTH",
"116 727 LINE",
"193 421 LINE",
"103 421 LINE",
"92 355 LINE",
"210 355 LINE",
"227 286 LINE",
"84 286 LINE",
"72 220 LINE",
"241 220 LINE",
"213 57 LINE",
"212 53 OFFCURVE",
"207 26 OFFCURVE",
"207 18 QCURVE SMOOTH",
"207 9 OFFCURVE",
"217 0 OFFCURVE",
"231 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
19 32 24 32 8 7 106 29 8 8 28 34 28 25 11 12 106 11 11 14 2 34 12 114 24 14 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
note = uni00A5;
unicode = 00A5;
},
{
glyphname = cent.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"273 -112 LINE",
"290 -11 LINE",
"330 -8 OFFCURVE",
"405 17 OFFCURVE",
"431 32 QCURVE",
"410 85 LINE",
"385 71 OFFCURVE",
"327 50 OFFCURVE",
"301 50 QCURVE",
"374 464 LINE",
"397 463 OFFCURVE",
"425 452 OFFCURVE",
"436 445 QCURVE",
"446 437 OFFCURVE",
"450 437 QCURVE SMOOTH",
"455 437 OFFCURVE",
"464 446 OFFCURVE",
"471 458 QCURVE SMOOTH",
"499 505 LINE",
"472 514 OFFCURVE",
"420 526 OFFCURVE",
"385 527 QCURVE",
"391 560 LINE",
"392 564 OFFCURVE",
"397 591 OFFCURVE",
"397 599 QCURVE SMOOTH",
"397 608 OFFCURVE",
"387 617 OFFCURVE",
"373 617 QCURVE SMOOTH",
"337 617 LINE",
"321 523 LINE",
"243 510 OFFCURVE",
"134 408 OFFCURVE",
"79 263 OFFCURVE",
"79 185 QCURVE SMOOTH",
"79 8 OFFCURVE",
"227 -10 QCURVE",
"219 -55 LINE",
"218 -59 OFFCURVE",
"213 -86 OFFCURVE",
"213 -94 QCURVE SMOOTH",
"213 -103 OFFCURVE",
"223 -112 OFFCURVE",
"237 -112 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"158 248 OFFCURVE",
"190 361 OFFCURVE",
"258 443 OFFCURVE",
"309 458 QCURVE",
"239 58 LINE",
"197 71 OFFCURVE",
"158 135 OFFCURVE",
"158 187 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
47 46 33 41 34 106 12 6 21 42 41 11 114 21 33 106 13 21 7 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
MDRP[01101]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDRP[01101]\011/* MoveDirectRelPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00520;
},
{
glyphname = currency.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"464 99 LINE",
"516 144 LINE",
"459 208 LINE",
"489 246 OFFCURVE",
"520 320 OFFCURVE",
"520 360 QCURVE SMOOTH",
"520 405 OFFCURVE",
"501 440 QCURVE",
"580 505 LINE",
"544 550 LINE",
"464 484 LINE",
"444 502 OFFCURVE",
"383 521 OFFCURVE",
"353 521 QCURVE SMOOTH",
"326 521 OFFCURVE",
"259 502 OFFCURVE",
"227 483 QCURVE",
"171 550 LINE",
"120 505 LINE",
"176 440 LINE",
"115 372 OFFCURVE",
"115 291 QCURVE SMOOTH",
"115 246 OFFCURVE",
"135 208 QCURVE",
"55 144 LINE",
"91 99 LINE",
"171 166 LINE",
"194 147 OFFCURVE",
"256 127 OFFCURVE",
"283 127 QCURVE SMOOTH",
"318 127 OFFCURVE",
"382 146 OFFCURVE",
"409 165 QCURVE"
);
},
{
closed = 1;
nodes = (
"260 188 OFFCURVE",
"207 218 OFFCURVE",
"178 271 OFFCURVE",
"178 302 QCURVE SMOOTH",
"178 344 OFFCURVE",
"226 417 OFFCURVE",
"302 460 OFFCURVE",
"343 460 QCURVE SMOOTH",
"374 460 OFFCURVE",
"426 433 OFFCURVE",
"458 382 OFFCURVE",
"458 350 QCURVE SMOOTH",
"458 307 OFFCURVE",
"410 232 OFFCURVE",
"334 188 OFFCURVE",
"294 188 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
18 40 106 18 2 2 48 106 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00521;
},
{
glyphname = dollar.salt;
layers = (
{
components = (
{
name = dollar;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 580;
}
);
note = glyph00522;
},
{
glyphname = euro.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"530 76 LINE",
"436 58 OFFCURVE",
"366 58 QCURVE SMOOTH",
"303 58 OFFCURVE",
"227 90 OFFCURVE",
"191 162 OFFCURVE",
"191 223 QCURVE SMOOTH",
"191 233 OFFCURVE",
"193 267 QCURVE",
"456 267 LINE",
"468 334 LINE",
"201 334 LINE",
"205 357 LINE SMOOTH",
"211 390 OFFCURVE",
"216 412 QCURVE",
"478 412 LINE",
"490 479 LINE",
"235 479 LINE",
"270 583 OFFCURVE",
"381 671 OFFCURVE",
"455 671 QCURVE SMOOTH",
"543 671 OFFCURVE",
"587 633 QCURVE SMOOTH",
"595 626 OFFCURVE",
"604 626 QCURVE SMOOTH",
"612 626 OFFCURVE",
"618 637 QCURVE",
"651 704 LINE",
"615 720 OFFCURVE",
"516 742 OFFCURVE",
"464 742 QCURVE SMOOTH",
"237 742 OFFCURVE",
"153 479 QCURVE",
"85 479 LINE",
"73 412 LINE",
"135 412 LINE",
"129 388 OFFCURVE",
"126 366 QCURVE",
"122 343 OFFCURVE",
"120 334 QCURVE",
"63 334 LINE",
"51 267 LINE",
"112 267 LINE",
"109 237 OFFCURVE",
"109 211 QCURVE SMOOTH",
"109 131 OFFCURVE",
"157 33 OFFCURVE",
"256 -12 OFFCURVE",
"336 -12 QCURVE SMOOTH",
"415 -12 OFFCURVE",
"529 17 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
8 38 41 106 9 38 38 35 1 35 32 15 16 106 15 15 1 19 29 106 19 1 47 106 1 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00523;
},
{
glyphname = florin.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"262 457 LINE",
"185 -79 LINE",
"176 -123 OFFCURVE",
"142 -166 OFFCURVE",
"109 -166 QCURVE SMOOTH",
"90 -166 OFFCURVE",
"51 -153 OFFCURVE",
"36 -144 QCURVE",
"11 -195 LINE",
"33 -207 OFFCURVE",
"88 -224 OFFCURVE",
"114 -224 QCURVE SMOOTH",
"160 -224 OFFCURVE",
"222 -192 OFFCURVE",
"260 -120 OFFCURVE",
"269 -58 QCURVE SMOOTH",
"344 457 LINE",
"499 457 LINE",
"508 515 LINE",
"352 515 LINE",
"362 582 LINE SMOOTH",
"367 615 OFFCURVE",
"387 657 OFFCURVE",
"430 680 OFFCURVE",
"468 680 QCURVE SMOOTH",
"499 680 OFFCURVE",
"558 667 QCURVE",
"572 723 LINE",
"549 729 OFFCURVE",
"495 737 OFFCURVE",
"472 737 QCURVE SMOOTH",
"414 737 OFFCURVE",
"336 704 OFFCURVE",
"290 634 OFFCURVE",
"280 577 QCURVE SMOOTH",
"269 515 LINE",
"182 515 LINE",
"173 457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
26 33 106 26 30 114 0 18 21 106 1 18 6 114 7 13 106 10 7 1 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00524;
},
{
glyphname = sterling.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"27 0 LINE",
"531 0 LINE",
"543 69 LINE",
"191 69 LINE",
"231 159 OFFCURVE",
"252 288 QCURVE SMOOTH",
"254 301 OFFCURVE",
"259 342 QCURVE",
"447 342 LINE",
"459 411 LINE",
"264 411 LINE",
"267 446 OFFCURVE",
"276 499 QCURVE SMOOTH",
"287 560 OFFCURVE",
"332 633 OFFCURVE",
"406 666 OFFCURVE",
"460 666 QCURVE SMOOTH",
"491 666 OFFCURVE",
"542 656 OFFCURVE",
"561 642 QCURVE SMOOTH",
"571 635 OFFCURVE",
"577 635 QCURVE SMOOTH",
"587 635 OFFCURVE",
"592 644 QCURVE SMOOTH",
"625 704 LINE",
"601 716 OFFCURVE",
"519 733 OFFCURVE",
"467 733 QCURVE SMOOTH",
"351 733 OFFCURVE",
"222 614 OFFCURVE",
"202 501 QCURVE SMOOTH",
"193 447 OFFCURVE",
"190 411 QCURVE",
"120 411 LINE",
"108 342 LINE",
"184 342 LINE",
"180 296 OFFCURVE",
"176 272 QCURVE SMOOTH",
"167 219 OFFCURVE",
"140 119 OFFCURVE",
"115 69 QCURVE",
"39 69 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
8 34 31 106 7 34 34 14 38 41 0 106 41 12 114 14 25 106 14 5 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00525;
},
{
glyphname = yen.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"295 0 LINE",
"334 220 LINE",
"512 220 LINE",
"523 286 LINE",
"373 286 LINE",
"414 355 LINE",
"531 355 LINE",
"544 421 LINE",
"456 421 LINE",
"645 727 LINE",
"580 727 LINE SMOOTH",
"569 727 OFFCURVE",
"559 719 OFFCURVE",
"551 706 QCURVE SMOOTH",
"310 298 LINE",
"210 706 LINE SMOOTH",
"207 719 OFFCURVE",
"200 727 OFFCURVE",
"189 727 QCURVE SMOOTH",
"126 727 LINE",
"206 421 LINE",
"114 421 LINE",
"103 355 LINE",
"223 355 LINE",
"241 286 LINE",
"95 286 LINE",
"83 220 LINE",
"255 220 LINE",
"227 57 LINE",
"226 53 OFFCURVE",
"221 26 OFFCURVE",
"221 18 QCURVE SMOOTH",
"221 9 OFFCURVE",
"231 0 OFFCURVE",
"246 0 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
19 32 24 32 8 7 106 29 8 8 28 34 28 25 11 12 106 11 11 14 2 34 12 114 24 14 4 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00526;
},
{
glyphname = bulletoperator;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"83 319 LINE",
"185 319 LINE",
"200 408 LINE",
"98 408 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 220;
}
);
note = uni2219;
unicode = 2219;
},
{
glyphname = divisionslash;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-66 -32 LINE",
"-17 -32 LINE SMOOTH",
"-6 -32 OFFCURVE",
"9 -23 OFFCURVE",
"19 -11 QCURVE",
"600 743 LINE",
"549 743 LINE SMOOTH",
"538 743 OFFCURVE",
"521 734 OFFCURVE",
"512 722 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 17 114 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 471;
}
);
note = uni2215;
unicode = 2215;
},
{
glyphname = plus;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"254 82 LINE",
"281 237 LINE",
"426 237 LINE",
"438 303 LINE",
"293 303 LINE",
"310 401 LINE",
"311 405 OFFCURVE",
"316 432 OFFCURVE",
"316 440 QCURVE SMOOTH",
"316 449 OFFCURVE",
"306 458 OFFCURVE",
"292 458 QCURVE SMOOTH",
"252 458 LINE",
"225 303 LINE",
"80 303 LINE",
"68 237 LINE",
"213 237 LINE",
"196 139 LINE",
"195 135 OFFCURVE",
"190 108 OFFCURVE",
"190 100 QCURVE SMOOTH",
"190 91 OFFCURVE",
"200 82 OFFCURVE",
"214 82 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
18 7 8 106 21 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 460;
}
);
note = uni002B;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"68 237 LINE",
"428 237 LINE",
"440 303 LINE",
"80 303 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 462;
}
);
note = uni2212;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"223 225 LINE",
"319 108 LINE",
"373 154 LINE",
"277 271 LINE",
"410 384 LINE",
"373 429 LINE",
"243 315 LINE",
"147 431 LINE",
"93 385 LINE",
"188 267 LINE",
"56 156 LINE",
"93 111 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 1 value pushed */
2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 422;
}
);
note = uni00D7;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"225 390 LINE",
"327 390 LINE",
"343 479 LINE",
"241 479 LINE"
);
},
{
closed = 1;
nodes = (
"68 237 LINE",
"438 237 LINE",
"450 303 LINE",
"80 303 LINE"
);
},
{
closed = 1;
nodes = (
"172 62 LINE",
"274 62 LINE",
"289 151 LINE",
"187 151 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
11 8 106 11 0 3 106 0 0 7 4 106 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 472;
}
);
note = uni00F7;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"86 304 LINE",
"446 304 LINE",
"458 370 LINE",
"98 370 LINE"
);
},
{
closed = 1;
nodes = (
"429 171 LINE",
"440 237 LINE",
"80 237 LINE",
"69 171 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
5 4 106 5 5 8 3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 480;
}
);
note = uni003D;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"230 171 LINE",
"413 171 LINE",
"424 237 LINE",
"263 237 LINE",
"300 304 LINE",
"432 304 LINE",
"444 370 LINE",
"335 370 LINE",
"415 515 LINE",
"352 515 LINE",
"272 370 LINE",
"84 370 LINE",
"72 304 LINE",
"237 304 LINE",
"200 237 LINE",
"64 237 LINE",
"53 171 LINE",
"167 171 LINE",
"87 26 LINE",
"150 26 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
19 4 3 106 16 4 4 20 12 7 8 106 15 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 450;
}
);
note = uni2260;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"441 303 LINE",
"120 484 LINE",
"115 454 LINE SMOOTH",
"111 430 OFFCURVE",
"111 427 QCURVE SMOOTH",
"111 417 OFFCURVE",
"122 405 OFFCURVE",
"136 398 QCURVE SMOOTH",
"348 287 LINE",
"90 167 LINE SMOOTH",
"77 161 OFFCURVE",
"66 152 OFFCURVE",
"60 139 OFFCURVE",
"57 125 QCURVE SMOOTH",
"50 87 LINE",
"435 268 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 1 value pushed */
7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 461;
}
);
note = uni003E;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"45 268 LINE",
"366 87 LINE",
"371 117 LINE SMOOTH",
"375 141 OFFCURVE",
"375 144 QCURVE SMOOTH",
"375 154 OFFCURVE",
"364 166 OFFCURVE",
"350 173 QCURVE SMOOTH",
"138 284 LINE",
"396 404 LINE SMOOTH",
"409 410 OFFCURVE",
"420 419 OFFCURVE",
"426 432 OFFCURVE",
"429 446 QCURVE SMOOTH",
"436 484 LINE",
"51 303 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 1 value pushed */
7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 436;
}
);
note = uni003C;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"453 351 LINE",
"132 532 LINE",
"127 502 LINE SMOOTH",
"123 478 OFFCURVE",
"123 475 QCURVE SMOOTH",
"123 465 OFFCURVE",
"134 453 OFFCURVE",
"148 446 QCURVE SMOOTH",
"360 335 LINE",
"102 215 LINE SMOOTH",
"89 209 OFFCURVE",
"78 200 OFFCURVE",
"72 187 OFFCURVE",
"69 173 QCURVE SMOOTH",
"62 135 LINE",
"447 316 LINE"
);
},
{
closed = 1;
nodes = (
"40 30 LINE",
"400 30 LINE",
"412 96 LINE",
"52 96 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
7 7 19 16 106 19 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 480;
}
);
note = uni2265;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"85 316 LINE",
"406 135 LINE",
"411 165 LINE SMOOTH",
"415 189 OFFCURVE",
"415 192 QCURVE SMOOTH",
"415 202 OFFCURVE",
"404 214 OFFCURVE",
"390 221 QCURVE SMOOTH",
"178 332 LINE",
"436 452 LINE SMOOTH",
"449 458 OFFCURVE",
"460 467 OFFCURVE",
"466 480 OFFCURVE",
"469 494 QCURVE SMOOTH",
"476 532 LINE",
"91 351 LINE"
);
},
{
closed = 1;
nodes = (
"30 30 LINE",
"390 30 LINE",
"402 96 LINE",
"42 96 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
7 7 19 16 106 19 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 470;
}
);
note = uni2264;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"238 287 LINE",
"225 209 LINE",
"224 205 OFFCURVE",
"219 178 OFFCURVE",
"219 170 QCURVE SMOOTH",
"219 161 OFFCURVE",
"229 152 OFFCURVE",
"243 152 QCURVE SMOOTH",
"282 152 LINE",
"306 287 LINE",
"457 287 LINE",
"469 353 LINE",
"318 353 LINE",
"332 431 LINE",
"333 435 OFFCURVE",
"338 462 OFFCURVE",
"338 470 QCURVE SMOOTH",
"338 479 OFFCURVE",
"328 488 OFFCURVE",
"314 488 QCURVE SMOOTH",
"274 488 LINE",
"250 353 LINE",
"99 353 LINE",
"87 287 LINE"
);
},
{
closed = 1;
nodes = (
"42 30 LINE",
"412 30 LINE",
"424 96 LINE",
"54 96 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
11 0 1 106 14 0 0 27 24 106 27 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 491;
}
);
note = uni00B1;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"447 382 LINE",
"410 356 OFFCURVE",
"363 340 OFFCURVE",
"342 340 QCURVE SMOOTH",
"329 340 OFFCURVE",
"304 349 OFFCURVE",
"286 358 QCURVE SMOOTH",
"260 371 OFFCURVE",
"219 384 OFFCURVE",
"193 384 QCURVE SMOOTH",
"169 384 OFFCURVE",
"109 365 OFFCURVE",
"81 342 QCURVE",
"70 278 LINE",
"108 304 OFFCURVE",
"154 320 OFFCURVE",
"177 320 QCURVE SMOOTH",
"190 320 OFFCURVE",
"215 311 OFFCURVE",
"233 302 QCURVE SMOOTH",
"260 289 OFFCURVE",
"299 276 OFFCURVE",
"325 276 QCURVE SMOOTH",
"349 276 OFFCURVE",
"408 295 OFFCURVE",
"436 318 QCURVE"
);
},
{
closed = 1;
nodes = (
"425 253 LINE",
"388 227 OFFCURVE",
"341 211 OFFCURVE",
"320 211 QCURVE SMOOTH",
"307 211 OFFCURVE",
"282 220 OFFCURVE",
"264 229 QCURVE SMOOTH",
"238 242 OFFCURVE",
"197 255 OFFCURVE",
"171 255 QCURVE SMOOTH",
"147 255 OFFCURVE",
"87 236 OFFCURVE",
"59 213 QCURVE",
"47 149 LINE",
"85 175 OFFCURVE",
"132 191 OFFCURVE",
"155 191 QCURVE SMOOTH",
"168 191 OFFCURVE",
"193 182 OFFCURVE",
"211 173 QCURVE SMOOTH",
"238 160 OFFCURVE",
"277 147 OFFCURVE",
"303 147 QCURVE SMOOTH",
"327 147 OFFCURVE",
"385 166 OFFCURVE",
"413 189 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
150 47 166 47 2 28 47 106 37 28 
PUSHW[ ]\011/* 1 value pushed */
-64 
NPUSHB[ ]\011/* 46 values pushed */
20 23 72 28 41 50 153 34 169 34 2 41 34 106 41 41 2 53 24 153 8 169 8 2 15 8 106 15 64 20 23 72 15 2 128 150 21 166 21 2 2 21 106 11 2 18 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SMD[ ]\011/* SetMinimumDistance */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01101]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01101]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 449;
}
);
note = uni2248;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"86 242 LINE",
"118 263 OFFCURVE",
"193 293 OFFCURVE",
"227 293 QCURVE SMOOTH",
"248 293 OFFCURVE",
"285 282 OFFCURVE",
"312 270 QCURVE SMOOTH",
"344 255 OFFCURVE",
"397 240 OFFCURVE",
"431 240 QCURVE SMOOTH",
"473 240 OFFCURVE",
"552 270 OFFCURVE",
"581 291 QCURVE",
"592 353 LINE",
"560 332 OFFCURVE",
"485 302 OFFCURVE",
"451 302 QCURVE SMOOTH",
"430 302 OFFCURVE",
"393 313 OFFCURVE",
"366 325 QCURVE SMOOTH",
"334 340 OFFCURVE",
"281 355 OFFCURVE",
"247 355 QCURVE SMOOTH",
"205 355 OFFCURVE",
"126 325 OFFCURVE",
"97 304 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
2 21 106 11 2 15 128 24 15 8 106 15 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 626;
}
);
note = uni007E;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"407 119 LINE",
"429 246 LINE",
"430 250 OFFCURVE",
"435 277 OFFCURVE",
"435 285 QCURVE SMOOTH",
"435 294 OFFCURVE",
"425 303 OFFCURVE",
"411 303 QCURVE SMOOTH",
"79 303 LINE",
"68 237 LINE",
"362 237 LINE",
"351 176 LINE",
"350 172 OFFCURVE",
"345 145 OFFCURVE",
"345 137 QCURVE SMOOTH",
"345 128 OFFCURVE",
"355 119 OFFCURVE",
"369 119 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
16 16 19 8 7 106 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 480;
}
);
note = uni00AC;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"568 380 LINE",
"647 380 LINE",
"455 733 LINE",
"405 733 LINE",
"87 380 LINE",
"166 380 LINE",
"417 665 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
6 0 3 1 1 7 3 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 692;
}
);
note = uni005E;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"401 251 OFFCURVE",
"471 189 OFFCURVE",
"530 189 QCURVE SMOOTH",
"580 189 OFFCURVE",
"664 238 OFFCURVE",
"712 321 OFFCURVE",
"712 368 QCURVE SMOOTH",
"712 403 OFFCURVE",
"681 456 OFFCURVE",
"620 485 OFFCURVE",
"578 485 QCURVE SMOOTH",
"530 485 OFFCURVE",
"439 426 OFFCURVE",
"405 385 QCURVE",
"387 423 OFFCURVE",
"317 485 OFFCURVE",
"258 485 QCURVE SMOOTH",
"208 485 OFFCURVE",
"124 436 OFFCURVE",
"76 353 OFFCURVE",
"76 306 QCURVE SMOOTH",
"76 271 OFFCURVE",
"108 218 OFFCURVE",
"169 189 OFFCURVE",
"212 189 QCURVE SMOOTH",
"257 189 OFFCURVE",
"348 248 OFFCURVE",
"383 290 QCURVE"
);
},
{
closed = 1;
nodes = (
"458 381 OFFCURVE",
"529 432 OFFCURVE",
"569 432 QCURVE SMOOTH",
"605 432 OFFCURVE",
"649 392 OFFCURVE",
"649 358 QCURVE SMOOTH",
"649 325 OFFCURVE",
"619 273 OFFCURVE",
"566 243 OFFCURVE",
"535 243 QCURVE SMOOTH",
"500 243 OFFCURVE",
"440 298 OFFCURVE",
"424 338 QCURVE"
);
},
{
closed = 1;
nodes = (
"330 293 OFFCURVE",
"259 242 OFFCURVE",
"219 242 QCURVE SMOOTH",
"183 242 OFFCURVE",
"139 282 OFFCURVE",
"139 316 QCURVE SMOOTH",
"139 349 OFFCURVE",
"169 401 OFFCURVE",
"222 431 OFFCURVE",
"253 431 QCURVE SMOOTH",
"288 431 OFFCURVE",
"348 376 OFFCURVE",
"364 336 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
24 30 106 24 24 2 50 106 27 13 10 2 2 54 10 16 37 106 16 16 10 43 106 10 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 729;
}
);
note = uni221E;
unicode = 221E;
},
{
glyphname = integral;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"7 -166 LINE",
"20 -171 OFFCURVE",
"55 -178 OFFCURVE",
"74 -178 QCURVE SMOOTH",
"141 -178 OFFCURVE",
"232 -95 OFFCURVE",
"246 -17 QCURVE SMOOTH",
"351 578 LINE SMOOTH",
"359 624 OFFCURVE",
"408 673 OFFCURVE",
"447 673 QCURVE SMOOTH",
"461 673 OFFCURVE",
"485 667 OFFCURVE",
"494 662 QCURVE",
"516 721 LINE",
"504 726 OFFCURVE",
"468 733 OFFCURVE",
"447 733 QCURVE SMOOTH",
"379 733 OFFCURVE",
"290 649 OFFCURVE",
"276 573 QCURVE SMOOTH",
"171 -22 LINE SMOOTH",
"163 -69 OFFCURVE",
"115 -117 OFFCURVE",
"76 -117 QCURVE SMOOTH",
"61 -117 OFFCURVE",
"35 -111 OFFCURVE",
"26 -107 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
26 23 12 9 23 2 106 9 16 106 9 16 114 23 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 474;
}
);
note = uni222B;
unicode = 222B;
},
{
glyphname = Ohm;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"379 0 LINE",
"611 0 LINE",
"623 67 LINE",
"472 67 LINE",
"538 125 OFFCURVE",
"633 271 OFFCURVE",
"684 435 OFFCURVE",
"684 517 QCURVE SMOOTH",
"684 620 OFFCURVE",
"571 733 OFFCURVE",
"451 733 QCURVE SMOOTH",
"336 733 OFFCURVE",
"181 611 OFFCURVE",
"107 420 OFFCURVE",
"107 314 QCURVE SMOOTH",
"107 239 OFFCURVE",
"149 119 OFFCURVE",
"190 67 QCURVE",
"41 67 LINE",
"29 0 LINE",
"262 0 LINE",
"274 67 LINE",
"251 89 OFFCURVE",
"211 168 OFFCURVE",
"186 273 OFFCURVE",
"186 330 QCURVE SMOOTH",
"186 418 OFFCURVE",
"239 570 OFFCURVE",
"352 665 OFFCURVE",
"439 665 QCURVE SMOOTH",
"526 665 OFFCURVE",
"604 586 OFFCURVE",
"604 506 QCURVE SMOOTH",
"604 425 OFFCURVE",
"551 258 OFFCURVE",
"454 115 OFFCURVE",
"391 67 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
26 7 106 26 16 114 36 33 106 36 17 0 15 15 17 18 106 17 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 706;
}
);
note = uni2126;
unicode = 2126;
},
{
glyphname = increment;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-12 0 LINE",
"635 0 LINE",
"491 706 LINE",
"489 718 OFFCURVE",
"480 727 OFFCURVE",
"469 727 QCURVE SMOOTH",
"393 727 LINE"
);
},
{
closed = 1;
nodes = (
"427 657 LINE",
"544 71 LINE",
"105 71 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
6 7 106 6 18 114 9 0 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 688;
}
);
note = uni2206;
unicode = 2206;
},
{
glyphname = product;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"186 727 LINE",
"52 -32 LINE",
"51 -36 OFFCURVE",
"46 -63 OFFCURVE",
"46 -71 QCURVE SMOOTH",
"46 -80 OFFCURVE",
"56 -89 OFFCURVE",
"70 -89 QCURVE SMOOTH",
"120 -89 LINE",
"251 656 LINE",
"655 656 LINE",
"536 -32 LINE",
"535 -36 OFFCURVE",
"530 -63 OFFCURVE",
"530 -71 QCURVE SMOOTH",
"530 -80 OFFCURVE",
"540 -89 OFFCURVE",
"554 -89 QCURVE SMOOTH",
"604 -89 LINE",
"739 670 LINE",
"740 674 OFFCURVE",
"745 701 OFFCURVE",
"745 709 QCURVE SMOOTH",
"745 718 OFFCURVE",
"735 727 OFFCURVE",
"721 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 10 20 6 2 24 15 106 24 16 114 6 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 733;
}
);
note = uni220F;
unicode = 220F;
},
{
glyphname = summation;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"12 -89 LINE",
"523 -89 LINE",
"535 -18 LINE",
"111 -18 LINE",
"429 324 LINE",
"247 661 LINE",
"633 661 LINE",
"645 727 LINE",
"167 727 LINE",
"161 695 LINE",
"159 681 OFFCURVE",
"159 676 QCURVE SMOOTH",
"159 661 OFFCURVE",
"168 644 QCURVE SMOOTH",
"340 320 LINE",
"42 -6 LINE SMOOTH",
"31 -18 OFFCURVE",
"20 -43 OFFCURVE",
"17 -60 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
18 15 106 10 13 106 10 16 114 18 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 600;
}
);
note = uni2211;
unicode = 2211;
},
{
glyphname = radical;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"323 -11 LINE",
"682 768 LINE",
"634 768 LINE SMOOTH",
"623 768 OFFCURVE",
"610 759 OFFCURVE",
"605 747 QCURVE SMOOTH",
"304 89 LINE",
"215 436 LINE",
"81 364 LINE",
"98 316 LINE",
"163 348 LINE",
"250 10 LINE SMOOTH",
"253 -3 OFFCURVE",
"260 -11 OFFCURVE",
"271 -11 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
3 6 6 11 7 13 19 114 11 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = uni221A;
unicode = 221A;
},
{
glyphname = partialdiff;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"583 618 OFFCURVE",
"501 709 OFFCURVE",
"423 709 QCURVE SMOOTH",
"385 709 OFFCURVE",
"305 687 OFFCURVE",
"282 674 QCURVE",
"292 625 LINE",
"323 637 OFFCURVE",
"368 645 OFFCURVE",
"396 645 QCURVE SMOOTH",
"453 645 OFFCURVE",
"514 580 OFFCURVE",
"514 521 QCURVE SMOOTH",
"514 472 OFFCURVE",
"494 408 QCURVE",
"477 445 OFFCURVE",
"411 484 OFFCURVE",
"358 484 QCURVE SMOOTH",
"275 484 OFFCURVE",
"133 377 OFFCURVE",
"50 215 OFFCURVE",
"50 138 QCURVE SMOOTH",
"50 93 OFFCURVE",
"87 26 OFFCURVE",
"154 -10 OFFCURVE",
"200 -10 QCURVE SMOOTH",
"300 -10 OFFCURVE",
"463 154 OFFCURVE",
"519 280 QCURVE SMOOTH",
"550 349 OFFCURVE",
"583 474 OFFCURVE",
"583 533 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"438 251 OFFCURVE",
"356 123 OFFCURVE",
"261 52 OFFCURVE",
"214 52 QCURVE SMOOTH",
"173 52 OFFCURVE",
"125 106 OFFCURVE",
"125 151 QCURVE SMOOTH",
"125 214 OFFCURVE",
"186 342 OFFCURVE",
"292 424 OFFCURVE",
"355 424 QCURVE SMOOTH",
"388 424 OFFCURVE",
"438 399 OFFCURVE",
"466 358 OFFCURVE",
"468 333 QCURVE"
);
},
{
closed = 1;
nodes = (
"278 727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
13 35 106 1 16 13 13 5 28 21 106 28 28 48 47 16 5 42 106 5 19 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MIAP[1]\011/* MoveIndirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 585;
}
);
note = uni2202;
unicode = 2202;
},
{
glyphname = micro;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"145 515 LINE",
"33 -121 LINE",
"32 -125 OFFCURVE",
"27 -152 OFFCURVE",
"27 -160 QCURVE SMOOTH",
"27 -169 OFFCURVE",
"37 -178 OFFCURVE",
"51 -178 QCURVE SMOOTH",
"97 -178 LINE",
"135 34 LINE",
"144 15 OFFCURVE",
"189 -12 OFFCURVE",
"224 -12 QCURVE SMOOTH",
"269 -12 OFFCURVE",
"342 19 OFFCURVE",
"365 35 QCURVE",
"369 38 OFFCURVE",
"397 58 OFFCURVE",
"402 58 QCURVE SMOOTH",
"407 58 OFFCURVE",
"411 52 OFFCURVE",
"411 44 QCURVE SMOOTH",
"411 23 LINE SMOOTH",
"411 11 OFFCURVE",
"421 0 OFFCURVE",
"432 0 QCURVE SMOOTH",
"480 0 LINE",
"480 37 LINE SMOOTH",
"480 71 OFFCURVE",
"487 135 OFFCURVE",
"495 182 QCURVE SMOOTH",
"544 458 LINE",
"545 462 OFFCURVE",
"550 489 OFFCURVE",
"550 497 QCURVE SMOOTH",
"550 506 OFFCURVE",
"540 515 OFFCURVE",
"526 515 QCURVE SMOOTH",
"480 515 LINE",
"416 156 LINE SMOOTH",
"414 146 OFFCURVE",
"408 132 OFFCURVE",
"401 125 QCURVE SMOOTH",
"379 103 OFFCURVE",
"301 54 OFFCURVE",
"258 54 QCURVE SMOOTH",
"205 54 OFFCURVE",
"155 94 OFFCURVE",
"155 133 QCURVE SMOOTH",
"155 150 OFFCURVE",
"162 191 OFFCURVE",
"163 196 QCURVE SMOOTH",
"209 458 LINE",
"210 462 OFFCURVE",
"215 489 OFFCURVE",
"215 497 QCURVE SMOOTH",
"215 506 OFFCURVE",
"205 515 OFFCURVE",
"191 515 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
54 50 14 46 13 106 46 19 114 33 18 114 24 21 3 0 6 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 549;
}
);
note = uni00B5;
unicode = 00B5;
},
{
glyphname = percent;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"341 385 OFFCURVE",
"439 446 OFFCURVE",
"492 548 OFFCURVE",
"492 607 QCURVE SMOOTH",
"492 673 OFFCURVE",
"411 741 OFFCURVE",
"341 741 QCURVE SMOOTH",
"278 741 OFFCURVE",
"180 680 OFFCURVE",
"127 578 OFFCURVE",
"127 519 QCURVE SMOOTH",
"127 453 OFFCURVE",
"208 385 OFFCURVE",
"278 385 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"160 0 LINE",
"224 0 LINE SMOOTH",
"236 0 OFFCURVE",
"251 8 OFFCURVE",
"260 20 QCURVE SMOOTH",
"802 727 LINE",
"739 727 LINE SMOOTH",
"727 727 OFFCURVE",
"712 719 OFFCURVE",
"703 707 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"249 444 OFFCURVE",
"205 488 OFFCURVE",
"205 530 QCURVE SMOOTH",
"205 570 OFFCURVE",
"235 640 OFFCURVE",
"292 682 OFFCURVE",
"331 682 QCURVE SMOOTH",
"370 682 OFFCURVE",
"414 638 OFFCURVE",
"414 596 QCURVE SMOOTH",
"414 556 OFFCURVE",
"384 486 OFFCURVE",
"328 444 OFFCURVE",
"289 444 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"693 -11 OFFCURVE",
"791 50 OFFCURVE",
"844 152 OFFCURVE",
"844 211 QCURVE SMOOTH",
"844 277 OFFCURVE",
"763 345 OFFCURVE",
"693 345 QCURVE SMOOTH",
"630 345 OFFCURVE",
"532 284 OFFCURVE",
"479 182 OFFCURVE",
"479 123 QCURVE SMOOTH",
"479 57 OFFCURVE",
"560 -11 OFFCURVE",
"630 -11 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"601 48 OFFCURVE",
"557 92 OFFCURVE",
"557 134 QCURVE SMOOTH",
"557 174 OFFCURVE",
"587 244 OFFCURVE",
"644 286 OFFCURVE",
"683 286 QCURVE SMOOTH",
"722 286 OFFCURVE",
"766 242 OFFCURVE",
"766 200 QCURVE SMOOTH",
"766 160 OFFCURVE",
"736 90 OFFCURVE",
"680 48 OFFCURVE",
"641 48 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 31 values pushed */
51 65 106 44 58 106 44 44 51 6 13 37 106 13 13 51 6 30 106 22 18 114 16 16 114 6 17 114 51 19 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 906;
}
);
note = uni0025;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"341 385 OFFCURVE",
"439 446 OFFCURVE",
"492 548 OFFCURVE",
"492 607 QCURVE SMOOTH",
"492 673 OFFCURVE",
"411 741 OFFCURVE",
"341 741 QCURVE SMOOTH",
"278 741 OFFCURVE",
"180 680 OFFCURVE",
"127 578 OFFCURVE",
"127 519 QCURVE SMOOTH",
"127 453 OFFCURVE",
"208 385 OFFCURVE",
"278 385 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"160 0 LINE",
"224 0 LINE SMOOTH",
"236 0 OFFCURVE",
"251 8 OFFCURVE",
"260 20 QCURVE SMOOTH",
"802 727 LINE",
"739 727 LINE SMOOTH",
"727 727 OFFCURVE",
"712 719 OFFCURVE",
"703 707 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"249 444 OFFCURVE",
"205 488 OFFCURVE",
"205 530 QCURVE SMOOTH",
"205 570 OFFCURVE",
"235 640 OFFCURVE",
"292 682 OFFCURVE",
"331 682 QCURVE SMOOTH",
"370 682 OFFCURVE",
"414 638 OFFCURVE",
"414 596 QCURVE SMOOTH",
"414 556 OFFCURVE",
"384 486 OFFCURVE",
"328 444 OFFCURVE",
"289 444 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"693 -11 OFFCURVE",
"791 50 OFFCURVE",
"844 152 OFFCURVE",
"844 211 QCURVE SMOOTH",
"844 277 OFFCURVE",
"763 345 OFFCURVE",
"693 345 QCURVE SMOOTH",
"630 345 OFFCURVE",
"532 284 OFFCURVE",
"479 182 OFFCURVE",
"479 123 QCURVE SMOOTH",
"479 57 OFFCURVE",
"560 -11 OFFCURVE",
"630 -11 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1107 -11 OFFCURVE",
"1205 50 OFFCURVE",
"1258 152 OFFCURVE",
"1258 211 QCURVE SMOOTH",
"1258 277 OFFCURVE",
"1177 345 OFFCURVE",
"1107 345 QCURVE SMOOTH",
"1044 345 OFFCURVE",
"946 284 OFFCURVE",
"893 182 OFFCURVE",
"893 123 QCURVE SMOOTH",
"893 57 OFFCURVE",
"974 -11 OFFCURVE",
"1044 -11 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"601 48 OFFCURVE",
"557 92 OFFCURVE",
"557 134 QCURVE SMOOTH",
"557 174 OFFCURVE",
"587 244 OFFCURVE",
"644 286 OFFCURVE",
"683 286 QCURVE SMOOTH",
"722 286 OFFCURVE",
"766 242 OFFCURVE",
"766 200 QCURVE SMOOTH",
"766 160 OFFCURVE",
"736 90 OFFCURVE",
"680 48 OFFCURVE",
"641 48 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1015 48 OFFCURVE",
"971 92 OFFCURVE",
"971 134 QCURVE SMOOTH",
"971 174 OFFCURVE",
"1001 244 OFFCURVE",
"1058 286 OFFCURVE",
"1097 286 QCURVE SMOOTH",
"1136 286 OFFCURVE",
"1180 242 OFFCURVE",
"1180 200 QCURVE SMOOTH",
"1180 160 OFFCURVE",
"1150 90 OFFCURVE",
"1094 48 OFFCURVE",
"1055 48 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 37 values pushed */
65 93 106 65 51 86 44 72 106 58 44 13 37 106 44 13 44 13 6 51 79 106 51 19 114 22 18 114 16 16 114 6 30 106 6 17 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 1320;
}
);
note = uni2030;
unicode = 2030;
},
{
glyphname = plus.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"314 82 LINE",
"341 237 LINE",
"496 237 LINE",
"508 303 LINE",
"353 303 LINE",
"370 401 LINE",
"371 405 OFFCURVE",
"376 432 OFFCURVE",
"376 440 QCURVE SMOOTH",
"376 449 OFFCURVE",
"365 458 OFFCURVE",
"350 458 QCURVE SMOOTH",
"309 458 LINE",
"282 303 LINE",
"127 303 LINE",
"115 237 LINE",
"270 237 LINE",
"253 139 LINE",
"252 135 OFFCURVE",
"247 108 OFFCURVE",
"247 100 QCURVE SMOOTH",
"247 91 OFFCURVE",
"258 82 OFFCURVE",
"273 82 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
18 7 8 106 21 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00555;
},
{
glyphname = minus.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"114 237 LINE",
"497 237 LINE",
"509 303 LINE",
"126 303 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00556;
},
{
glyphname = multiply.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"302 225 LINE",
"407 108 LINE",
"463 154 LINE",
"358 271 LINE",
"500 384 LINE",
"460 429 LINE",
"318 314 LINE",
"213 431 LINE",
"156 385 LINE",
"260 266 LINE",
"120 156 LINE",
"160 111 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 1 value pushed */
2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00557;
},
{
glyphname = divide.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"275 390 LINE",
"382 390 LINE",
"398 479 LINE",
"291 479 LINE"
);
},
{
closed = 1;
nodes = (
"110 237 LINE",
"502 237 LINE",
"513 303 LINE",
"122 303 LINE"
);
},
{
closed = 1;
nodes = (
"222 62 LINE",
"329 62 LINE",
"344 151 LINE",
"237 151 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
11 8 106 11 0 3 106 0 0 7 4 106 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00558;
},
{
glyphname = equal.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"125 304 LINE",
"504 304 LINE",
"516 370 LINE",
"137 370 LINE"
);
},
{
closed = 1;
nodes = (
"488 171 LINE",
"498 237 LINE",
"120 237 LINE",
"109 171 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
5 4 106 5 5 8 3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00559;
},
{
glyphname = notequal.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"293 171 LINE",
"490 171 LINE",
"500 237 LINE",
"327 237 LINE",
"366 304 LINE",
"508 304 LINE",
"520 370 LINE",
"402 370 LINE",
"486 515 LINE",
"421 515 LINE",
"336 370 LINE",
"134 370 LINE",
"122 304 LINE",
"300 304 LINE",
"261 237 LINE",
"115 237 LINE",
"104 171 LINE",
"227 171 LINE",
"143 26 LINE",
"209 26 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
19 4 3 106 16 4 4 20 12 7 8 106 15 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00560;
},
{
glyphname = greater.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"511 303 LINE",
"167 484 LINE",
"162 454 LINE SMOOTH",
"158 430 OFFCURVE",
"158 427 QCURVE SMOOTH",
"158 417 OFFCURVE",
"170 405 OFFCURVE",
"185 398 QCURVE SMOOTH",
"414 287 LINE",
"138 167 LINE SMOOTH",
"124 161 OFFCURVE",
"113 152 OFFCURVE",
"107 139 OFFCURVE",
"104 125 QCURVE SMOOTH",
"97 87 LINE",
"505 268 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 1 value pushed */
7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00561;
},
{
glyphname = less.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"100 268 LINE",
"448 87 LINE",
"453 117 LINE SMOOTH",
"457 141 OFFCURVE",
"457 144 QCURVE SMOOTH",
"457 154 OFFCURVE",
"445 166 OFFCURVE",
"429 173 QCURVE SMOOTH",
"197 284 LINE",
"477 404 LINE SMOOTH",
"490 410 OFFCURVE",
"502 419 OFFCURVE",
"508 431 OFFCURVE",
"511 446 QCURVE SMOOTH",
"518 484 LINE",
"105 303 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 1 value pushed */
7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00562;
},
{
glyphname = greaterequal.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"510 351 LINE",
"171 532 LINE",
"166 502 LINE SMOOTH",
"162 478 OFFCURVE",
"162 475 QCURVE SMOOTH",
"162 465 OFFCURVE",
"174 453 OFFCURVE",
"189 446 QCURVE SMOOTH",
"414 335 LINE",
"142 215 LINE SMOOTH",
"128 209 OFFCURVE",
"116 200 OFFCURVE",
"110 187 OFFCURVE",
"108 173 QCURVE",
"101 135 LINE",
"505 316 LINE"
);
},
{
closed = 1;
nodes = (
"79 30 LINE",
"458 30 LINE",
"470 96 LINE",
"91 96 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
7 7 19 16 106 19 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00563;
},
{
glyphname = lessequal.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"128 316 LINE",
"469 135 LINE",
"474 165 LINE SMOOTH",
"478 189 OFFCURVE",
"478 192 QCURVE SMOOTH",
"478 202 OFFCURVE",
"467 214 OFFCURVE",
"452 221 QCURVE SMOOTH",
"224 332 LINE",
"498 452 LINE SMOOTH",
"513 459 OFFCURVE",
"525 467 OFFCURVE",
"531 480 OFFCURVE",
"533 494 QCURVE SMOOTH",
"539 532 LINE",
"133 351 LINE"
);
},
{
closed = 1;
nodes = (
"72 30 LINE",
"454 30 LINE",
"466 96 LINE",
"84 96 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
7 7 19 16 106 19 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
RTHG[ ]\011/* RoundToHalfGrid */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00564;
},
{
glyphname = plusminus.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"280 287 LINE",
"267 209 LINE",
"266 205 OFFCURVE",
"261 178 OFFCURVE",
"261 170 QCURVE SMOOTH",
"261 161 OFFCURVE",
"271 152 OFFCURVE",
"286 152 QCURVE SMOOTH",
"326 152 LINE",
"350 287 LINE",
"509 287 LINE",
"521 353 LINE",
"362 353 LINE",
"376 431 LINE",
"377 435 OFFCURVE",
"382 462 OFFCURVE",
"382 470 QCURVE SMOOTH",
"382 479 OFFCURVE",
"372 488 OFFCURVE",
"357 488 QCURVE SMOOTH",
"316 488 LINE",
"292 353 LINE",
"134 353 LINE",
"122 287 LINE"
);
},
{
closed = 1;
nodes = (
"77 30 LINE",
"464 30 LINE",
"476 96 LINE",
"89 96 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
1 14 11 106 0 14 14 27 24 106 27 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00565;
},
{
glyphname = approxequal.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"523 382 LINE",
"484 356 OFFCURVE",
"434 340 OFFCURVE",
"411 340 QCURVE SMOOTH",
"397 340 OFFCURVE",
"370 349 OFFCURVE",
"351 358 QCURVE SMOOTH",
"323 371 OFFCURVE",
"279 384 OFFCURVE",
"251 384 QCURVE SMOOTH",
"225 384 OFFCURVE",
"160 365 OFFCURVE",
"131 342 QCURVE",
"121 278 LINE",
"161 304 OFFCURVE",
"211 320 OFFCURVE",
"235 320 QCURVE SMOOTH",
"249 320 OFFCURVE",
"276 311 OFFCURVE",
"295 302 QCURVE SMOOTH",
"324 289 OFFCURVE",
"366 276 OFFCURVE",
"394 276 QCURVE SMOOTH",
"420 276 OFFCURVE",
"484 295 OFFCURVE",
"513 318 QCURVE"
);
},
{
closed = 1;
nodes = (
"502 253 LINE",
"462 227 OFFCURVE",
"412 211 OFFCURVE",
"390 211 QCURVE SMOOTH",
"376 211 OFFCURVE",
"349 220 OFFCURVE",
"330 229 QCURVE SMOOTH",
"302 242 OFFCURVE",
"257 255 OFFCURVE",
"229 255 QCURVE SMOOTH",
"203 255 OFFCURVE",
"139 236 OFFCURVE",
"110 213 QCURVE",
"98 149 LINE",
"138 175 OFFCURVE",
"189 191 OFFCURVE",
"213 191 QCURVE SMOOTH",
"227 191 OFFCURVE",
"254 182 OFFCURVE",
"273 173 QCURVE SMOOTH",
"301 160 OFFCURVE",
"345 147 OFFCURVE",
"373 147 QCURVE SMOOTH",
"399 147 OFFCURVE",
"461 166 OFFCURVE",
"490 189 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
150 47 166 47 2 28 47 106 37 28 
PUSHW[ ]\011/* 1 value pushed */
-64 
NPUSHB[ ]\011/* 46 values pushed */
20 23 72 28 41 50 153 34 169 34 2 41 34 106 41 41 2 53 24 153 8 169 8 2 15 8 106 15 64 20 23 72 15 2 128 150 21 166 21 2 2 21 106 11 2 18 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SMD[ ]\011/* SetMinimumDistance */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01101]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01101]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
DELTAP1[ ]\011/* DeltaExceptionP1 */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00566;
},
{
glyphname = summation.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"5 -89 LINE",
"511 -89 LINE",
"523 -18 LINE",
"103 -18 LINE",
"418 324 LINE",
"239 661 LINE",
"621 661 LINE",
"633 727 LINE",
"160 727 LINE",
"154 695 LINE",
"152 681 OFFCURVE",
"152 676 QCURVE SMOOTH",
"152 662 OFFCURVE",
"160 644 QCURVE",
"330 320 LINE",
"35 -6 LINE SMOOTH",
"24 -18 OFFCURVE",
"13 -43 OFFCURVE",
"10 -60 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
18 15 106 18 10 13 106 10 16 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00567;
},
{
glyphname = percent.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"346 674 OFFCURVE",
"293 741 OFFCURVE",
"246 741 QCURVE SMOOTH",
"200 741 OFFCURVE",
"125 688 OFFCURVE",
"82 586 OFFCURVE",
"82 516 QCURVE SMOOTH",
"82 452 OFFCURVE",
"136 385 OFFCURVE",
"183 385 QCURVE SMOOTH",
"230 385 OFFCURVE",
"304 439 OFFCURVE",
"346 541 OFFCURVE",
"346 611 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"574 727 LINE",
"511 727 LINE SMOOTH",
"501 727 OFFCURVE",
"488 719 OFFCURVE",
"480 707 QCURVE",
"71 0 LINE",
"135 0 LINE SMOOTH",
"145 0 OFFCURVE",
"158 8 OFFCURVE",
"166 20 QCURVE"
);
},
{
closed = 1;
nodes = (
"278 537 OFFCURVE",
"237 444 OFFCURVE",
"193 444 QCURVE SMOOTH",
"172 444 OFFCURVE",
"149 484 OFFCURVE",
"149 522 QCURVE SMOOTH",
"149 595 OFFCURVE",
"194 682 OFFCURVE",
"235 682 QCURVE SMOOTH",
"256 682 OFFCURVE",
"278 643 OFFCURVE",
"278 605 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"569 278 OFFCURVE",
"516 345 OFFCURVE",
"469 345 QCURVE SMOOTH",
"423 345 OFFCURVE",
"348 292 OFFCURVE",
"305 190 OFFCURVE",
"305 120 QCURVE SMOOTH",
"305 56 OFFCURVE",
"359 -11 OFFCURVE",
"406 -11 QCURVE SMOOTH",
"453 -11 OFFCURVE",
"527 43 OFFCURVE",
"569 145 OFFCURVE",
"569 215 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"502 142 OFFCURVE",
"460 48 OFFCURVE",
"416 48 QCURVE SMOOTH",
"396 48 OFFCURVE",
"373 88 OFFCURVE",
"373 126 QCURVE SMOOTH",
"373 199 OFFCURVE",
"418 286 OFFCURVE",
"458 286 QCURVE SMOOTH",
"480 286 OFFCURVE",
"502 247 OFFCURVE",
"502 210 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
46 52 106 3 32 106 46 3 46 3 10 39 58 106 39 19 22 16 17 18 10 26 106 10 17 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00568;
},
{
glyphname = lozenge;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"280 -91 LINE",
"585 321 LINE",
"435 712 LINE SMOOTH",
"430 725 OFFCURVE",
"423 733 OFFCURVE",
"412 733 QCURVE SMOOTH",
"381 733 LINE",
"78 320 LINE",
"227 -70 LINE",
"228 -72 OFFCURVE",
"230 -79 QCURVE",
"232 -85 OFFCURVE",
"239 -91 OFFCURVE",
"248 -91 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"507 321 LINE",
"276 -2 LINE",
"154 321 LINE",
"386 644 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
16 2 12 14 6 16 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 607;
}
);
note = uni25CA;
unicode = 25CA;
},
{
glyphname = at;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"808 -4 OFFCURVE",
"942 129 OFFCURVE",
"1006 321 OFFCURVE",
"1006 407 QCURVE SMOOTH",
"1006 487 OFFCURVE",
"924 633 OFFCURVE",
"752 727 OFFCURVE",
"623 727 QCURVE SMOOTH",
"464 727 OFFCURVE",
"211 558 OFFCURVE",
"70 287 OFFCURVE",
"70 140 QCURVE SMOOTH",
"70 16 OFFCURVE",
"180 -144 OFFCURVE",
"351 -217 OFFCURVE",
"445 -217 QCURVE SMOOTH",
"531 -217 OFFCURVE",
"695 -171 OFFCURVE",
"756 -138 QCURVE",
"740 -93 LINE",
"736 -80 OFFCURVE",
"730 -72 OFFCURVE",
"724 -72 QCURVE SMOOTH",
"721 -72 OFFCURVE",
"707 -81 OFFCURVE",
"700 -87 QCURVE",
"682 -101 OFFCURVE",
"670 -108 QCURVE",
"580 -153 OFFCURVE",
"478 -153 QCURVE SMOOTH",
"393 -153 OFFCURVE",
"245 -96 OFFCURVE",
"151 38 OFFCURVE",
"151 147 QCURVE SMOOTH",
"151 284 OFFCURVE",
"270 520 OFFCURVE",
"484 660 OFFCURVE",
"620 660 QCURVE SMOOTH",
"726 660 OFFCURVE",
"866 584 OFFCURVE",
"930 461 OFFCURVE",
"930 390 QCURVE SMOOTH",
"930 325 OFFCURVE",
"886 173 OFFCURVE",
"801 65 OFFCURVE",
"742 64 QCURVE SMOOTH",
"725 64 OFFCURVE",
"714 78 OFFCURVE",
"714 91 QCURVE SMOOTH",
"714 113 OFFCURVE",
"720 147 QCURVE SMOOTH",
"762 387 LINE",
"763 390 OFFCURVE",
"766 407 OFFCURVE",
"767 417 QCURVE",
"767 426 OFFCURVE",
"758 434 OFFCURVE",
"747 440 QCURVE",
"713 456 OFFCURVE",
"622 479 OFFCURVE",
"576 479 QCURVE SMOOTH",
"488 479 OFFCURVE",
"366 389 OFFCURVE",
"305 242 OFFCURVE",
"305 157 QCURVE SMOOTH",
"305 110 OFFCURVE",
"347 35 OFFCURVE",
"423 -7 OFFCURVE",
"470 -7 QCURVE SMOOTH",
"534 -7 OFFCURVE",
"567 15 QCURVE SMOOTH",
"600 37 OFFCURVE",
"602 38 QCURVE",
"604 40 OFFCURVE",
"633 60 OFFCURVE",
"638 60 QCURVE SMOOTH",
"643 60 OFFCURVE",
"647 54 OFFCURVE",
"648 46 QCURVE",
"649 28 OFFCURVE",
"676 -4 OFFCURVE",
"708 -4 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"652 161 LINE",
"650 152 OFFCURVE",
"645 140 OFFCURVE",
"639 133 QCURVE SMOOTH",
"616 106 OFFCURVE",
"540 53 OFFCURVE",
"501 53 QCURVE SMOOTH",
"447 53 OFFCURVE",
"383 111 OFFCURVE",
"383 177 QCURVE SMOOTH",
"383 234 OFFCURVE",
"423 346 OFFCURVE",
"505 419 OFFCURVE",
"564 419 QCURVE SMOOTH",
"587 419 OFFCURVE",
"636 407 OFFCURVE",
"674 392 OFFCURVE",
"681 386 QCURVE SMOOTH",
"686 382 OFFCURVE",
"689 377 OFFCURVE",
"689 374 QCURVE SMOOTH",
"689 368 OFFCURVE",
"686 353 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
81 35 106 81 18 114 20 90 106 4 20 20 12 73 43 106 73 16 114 65 51 106 65 12 97 106 12 19 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 1027;
}
);
note = uni0040;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"369 150 LINE",
"376 175 OFFCURVE",
"393 212 OFFCURVE",
"431 255 OFFCURVE",
"466 280 QCURVE SMOOTH",
"532 328 LINE",
"548 313 OFFCURVE",
"571 264 OFFCURVE",
"571 233 QCURVE SMOOTH",
"571 169 OFFCURVE",
"499 90 OFFCURVE",
"389 56 OFFCURVE",
"328 56 QCURVE SMOOTH",
"275 56 OFFCURVE",
"194 85 OFFCURVE",
"149 141 OFFCURVE",
"149 181 QCURVE SMOOTH",
"149 238 OFFCURVE",
"206 322 OFFCURVE",
"300 366 OFFCURVE",
"352 366 QCURVE SMOOTH",
"400 366 LINE",
"412 433 LINE",
"377 433 LINE SMOOTH",
"312 433 OFFCURVE",
"244 487 OFFCURVE",
"244 537 QCURVE SMOOTH",
"244 582 OFFCURVE",
"291 641 OFFCURVE",
"365 668 OFFCURVE",
"406 668 QCURVE SMOOTH",
"441 668 OFFCURVE",
"491 652 OFFCURVE",
"514 637 QCURVE",
"515 636 OFFCURVE",
"527 628 OFFCURVE",
"533 628 QCURVE SMOOTH",
"542 628 OFFCURVE",
"547 637 QCURVE SMOOTH",
"582 704 LINE",
"551 717 OFFCURVE",
"465 735 OFFCURVE",
"418 735 QCURVE SMOOTH",
"347 735 OFFCURVE",
"233 687 OFFCURVE",
"166 593 OFFCURVE",
"166 525 QCURVE SMOOTH",
"166 472 OFFCURVE",
"194 444 QCURVE",
"201 438 OFFCURVE",
"215 428 QCURVE SMOOTH",
"222 423 OFFCURVE",
"234 412 OFFCURVE",
"234 407 QCURVE SMOOTH",
"234 402 OFFCURVE",
"219 391 OFFCURVE",
"206 385 QCURVE SMOOTH",
"192 379 OFFCURVE",
"184 375 QCURVE",
"150 356 OFFCURVE",
"98 287 OFFCURVE",
"70 205 OFFCURVE",
"70 167 QCURVE SMOOTH",
"70 117 OFFCURVE",
"118 36 OFFCURVE",
"228 -12 OFFCURVE",
"315 -12 QCURVE SMOOTH",
"403 -12 OFFCURVE",
"556 47 OFFCURVE",
"650 165 OFFCURVE",
"650 247 QCURVE SMOOTH",
"650 289 OFFCURVE",
"618 356 OFFCURVE",
"595 375 QCURVE",
"660 425 LINE SMOOTH",
"711 465 OFFCURVE",
"767 533 OFFCURVE",
"786 580 OFFCURVE",
"790 604 QCURVE",
"724 604 LINE",
"717 579 OFFCURVE",
"700 542 OFFCURVE",
"662 499 OFFCURVE",
"628 474 QCURVE SMOOTH",
"435 329 LINE SMOOTH",
"383 290 OFFCURVE",
"327 222 OFFCURVE",
"307 175 OFFCURVE",
"303 150 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
33 64 67 106 64 64 21 45 57 106 45 17 114 21 75 106 21 19 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 730;
}
);
note = uni0026;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"494 -89 LINE",
"638 733 LINE",
"493 734 LINE SMOOTH",
"392 734 OFFCURVE",
"251 674 OFFCURVE",
"180 565 OFFCURVE",
"180 493 QCURVE SMOOTH",
"180 408 OFFCURVE",
"287 335 OFFCURVE",
"382 333 QCURVE",
"331 46 LINE SMOOTH",
"325 14 OFFCURVE",
"308 -23 OFFCURVE",
"279 -41 OFFCURVE",
"254 -41 QCURVE SMOOTH",
"233 -41 OFFCURVE",
"211 -34 QCURVE",
"198 -82 LINE",
"211 -87 OFFCURVE",
"246 -94 OFFCURVE",
"265 -94 QCURVE SMOOTH",
"307 -94 OFFCURVE",
"358 -61 OFFCURVE",
"386 3 OFFCURVE",
"396 56 QCURVE SMOOTH",
"506 671 LINE",
"564 671 LINE",
"440 -32 LINE",
"439 -36 OFFCURVE",
"434 -63 OFFCURVE",
"434 -71 QCURVE SMOOTH",
"434 -80 OFFCURVE",
"444 -89 OFFCURVE",
"458 -89 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
30 7 106 30 16 114 33 33 12 18 106 15 12 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 698;
}
);
note = uni00B6;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"110 243 OFFCURVE",
"137 193 OFFCURVE",
"186 157 OFFCURVE",
"230 132 QCURVE SMOOTH",
"248 122 LINE SMOOTH",
"279 105 OFFCURVE",
"313 81 OFFCURVE",
"335 50 OFFCURVE",
"335 28 QCURVE SMOOTH",
"335 -13 OFFCURVE",
"271 -49 OFFCURVE",
"219 -49 QCURVE SMOOTH",
"182 -49 OFFCURVE",
"109 -23 OFFCURVE",
"82 -5 QCURVE",
"53 -63 LINE",
"85 -83 OFFCURVE",
"172 -111 OFFCURVE",
"218 -111 QCURVE SMOOTH",
"282 -111 OFFCURVE",
"371 -70 OFFCURVE",
"416 -1 OFFCURVE",
"416 42 QCURVE SMOOTH",
"416 80 OFFCURVE",
"382 133 OFFCURVE",
"346 157 QCURVE",
"405 177 OFFCURVE",
"494 262 OFFCURVE",
"494 333 QCURVE SMOOTH",
"494 373 OFFCURVE",
"460 428 OFFCURVE",
"401 469 OFFCURVE",
"341 503 QCURVE SMOOTH",
"304 524 OFFCURVE",
"268 559 OFFCURVE",
"268 585 QCURVE SMOOTH",
"268 610 OFFCURVE",
"298 647 OFFCURVE",
"323 657 QCURVE SMOOTH",
"350 667 OFFCURVE",
"377 667 QCURVE SMOOTH",
"402 667 OFFCURVE",
"443 652 OFFCURVE",
"460 643 QCURVE",
"477 633 OFFCURVE",
"479 633 QCURVE SMOOTH",
"483 633 OFFCURVE",
"492 644 OFFCURVE",
"498 654 QCURVE SMOOTH",
"524 700 LINE",
"496 711 OFFCURVE",
"422 727 OFFCURVE",
"386 727 QCURVE SMOOTH",
"324 727 OFFCURVE",
"235 685 OFFCURVE",
"188 615 OFFCURVE",
"188 574 QCURVE SMOOTH",
"188 545 OFFCURVE",
"207 504 OFFCURVE",
"241 473 OFFCURVE",
"270 456 QCURVE",
"209 436 OFFCURVE",
"110 349 OFFCURVE",
"110 278 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"419 272 OFFCURVE",
"344 206 OFFCURVE",
"284 193 QCURVE",
"248 211 OFFCURVE",
"211 235 OFFCURVE",
"185 269 OFFCURVE",
"185 293 QCURVE SMOOTH",
"185 322 OFFCURVE",
"225 374 OFFCURVE",
"292 412 OFFCURVE",
"332 421 QCURVE",
"374 397 OFFCURVE",
"419 349 OFFCURVE",
"419 316 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
54 74 66 27 4 10 44 51 106 44 10 22 106 10 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
SLOOP[ ]\011/* SetLoopVariable */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 534;
}
);
note = uni00A7;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"865 529 OFFCURVE",
"784 668 OFFCURVE",
"638 744 OFFCURVE",
"542 744 QCURVE SMOOTH",
"419 744 OFFCURVE",
"207 613 OFFCURVE",
"83 400 OFFCURVE",
"83 285 QCURVE SMOOTH",
"83 193 OFFCURVE",
"164 53 OFFCURVE",
"311 -23 OFFCURVE",
"407 -23 QCURVE SMOOTH",
"531 -23 OFFCURVE",
"741 109 OFFCURVE",
"865 322 OFFCURVE",
"865 437 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"338 33 OFFCURVE",
"216 99 OFFCURVE",
"148 219 OFFCURVE",
"148 297 QCURVE SMOOTH",
"148 398 OFFCURVE",
"255 579 OFFCURVE",
"433 688 OFFCURVE",
"532 688 QCURVE SMOOTH",
"611 688 OFFCURVE",
"733 622 OFFCURVE",
"800 503 OFFCURVE",
"800 425 QCURVE SMOOTH",
"800 323 OFFCURVE",
"693 142 OFFCURVE",
"517 33 OFFCURVE",
"417 33 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"563 221 LINE",
"542 209 OFFCURVE",
"493 193 OFFCURVE",
"471 193 QCURVE SMOOTH",
"411 193 OFFCURVE",
"355 249 OFFCURVE",
"355 305 QCURVE SMOOTH",
"355 354 OFFCURVE",
"381 445 OFFCURVE",
"435 513 OFFCURVE",
"476 526 QCURVE SMOOTH",
"501 533 OFFCURVE",
"523 533 QCURVE SMOOTH",
"545 533 OFFCURVE",
"574 524 OFFCURVE",
"584 518 QCURVE SMOOTH",
"594 512 OFFCURVE",
"596 512 QCURVE SMOOTH",
"600 512 OFFCURVE",
"607 519 OFFCURVE",
"612 528 QCURVE SMOOTH",
"635 568 LINE",
"612 576 OFFCURVE",
"564 585 OFFCURVE",
"529 585 QCURVE SMOOTH",
"453 585 OFFCURVE",
"345 504 OFFCURVE",
"290 375 OFFCURVE",
"290 304 QCURVE SMOOTH",
"290 217 OFFCURVE",
"373 142 OFFCURVE",
"441 142 QCURVE SMOOTH",
"480 142 OFFCURVE",
"554 164 OFFCURVE",
"580 179 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
3 31 106 34 62 106 34 34 3 11 41 53 106 41 41 3 11 23 106 11 17 114 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 886;
}
);
note = uni00A9;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"865 529 OFFCURVE",
"784 668 OFFCURVE",
"638 744 OFFCURVE",
"542 744 QCURVE SMOOTH",
"419 744 OFFCURVE",
"207 613 OFFCURVE",
"83 400 OFFCURVE",
"83 285 QCURVE SMOOTH",
"83 193 OFFCURVE",
"164 53 OFFCURVE",
"311 -23 OFFCURVE",
"407 -23 QCURVE SMOOTH",
"531 -23 OFFCURVE",
"741 109 OFFCURVE",
"865 322 OFFCURVE",
"865 437 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"338 33 OFFCURVE",
"216 99 OFFCURVE",
"148 219 OFFCURVE",
"148 297 QCURVE SMOOTH",
"148 398 OFFCURVE",
"255 579 OFFCURVE",
"433 688 OFFCURVE",
"532 688 QCURVE SMOOTH",
"611 688 OFFCURVE",
"733 622 OFFCURVE",
"800 503 OFFCURVE",
"800 425 QCURVE SMOOTH",
"800 323 OFFCURVE",
"693 142 OFFCURVE",
"517 33 OFFCURVE",
"417 33 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"368 576 LINE",
"300 190 LINE SMOOTH",
"296 168 OFFCURVE",
"296 163 QCURVE SMOOTH",
"296 147 OFFCURVE",
"314 147 QCURVE SMOOTH",
"354 147 LINE",
"384 317 LINE",
"483 317 LINE SMOOTH",
"514 317 OFFCURVE",
"539 299 OFFCURVE",
"539 278 QCURVE SMOOTH",
"539 273 OFFCURVE",
"537 259 QCURVE SMOOTH",
"527 187 LINE",
"526 183 OFFCURVE",
"524 170 OFFCURVE",
"524 163 QCURVE SMOOTH",
"524 147 OFFCURVE",
"542 147 QCURVE SMOOTH",
"582 147 LINE",
"595 245 LINE SMOOTH",
"600 275 OFFCURVE",
"600 288 QCURVE SMOOTH",
"600 321 OFFCURVE",
"579 335 QCURVE",
"574 338 OFFCURVE",
"571 340 QCURVE",
"567 342 OFFCURVE",
"564 344 OFFCURVE",
"564 346 QCURVE SMOOTH",
"564 348 OFFCURVE",
"570 352 OFFCURVE",
"575 354 QCURVE SMOOTH",
"580 356 OFFCURVE",
"586 360 QCURVE SMOOTH",
"601 370 OFFCURVE",
"625 419 OFFCURVE",
"638 477 OFFCURVE",
"638 499 QCURVE SMOOTH",
"638 531 OFFCURVE",
"608 566 OFFCURVE",
"544 579 OFFCURVE",
"487 579 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"537 375 OFFCURVE",
"523 369 OFFCURVE",
"509 369 QCURVE SMOOTH",
"393 369 LINE",
"420 525 LINE",
"466 527 OFFCURVE",
"490 527 QCURVE SMOOTH",
"523 527 OFFCURVE",
"559 519 OFFCURVE",
"575 499 OFFCURVE",
"575 481 QCURVE SMOOTH",
"575 452 OFFCURVE",
"558 399 OFFCURVE",
"542 381 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
44 68 85 106 68 68 32 55 55 69 32 82 106 69 32 69 32 3 11 23 106 11 17 114 3 31 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 885;
}
);
note = uni00AE;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"229 381 LINE",
"281 678 LINE",
"399 678 LINE",
"408 727 LINE",
"119 727 LINE",
"110 678 LINE",
"228 678 LINE",
"183 422 LINE",
"182 419 OFFCURVE",
"179 402 OFFCURVE",
"178 393 QCURVE",
"178 387 OFFCURVE",
"185 381 OFFCURVE",
"193 381 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"781 381 LINE",
"798 691 LINE",
"799 713 LINE",
"799 721 OFFCURVE",
"792 727 OFFCURVE",
"783 727 QCURVE SMOOTH",
"726 727 LINE",
"587 439 LINE",
"552 710 LINE SMOOTH",
"551 720 OFFCURVE",
"543 727 OFFCURVE",
"535 727 QCURVE SMOOTH",
"478 727 LINE",
"374 381 LINE",
"409 381 LINE SMOOTH",
"418 381 OFFCURVE",
"427 389 OFFCURVE",
"430 399 QCURVE SMOOTH",
"507 673 LINE",
"545 406 LINE",
"547 395 OFFCURVE",
"555 385 OFFCURVE",
"564 385 QCURVE SMOOTH",
"605 385 LINE",
"748 674 LINE",
"731 414 LINE",
"730 395 LINE",
"730 387 OFFCURVE",
"737 381 OFFCURVE",
"746 381 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
18 24 24 35 30 20 20 43 28 12 12 44 30 11 8 7 106 37 8 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 823;
}
);
note = uni2122;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"423 674 OFFCURVE",
"354 733 OFFCURVE",
"293 733 QCURVE SMOOTH",
"239 733 OFFCURVE",
"154 679 OFFCURVE",
"107 590 OFFCURVE",
"107 540 QCURVE SMOOTH",
"107 483 OFFCURVE",
"177 426 OFFCURVE",
"239 426 QCURVE SMOOTH",
"292 426 OFFCURVE",
"376 480 OFFCURVE",
"423 568 OFFCURVE",
"423 617 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"214 479 OFFCURVE",
"169 519 OFFCURVE",
"169 556 QCURVE SMOOTH",
"169 589 OFFCURVE",
"199 645 OFFCURVE",
"251 679 OFFCURVE",
"283 679 QCURVE SMOOTH",
"317 679 OFFCURVE",
"363 639 OFFCURVE",
"363 602 QCURVE SMOOTH",
"363 569 OFFCURVE",
"333 513 OFFCURVE",
"280 479 OFFCURVE",
"248 479 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
3 27 106 3 10 10 20 106 10 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 429;
}
);
note = uni00B0;
unicode = 00B0;
},
{
glyphname = bar;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"84 -178 LINE",
"251 770 LINE",
"252 774 OFFCURVE",
"257 801 OFFCURVE",
"257 809 QCURVE SMOOTH",
"257 818 OFFCURVE",
"247 827 OFFCURVE",
"233 827 QCURVE SMOOTH",
"197 827 LINE",
"30 -121 LINE",
"29 -125 OFFCURVE",
"24 -152 OFFCURVE",
"24 -160 QCURVE SMOOTH",
"24 -169 OFFCURVE",
"34 -178 OFFCURVE",
"48 -178 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 11 7 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 224;
}
);
note = uni007C;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"197 827 LINE",
"132 462 LINE",
"131 458 OFFCURVE",
"126 431 OFFCURVE",
"126 423 QCURVE SMOOTH",
"126 414 OFFCURVE",
"136 405 OFFCURVE",
"150 405 QCURVE SMOOTH",
"186 405 LINE",
"251 770 LINE",
"252 774 OFFCURVE",
"257 801 OFFCURVE",
"257 809 QCURVE SMOOTH",
"257 818 OFFCURVE",
"247 827 OFFCURVE",
"233 827 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"94 245 LINE",
"30 -121 LINE",
"29 -125 OFFCURVE",
"24 -152 OFFCURVE",
"24 -160 QCURVE SMOOTH",
"24 -169 OFFCURVE",
"34 -178 OFFCURVE",
"48 -178 QCURVE SMOOTH",
"84 -178 LINE",
"148 188 LINE",
"149 192 OFFCURVE",
"154 219 OFFCURVE",
"154 227 QCURVE SMOOTH",
"154 236 OFFCURVE",
"144 245 OFFCURVE",
"130 245 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 31 23 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 224;
}
);
note = uni00A6;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"335 727 LINE",
"296 506 LINE",
"95 506 LINE",
"83 442 LINE",
"284 442 LINE",
"185 -121 LINE",
"184 -125 OFFCURVE",
"179 -152 OFFCURVE",
"179 -160 QCURVE SMOOTH",
"179 -169 OFFCURVE",
"189 -178 OFFCURVE",
"203 -178 QCURVE SMOOTH",
"239 -178 LINE",
"348 442 LINE",
"548 442 LINE",
"560 506 LINE",
"360 506 LINE",
"388 670 LINE",
"389 674 OFFCURVE",
"394 701 OFFCURVE",
"394 709 QCURVE SMOOTH",
"394 718 OFFCURVE",
"384 727 OFFCURVE",
"370 727 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
14 10 2 22 6 9 20 19 106 20 20 10 22 16 114 10 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 525;
}
);
note = uni2020;
unicode = 2020;
},
{
glyphname = literSign;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"381 102 LINE",
"356 80 OFFCURVE",
"299 50 OFFCURVE",
"274 50 QCURVE SMOOTH",
"248 50 OFFCURVE",
"218 82 OFFCURVE",
"218 114 QCURVE SMOOTH",
"218 121 OFFCURVE",
"223 159 OFFCURVE",
"230 198 QCURVE SMOOTH",
"237 236 OFFCURVE",
"240 255 QCURVE SMOOTH",
"252 324 LINE",
"299 371 LINE SMOOTH",
"372 444 OFFCURVE",
"469 591 OFFCURVE",
"469 661 QCURVE SMOOTH",
"469 698 OFFCURVE",
"427 750 OFFCURVE",
"381 750 QCURVE SMOOTH",
"318 750 OFFCURVE",
"230 652 OFFCURVE",
"214 562 QCURVE SMOOTH",
"174 332 LINE",
"55 228 LINE",
"86 189 LINE",
"160 253 LINE",
"144 165 OFFCURVE",
"136 111 OFFCURVE",
"136 92 QCURVE SMOOTH",
"136 41 OFFCURVE",
"194 -14 OFFCURVE",
"244 -14 QCURVE SMOOTH",
"286 -14 OFFCURVE",
"372 27 OFFCURVE",
"405 56 QCURVE"
);
},
{
closed = 1;
nodes = (
"267 407 LINE",
"296 570 LINE SMOOTH",
"307 628 OFFCURVE",
"344 685 OFFCURVE",
"373 685 QCURVE SMOOTH",
"389 685 OFFCURVE",
"405 664 OFFCURVE",
"405 645 QCURVE SMOOTH",
"405 597 OFFCURVE",
"344 494 OFFCURVE",
"299 441 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
46 11 10 15 42 106 10 22 8 15 9 9 2 15 17 114 2 31 106 2 19 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 477;
}
);
note = uni2113;
unicode = 2113;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"213 42 LINE",
"184 -122 LINE",
"183 -126 OFFCURVE",
"178 -153 OFFCURVE",
"178 -161 QCURVE SMOOTH",
"178 -170 OFFCURVE",
"188 -179 OFFCURVE",
"202 -179 QCURVE SMOOTH",
"238 -179 LINE",
"277 42 LINE",
"478 42 LINE",
"489 106 LINE",
"289 106 LINE",
"348 442 LINE",
"548 442 LINE",
"560 506 LINE",
"360 506 LINE",
"389 670 LINE",
"390 674 OFFCURVE",
"395 701 OFFCURVE",
"395 709 QCURVE SMOOTH",
"395 718 OFFCURVE",
"385 727 OFFCURVE",
"371 727 QCURVE SMOOTH",
"335 727 LINE",
"296 506 LINE",
"95 506 LINE",
"83 442 LINE",
"284 442 LINE",
"225 106 LINE",
"24 106 LINE",
"13 42 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
27 23 11 7 1 0 22 19 106 22 22 23 7 15 18 5 4 106 5 5 23 7 16 114 23 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 525;
}
);
note = uni2021;
unicode = 2021;
},
{
glyphname = estimated;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"205 320 LINE",
"698 320 LINE",
"703 349 OFFCURVE",
"703 387 QCURVE SMOOTH",
"703 464 OFFCURVE",
"643 586 OFFCURVE",
"526 655 OFFCURVE",
"442 655 QCURVE SMOOTH",
"334 655 OFFCURVE",
"160 539 OFFCURVE",
"62 353 OFFCURVE",
"62 253 QCURVE SMOOTH",
"62 177 OFFCURVE",
"123 57 OFFCURVE",
"241 -12 OFFCURVE",
"321 -12 QCURVE SMOOTH",
"419 -12 OFFCURVE",
"568 72 OFFCURVE",
"634 150 QCURVE",
"600 173 LINE",
"544 104 OFFCURVE",
"412 28 OFFCURVE",
"328 28 QCURVE SMOOTH",
"228 28 OFFCURVE",
"166 99 QCURVE"
);
},
{
closed = 1;
nodes = (
"566 360 LINE",
"212 360 LINE",
"244 544 LINE",
"284 579 OFFCURVE",
"382 615 OFFCURVE",
"434 615 QCURVE SMOOTH",
"483 615 OFFCURVE",
"568 576 OFFCURVE",
"598 543 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
24 31 106 24 24 9 17 27 106 17 5 9 2 106 6 9 19 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 710;
}
);
note = uni212E;
unicode = 212E;
},
{
glyphname = numero;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"556 0 LINE",
"675 670 LINE",
"676 674 OFFCURVE",
"681 701 OFFCURVE",
"681 709 QCURVE SMOOTH",
"681 718 OFFCURVE",
"671 727 OFFCURVE",
"657 727 QCURVE SMOOTH",
"612 727 LINE",
"497 70 LINE",
"321 702 LINE SMOOTH",
"317 716 OFFCURVE",
"305 727 OFFCURVE",
"295 727 QCURVE SMOOTH",
"186 727 LINE",
"68 57 LINE",
"67 53 OFFCURVE",
"62 26 OFFCURVE",
"62 18 QCURVE SMOOTH",
"62 9 OFFCURVE",
"72 0 OFFCURVE",
"86 0 QCURVE SMOOTH",
"132 0 LINE",
"247 657 LINE",
"428 25 LINE SMOOTH",
"432 10 OFFCURVE",
"444 0 OFFCURVE",
"454 0 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1143 604 OFFCURVE",
"1057 687 OFFCURVE",
"975 687 QCURVE SMOOTH",
"894 687 OFFCURVE",
"781 602 OFFCURVE",
"726 467 OFFCURVE",
"726 391 QCURVE SMOOTH",
"726 311 OFFCURVE",
"812 227 OFFCURVE",
"894 227 QCURVE SMOOTH",
"974 227 OFFCURVE",
"1087 313 OFFCURVE",
"1143 450 OFFCURVE",
"1143 524 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"802 288 OFFCURVE",
"802 400 QCURVE SMOOTH",
"802 456 OFFCURVE",
"837 559 OFFCURVE",
"910 626 OFFCURVE",
"964 626 QCURVE SMOOTH",
"1068 626 OFFCURVE",
"1068 515 QCURVE SMOOTH",
"1068 459 OFFCURVE",
"1033 355 OFFCURVE",
"959 288 OFFCURVE",
"904 288 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"678 74 LINE",
"1057 74 LINE",
"1069 144 LINE",
"690 144 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
54 57 106 54 54 27 31 53 106 31 31 59 38 47 106 38 38 5 22 12 16 114 27 8 5 18 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 1178;
}
);
note = uni2116;
unicode = 2116;
},
{
glyphname = paragraph.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"425 -89 LINE",
"569 733 LINE",
"433 734 LINE SMOOTH",
"338 734 OFFCURVE",
"204 673 OFFCURVE",
"136 564 OFFCURVE",
"136 491 QCURVE SMOOTH",
"136 407 OFFCURVE",
"236 335 OFFCURVE",
"324 333 QCURVE",
"273 46 LINE SMOOTH",
"267 14 OFFCURVE",
"251 -23 OFFCURVE",
"223 -41 OFFCURVE",
"200 -41 QCURVE SMOOTH",
"180 -41 OFFCURVE",
"160 -34 QCURVE",
"147 -82 LINE",
"159 -87 OFFCURVE",
"192 -94 OFFCURVE",
"210 -94 QCURVE SMOOTH",
"250 -94 OFFCURVE",
"298 -61 OFFCURVE",
"325 3 OFFCURVE",
"335 56 QCURVE SMOOTH",
"445 671 LINE",
"499 671 LINE",
"375 -32 LINE",
"374 -36 OFFCURVE",
"369 -63 OFFCURVE",
"369 -71 QCURVE SMOOTH",
"369 -80 OFFCURVE",
"379 -89 OFFCURVE",
"392 -89 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
30 7 106 30 16 33 33 12 18 106 15 12 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[1]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
MIAP[1]\011/* MoveIndirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00585;
},
{
glyphname = section.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"128 243 OFFCURVE",
"156 193 OFFCURVE",
"207 157 OFFCURVE",
"252 132 QCURVE",
"264 126 OFFCURVE",
"270 122 QCURVE",
"302 106 OFFCURVE",
"338 82 OFFCURVE",
"360 50 OFFCURVE",
"360 28 QCURVE SMOOTH",
"360 -13 OFFCURVE",
"294 -49 OFFCURVE",
"241 -49 QCURVE SMOOTH",
"203 -49 OFFCURVE",
"129 -23 OFFCURVE",
"101 -5 QCURVE",
"71 -63 LINE",
"104 -83 OFFCURVE",
"193 -111 OFFCURVE",
"240 -111 QCURVE SMOOTH",
"306 -111 OFFCURVE",
"397 -70 OFFCURVE",
"442 -1 OFFCURVE",
"442 41 QCURVE SMOOTH",
"442 80 OFFCURVE",
"407 133 OFFCURVE",
"370 157 QCURVE",
"430 177 OFFCURVE",
"521 261 OFFCURVE",
"521 332 QCURVE SMOOTH",
"521 372 OFFCURVE",
"486 427 OFFCURVE",
"425 469 OFFCURVE",
"363 503 QCURVE SMOOTH",
"325 524 OFFCURVE",
"288 559 OFFCURVE",
"288 585 QCURVE SMOOTH",
"288 610 OFFCURVE",
"318 647 OFFCURVE",
"370 667 OFFCURVE",
"400 667 QCURVE SMOOTH",
"425 667 OFFCURVE",
"468 652 OFFCURVE",
"485 643 QCURVE",
"502 633 OFFCURVE",
"504 633 QCURVE SMOOTH",
"509 633 OFFCURVE",
"517 642 OFFCURVE",
"524 654 QCURVE SMOOTH",
"550 700 LINE",
"521 711 OFFCURVE",
"446 727 OFFCURVE",
"409 727 QCURVE SMOOTH",
"346 727 OFFCURVE",
"254 685 OFFCURVE",
"207 615 OFFCURVE",
"207 574 QCURVE SMOOTH",
"207 545 OFFCURVE",
"226 504 OFFCURVE",
"262 473 OFFCURVE",
"292 456 QCURVE",
"230 436 OFFCURVE",
"128 350 OFFCURVE",
"128 279 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"445 272 OFFCURVE",
"368 206 OFFCURVE",
"307 193 QCURVE",
"270 211 OFFCURVE",
"231 235 OFFCURVE",
"204 269 OFFCURVE",
"204 293 QCURVE SMOOTH",
"204 322 OFFCURVE",
"245 374 OFFCURVE",
"314 412 OFFCURVE",
"355 421 QCURVE",
"399 397 OFFCURVE",
"445 350 OFFCURVE",
"445 316 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
53 74 66 26 4 10 43 50 106 43 10 22 106 10 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP2[ ]\011/* SetRefPoint2 */
SLOOP[ ]\011/* SetLoopVariable */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00586;
},
{
glyphname = degree.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"507 673 OFFCURVE",
"431 733 OFFCURVE",
"364 733 QCURVE SMOOTH",
"307 733 OFFCURVE",
"216 679 OFFCURVE",
"165 591 OFFCURVE",
"165 542 QCURVE SMOOTH",
"165 484 OFFCURVE",
"242 426 OFFCURVE",
"310 426 QCURVE SMOOTH",
"367 426 OFFCURVE",
"457 479 OFFCURVE",
"507 566 OFFCURVE",
"507 615 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"281 479 OFFCURVE",
"231 520 OFFCURVE",
"231 558 QCURVE SMOOTH",
"231 590 OFFCURVE",
"263 646 OFFCURVE",
"320 679 OFFCURVE",
"354 679 QCURVE SMOOTH",
"393 679 OFFCURVE",
"444 638 OFFCURVE",
"444 600 QCURVE SMOOTH",
"444 568 OFFCURVE",
"411 512 OFFCURVE",
"354 479 OFFCURVE",
"319 479 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
3 27 106 3 10 10 20 106 10 16 114 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
CALL[ ]\011/* CallFunction */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[00100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 580;
}
);
note = glyph00587;
},
{
glyphname = bar.salt;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"116 -178 LINE",
"283 770 LINE",
"284 774 OFFCURVE",
"289 801 OFFCURVE",
"289 809 QCURVE SMOOTH",
"289 818 OFFCURVE",
"279 827 OFFCURVE",
"264 827 QCURVE SMOOTH",
"227 827 LINE",
"60 -121 LINE",
"59 -125 OFFCURVE",
"54 -152 OFFCURVE",
"54 -160 QCURVE SMOOTH",
"54 -169 OFFCURVE",
"64 -178 OFFCURVE",
"79 -178 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 11 7 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 290;
}
);
note = glyph00588;
},
{
glyphname = firsttonechinese;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"74 618 LINE",
"353 618 LINE",
"363 676 LINE",
"84 676 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 325;
}
);
note = uni02C9;
unicode = 02C9;
},
{
glyphname = gravecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-100 592 LINE",
"-192 689 LINE SMOOTH",
"-203 701 OFFCURVE",
"-219 706 OFFCURVE",
"-233 706 QCURVE SMOOTH",
"-322 706 LINE",
"-206 610 LINE SMOOTH",
"-194 600 OFFCURVE",
"-173 592 OFFCURVE",
"-161 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
3 128 9 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0300;
unicode = 0300;
},
{
glyphname = acutecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-67 706 LINE",
"-166 706 LINE SMOOTH",
"-180 706 OFFCURVE",
"-197 701 OFFCURVE",
"-212 689 QCURVE SMOOTH",
"-332 592 LINE",
"-268 592 LINE SMOOTH",
"-256 592 OFFCURVE",
"-233 600 OFFCURVE",
"-218 610 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
7 128 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0301;
unicode = 0301;
},
{
glyphname = glyph00592;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-217 526 LINE",
"-213 528 LINE",
"-186 545 OFFCURVE",
"-132 610 OFFCURVE",
"-122 667 QCURVE SMOOTH",
"-111 727 LINE",
"-206 727 LINE",
"-221 645 LINE",
"-177 645 LINE",
"-181 619 OFFCURVE",
"-217 572 OFFCURVE",
"-239 555 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
10 128 4 16 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MIAP[1]\011/* MoveIndirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = glyph00592;
rightKerningGroup = L;
},
{
glyphname = tildecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-77 598 OFFCURVE",
"-34 613 OFFCURVE",
"-15 628 QCURVE SMOOTH",
"-2 638 OFFCURVE",
"9 654 OFFCURVE",
"9 665 QCURVE SMOOTH",
"9 701 LINE",
"-11 682 OFFCURVE",
"-55 656 OFFCURVE",
"-73 656 QCURVE SMOOTH",
"-84 656 OFFCURVE",
"-104 665 OFFCURVE",
"-116 674 QCURVE",
"-136 687 OFFCURVE",
"-168 700 OFFCURVE",
"-191 700 QCURVE SMOOTH",
"-209 700 OFFCURVE",
"-252 685 OFFCURVE",
"-271 670 QCURVE SMOOTH",
"-284 660 OFFCURVE",
"-295 644 OFFCURVE",
"-295 633 QCURVE SMOOTH",
"-295 597 LINE",
"-275 616 OFFCURVE",
"-231 642 OFFCURVE",
"-213 642 QCURVE SMOOTH",
"-202 642 OFFCURVE",
"-182 633 OFFCURVE",
"-170 624 QCURVE",
"-150 611 OFFCURVE",
"-118 598 OFFCURVE",
"-95 598 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 31 21 106 27 15 5 106 31 15 31 15 239 24 1 24 128 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0303;
unicode = 0303;
},
{
glyphname = hookabovecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-137 576 LINE",
"-136 585 LINE SMOOTH",
"-135 595 OFFCURVE",
"-122 613 OFFCURVE",
"-111 622 QCURVE",
"-99 630 OFFCURVE",
"-97 632 QCURVE",
"-73 649 OFFCURVE",
"-47 683 OFFCURVE",
"-47 710 QCURVE SMOOTH",
"-47 737 OFFCURVE",
"-87 763 OFFCURVE",
"-125 763 QCURVE SMOOTH",
"-148 763 OFFCURVE",
"-193 754 OFFCURVE",
"-210 748 QCURVE",
"-208 720 LINE",
"-207 711 OFFCURVE",
"-202 702 OFFCURVE",
"-194 702 QCURVE SMOOTH",
"-190 702 OFFCURVE",
"-177 706 OFFCURVE",
"-174 707 QCURVE",
"-156 715 OFFCURVE",
"-142 715 QCURVE SMOOTH",
"-127 715 OFFCURVE",
"-112 704 OFFCURVE",
"-112 693 QCURVE SMOOTH",
"-112 684 OFFCURVE",
"-128 667 OFFCURVE",
"-145 654 QCURVE",
"-169 634 OFFCURVE",
"-193 606 OFFCURVE",
"-193 588 QCURVE SMOOTH",
"-193 581 OFFCURVE",
"-187 576 OFFCURVE",
"-180 576 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
23 11 106 23 128 35 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0309;
unicode = 0309;
},
{
glyphname = commaturnedabovecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-80 731 LINE",
"-84 731 OFFCURVE",
"-129 695 OFFCURVE",
"-175 629 OFFCURVE",
"-183 583 QCURVE SMOOTH",
"-195 516 LINE",
"-93 516 LINE",
"-77 605 LINE",
"-121 605 LINE",
"-117 631 OFFCURVE",
"-80 681 OFFCURVE",
"-56 700 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
10 128 5 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0312;
unicode = 0312;
},
{
glyphname = dotbelowcomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-357 -154 LINE",
"-260 -154 LINE",
"-244 -65 LINE",
"-341 -65 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
0 3 106 0 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0323;
unicode = 0323;
},
{
glyphname = uniF6C3;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-147 -225 LINE",
"-113 -210 OFFCURVE",
"-65 -149 OFFCURVE",
"-58 -111 QCURVE SMOOTH",
"-48 -50 LINE",
"-145 -50 LINE",
"-160 -139 LINE",
"-115 -139 LINE",
"-119 -157 OFFCURVE",
"-149 -188 OFFCURVE",
"-167 -199 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
4 4 11 9 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uniF6C3;
unicode = F6C3;
},
{
glyphname = gravetonecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-100 592 LINE",
"-192 689 LINE SMOOTH",
"-203 701 OFFCURVE",
"-219 706 OFFCURVE",
"-233 706 QCURVE SMOOTH",
"-322 706 LINE",
"-206 610 LINE SMOOTH",
"-194 600 OFFCURVE",
"-173 592 OFFCURVE",
"-161 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
3 128 9 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0340;
unicode = 0340;
},
{
glyphname = acutetonecomb;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"-67 706 LINE",
"-166 706 LINE SMOOTH",
"-180 706 OFFCURVE",
"-197 701 OFFCURVE",
"-212 689 QCURVE SMOOTH",
"-332 592 LINE",
"-268 592 LINE SMOOTH",
"-256 592 OFFCURVE",
"-233 600 OFFCURVE",
"-218 610 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
7 128 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 0;
}
);
note = uni0341;
unicode = 0341;
},
{
glyphname = acute;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"336 706 LINE",
"237 706 LINE SMOOTH",
"224 706 OFFCURVE",
"206 701 OFFCURVE",
"191 689 QCURVE SMOOTH",
"71 592 LINE",
"135 592 LINE SMOOTH",
"147 592 OFFCURVE",
"170 600 OFFCURVE",
"185 610 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
7 128 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 293;
}
);
note = uni00B4;
unicode = 00B4;
},
{
glyphname = breve;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"344 702 LINE SMOOTH",
"334 702 OFFCURVE",
"321 694 OFFCURVE",
"311 684 QCURVE SMOOTH",
"286 660 OFFCURVE",
"252 644 OFFCURVE",
"235 644 QCURVE SMOOTH",
"216 644 OFFCURVE",
"185 659 OFFCURVE",
"172 684 QCURVE SMOOTH",
"163 702 OFFCURVE",
"143 702 QCURVE SMOOTH",
"90 702 LINE",
"98 648 OFFCURVE",
"163 587 OFFCURVE",
"217 587 QCURVE SMOOTH",
"250 587 OFFCURVE",
"317 617 OFFCURVE",
"374 670 OFFCURVE",
"393 702 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
19 6 128 12 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 349;
}
);
note = uni02D8;
unicode = 02D8;
},
{
glyphname = caron;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"88 702 LINE",
"184 606 LINE",
"195 594 OFFCURVE",
"211 588 OFFCURVE",
"224 588 QCURVE SMOOTH",
"276 588 LINE",
"431 702 LINE",
"366 702 LINE SMOOTH",
"353 702 OFFCURVE",
"330 694 OFFCURVE",
"316 684 QCURVE SMOOTH",
"250 634 LINE",
"200 684 LINE SMOOTH",
"189 695 OFFCURVE",
"170 702 OFFCURVE",
"156 702 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHW[ ]\011/* 2 values pushed */
3 -16 
PUSHB[ ]\011/* 5 values pushed */
3 7 14 128 10 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 387;
}
);
note = uni02C7;
unicode = 02C7;
},
{
glyphname = cedilla;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"142 -2 LINE",
"97 1 LINE",
"69 -94 LINE",
"87 -94 LINE SMOOTH",
"126 -94 OFFCURVE",
"126 -115 QCURVE SMOOTH",
"126 -128 OFFCURVE",
"103 -143 OFFCURVE",
"84 -143 QCURVE SMOOTH",
"75 -143 OFFCURVE",
"61 -138 QCURVE SMOOTH",
"46 -133 OFFCURVE",
"42 -133 QCURVE SMOOTH",
"34 -133 OFFCURVE",
"25 -141 OFFCURVE",
"21 -151 QCURVE",
"10 -175 LINE",
"22 -180 OFFCURVE",
"55 -187 OFFCURVE",
"73 -187 QCURVE SMOOTH",
"97 -187 OFFCURVE",
"149 -168 OFFCURVE",
"184 -130 OFFCURVE",
"184 -104 QCURVE SMOOTH",
"184 -61 OFFCURVE",
"126 -57 QCURVE"
);
}
);
userData = {
assembly = "PUSHW[ ]\011/* 2 values pushed */
25 -16 
NPUSHB[ ]\011/* 16 values pushed */
25 26 63 22 79 22 2 22 22 5 23 26 5 16 106 5 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
RDTG[ ]\011/* RoundDownToGrid */
MDAP[1]\011/* MoveDirectAbsPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 222;
}
);
note = uni00B8;
unicode = 00B8;
},
{
glyphname = circumflex;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"412 592 LINE",
"316 688 LINE",
"305 700 OFFCURVE",
"289 706 OFFCURVE",
"276 706 QCURVE SMOOTH",
"224 706 LINE",
"69 592 LINE",
"134 592 LINE SMOOTH",
"147 592 OFFCURVE",
"170 600 OFFCURVE",
"184 610 QCURVE SMOOTH",
"250 660 LINE",
"300 610 LINE SMOOTH",
"311 599 OFFCURVE",
"330 592 OFFCURVE",
"344 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
3 16 3 9 128 15 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 387;
}
);
note = uni02C6;
unicode = 02C6;
},
{
glyphname = dieresis;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"62 606 LINE",
"159 606 LINE",
"176 699 LINE",
"79 699 LINE"
);
},
{
closed = 1;
nodes = (
"241 606 LINE",
"338 606 LINE",
"355 699 LINE",
"258 699 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
1 7 4 106 2 7 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 302;
}
);
note = uni00A8;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"76 606 LINE",
"184 606 LINE",
"200 699 LINE",
"92 699 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 162;
}
);
note = uni02D9;
unicode = 02D9;
},
{
glyphname = grave;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"316 592 LINE",
"224 689 LINE SMOOTH",
"213 701 OFFCURVE",
"197 706 OFFCURVE",
"183 706 QCURVE SMOOTH",
"94 706 LINE",
"210 610 LINE SMOOTH",
"222 600 OFFCURVE",
"243 592 OFFCURVE",
"255 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
3 128 9 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 293;
}
);
note = uni0060;
unicode = 0060;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"291 707 LINE",
"217 707 LINE SMOOTH",
"204 707 OFFCURVE",
"187 701 OFFCURVE",
"175 689 QCURVE",
"68 592 LINE",
"117 592 LINE SMOOTH",
"129 592 OFFCURVE",
"150 600 OFFCURVE",
"164 610 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"451 707 LINE",
"377 707 LINE SMOOTH",
"363 707 OFFCURVE",
"347 701 OFFCURVE",
"334 689 QCURVE SMOOTH",
"228 592 LINE",
"276 592 LINE SMOOTH",
"289 592 OFFCURVE",
"310 600 OFFCURVE",
"323 610 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
17 7 128 12 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 404;
}
);
note = uni02DD;
unicode = 02DD;
},
{
glyphname = macron;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"74 618 LINE",
"353 618 LINE",
"363 676 LINE",
"84 676 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 106 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 325;
}
);
note = uni00AF;
unicode = 00AF;
},
{
glyphname = ogonek;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"115 1 LINE",
"74 -23 OFFCURVE",
"12 -96 OFFCURVE",
"12 -133 QCURVE SMOOTH",
"12 -164 OFFCURVE",
"57 -187 OFFCURVE",
"86 -187 QCURVE SMOOTH",
"117 -187 OFFCURVE",
"155 -178 QCURVE",
"160 -147 LINE",
"160 -140 OFFCURVE",
"151 -132 OFFCURVE",
"144 -132 QCURVE SMOOTH",
"135 -132 OFFCURVE",
"121 -136 QCURVE",
"118 -136 OFFCURVE",
"112 -138 QCURVE",
"106 -139 OFFCURVE",
"101 -139 QCURVE SMOOTH",
"69 -139 OFFCURVE",
"69 -115 QCURVE SMOOTH",
"69 -96 OFFCURVE",
"104 -51 OFFCURVE",
"154 -11 OFFCURVE",
"175 1 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
24 25 18 6 106 18 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 215;
}
);
note = uni02DB;
unicode = 02DB;
},
{
glyphname = ring;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"241 555 OFFCURVE",
"312 588 OFFCURVE",
"354 650 OFFCURVE",
"354 692 QCURVE SMOOTH",
"354 718 OFFCURVE",
"324 756 OFFCURVE",
"273 776 OFFCURVE",
"242 776 QCURVE SMOOTH",
"198 776 OFFCURVE",
"127 743 OFFCURVE",
"85 681 OFFCURVE",
"85 639 QCURVE SMOOTH",
"85 613 OFFCURVE",
"115 575 OFFCURVE",
"166 555 OFFCURVE",
"197 555 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"257 731 OFFCURVE",
"289 705 OFFCURVE",
"289 680 QCURVE SMOOTH",
"289 656 OFFCURVE",
"266 619 OFFCURVE",
"228 599 OFFCURVE",
"207 599 QCURVE SMOOTH",
"181 599 OFFCURVE",
"149 625 OFFCURVE",
"149 650 QCURVE SMOOTH",
"149 674 OFFCURVE",
"172 711 OFFCURVE",
"210 731 OFFCURVE",
"231 731 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 29 106 7 15 192 15 22 106 15 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SMD[ ]\011/* SetMinimumDistance */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 322;
}
);
note = uni02DA;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"296 598 OFFCURVE",
"339 613 OFFCURVE",
"358 628 QCURVE SMOOTH",
"371 638 OFFCURVE",
"382 654 OFFCURVE",
"382 665 QCURVE SMOOTH",
"382 701 LINE",
"362 682 OFFCURVE",
"318 656 OFFCURVE",
"300 656 QCURVE SMOOTH",
"289 656 OFFCURVE",
"269 665 OFFCURVE",
"257 674 QCURVE",
"237 687 OFFCURVE",
"205 700 OFFCURVE",
"182 700 QCURVE SMOOTH",
"164 700 OFFCURVE",
"121 685 OFFCURVE",
"102 670 QCURVE SMOOTH",
"89 660 OFFCURVE",
"78 644 OFFCURVE",
"78 633 QCURVE SMOOTH",
"78 597 LINE",
"98 616 OFFCURVE",
"142 642 OFFCURVE",
"160 642 QCURVE SMOOTH",
"171 642 OFFCURVE",
"191 633 OFFCURVE",
"203 624 QCURVE",
"223 611 OFFCURVE",
"255 598 OFFCURVE",
"278 598 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 31 21 106 27 15 5 106 31 15 31 15 239 24 1 24 128 8 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
IP[ ]\011/* InterpolatePts */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDAP[1]\011/* MoveDirectAbsPt */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
CALL[ ]\011/* CallFunction */
SHP[0]\011/* ShiftPointByLastPoint */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 345;
}
);
note = uni02DC;
unicode = 02DC;
},
{
glyphname = glyph00613;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"254 550 LINE",
"255 551 OFFCURVE",
"293 576 QCURVE SMOOTH",
"331 600 OFFCURVE",
"345 680 QCURVE SMOOTH",
"356 740 LINE",
"261 740 LINE",
"246 658 LINE",
"292 658 LINE",
"288 635 OFFCURVE",
"255 594 OFFCURVE",
"233 579 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
4 128 10 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 339;
}
);
leftKerningGroup = t;
note = glyph00613;
rightKerningGroup = t;
},
{
glyphname = uniE000;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"640 766 LINE",
"561 766 LINE SMOOTH",
"547 766 OFFCURVE",
"529 761 OFFCURVE",
"515 749 QCURVE SMOOTH",
"413 667 LINE",
"467 667 LINE SMOOTH",
"480 667 OFFCURVE",
"504 675 OFFCURVE",
"518 685 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"450 592 LINE",
"364 688 LINE SMOOTH",
"353 700 OFFCURVE",
"337 706 OFFCURVE",
"324 706 QCURVE SMOOTH",
"272 706 LINE",
"127 592 LINE",
"187 592 LINE SMOOTH",
"200 592 OFFCURVE",
"223 600 OFFCURVE",
"237 610 QCURVE",
"296 656 LINE",
"338 610 LINE",
"348 600 OFFCURVE",
"369 592 OFFCURVE",
"382 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
13 16 13 18 3 3 19 128 18 25 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 533;
}
);
note = uniE000;
unicode = E000;
},
{
glyphname = uniE001;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"351 766 LINE",
"445 685 LINE SMOOTH",
"457 675 OFFCURVE",
"477 667 OFFCURVE",
"490 667 QCURVE SMOOTH",
"544 667 LINE",
"470 749 LINE",
"460 761 OFFCURVE",
"444 766 OFFCURVE",
"430 766 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"450 592 LINE",
"364 688 LINE SMOOTH",
"353 700 OFFCURVE",
"337 706 OFFCURVE",
"324 706 QCURVE SMOOTH",
"272 706 LINE",
"127 592 LINE",
"187 592 LINE SMOOTH",
"200 592 OFFCURVE",
"223 600 OFFCURVE",
"237 610 QCURVE",
"296 656 LINE",
"338 610 LINE",
"348 600 OFFCURVE",
"369 592 OFFCURVE",
"382 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
13 16 13 19 25 25 17 9 5 5 19 128 17 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDRP[01101]\011/* MoveDirectRelPt */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 533;
}
);
note = uniE001;
unicode = E001;
},
{
glyphname = uniE002;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"460 660 LINE",
"461 669 LINE SMOOTH",
"462 679 OFFCURVE",
"475 697 OFFCURVE",
"487 706 QCURVE SMOOTH",
"498 714 OFFCURVE",
"500 716 QCURVE",
"524 733 OFFCURVE",
"550 767 OFFCURVE",
"550 794 QCURVE SMOOTH",
"550 821 OFFCURVE",
"510 847 OFFCURVE",
"472 847 QCURVE SMOOTH",
"449 847 OFFCURVE",
"404 838 OFFCURVE",
"387 832 QCURVE",
"389 804 LINE",
"390 795 OFFCURVE",
"395 786 OFFCURVE",
"403 786 QCURVE SMOOTH",
"407 786 OFFCURVE",
"420 790 OFFCURVE",
"423 791 QCURVE",
"441 799 OFFCURVE",
"455 799 QCURVE SMOOTH",
"470 799 OFFCURVE",
"485 788 OFFCURVE",
"485 777 QCURVE SMOOTH",
"485 768 OFFCURVE",
"469 751 OFFCURVE",
"452 738 QCURVE",
"428 718 OFFCURVE",
"404 690 OFFCURVE",
"404 672 QCURVE SMOOTH",
"404 665 OFFCURVE",
"410 660 OFFCURVE",
"417 660 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"436 592 LINE",
"350 688 LINE SMOOTH",
"339 700 OFFCURVE",
"323 706 OFFCURVE",
"310 706 QCURVE SMOOTH",
"258 706 LINE",
"113 592 LINE",
"173 592 LINE SMOOTH",
"186 592 OFFCURVE",
"210 600 OFFCURVE",
"223 610 QCURVE SMOOTH",
"282 656 LINE",
"324 610 LINE",
"335 599 OFFCURVE",
"355 592 OFFCURVE",
"368 592 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
40 16 40 46 52 52 44 23 11 106 23 35 35 46 128 44 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 453;
}
);
note = uniE002;
unicode = E002;
},
{
glyphname = uniE003;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"373 714 OFFCURVE",
"416 729 OFFCURVE",
"435 744 QCURVE SMOOTH",
"448 754 OFFCURVE",
"459 770 OFFCURVE",
"459 781 QCURVE SMOOTH",
"459 817 LINE",
"439 798 OFFCURVE",
"395 772 OFFCURVE",
"377 772 QCURVE SMOOTH",
"366 772 OFFCURVE",
"346 781 OFFCURVE",
"334 790 QCURVE",
"314 803 OFFCURVE",
"282 816 OFFCURVE",
"259 816 QCURVE SMOOTH",
"241 816 OFFCURVE",
"198 801 OFFCURVE",
"179 786 QCURVE SMOOTH",
"166 776 OFFCURVE",
"155 760 OFFCURVE",
"155 749 QCURVE SMOOTH",
"155 713 LINE",
"175 732 OFFCURVE",
"219 758 OFFCURVE",
"237 758 QCURVE SMOOTH",
"248 758 OFFCURVE",
"268 749 OFFCURVE",
"280 740 QCURVE",
"300 727 OFFCURVE",
"332 714 OFFCURVE",
"355 714 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"444 570 LINE",
"348 666 LINE",
"337 678 OFFCURVE",
"321 684 OFFCURVE",
"308 684 QCURVE SMOOTH",
"256 684 LINE",
"101 570 LINE",
"166 570 LINE SMOOTH",
"179 570 OFFCURVE",
"202 578 OFFCURVE",
"216 588 QCURVE SMOOTH",
"282 638 LINE",
"332 588 LINE SMOOTH",
"343 577 OFFCURVE",
"362 570 OFFCURVE",
"376 570 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
35 16 35 46 46 40 8 41 5 5 24 223 15 239 15 255 15 3 15 21 31 41 128 40 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
MDRP[10110]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 393;
}
);
note = uniE003;
unicode = E003;
},
{
glyphname = uniE004;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"463 810 LINE",
"376 810 LINE SMOOTH",
"362 810 OFFCURVE",
"344 805 OFFCURVE",
"330 793 QCURVE SMOOTH",
"214 696 LINE",
"272 696 LINE SMOOTH",
"285 696 OFFCURVE",
"308 704 OFFCURVE",
"322 714 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"371 679 LINE SMOOTH",
"361 679 OFFCURVE",
"346 671 OFFCURVE",
"336 661 QCURVE SMOOTH",
"312 637 OFFCURVE",
"275 621 OFFCURVE",
"256 621 QCURVE SMOOTH",
"237 621 OFFCURVE",
"206 637 OFFCURVE",
"191 661 QCURVE",
"184 671 OFFCURVE",
"172 679 OFFCURVE",
"162 679 QCURVE SMOOTH",
"113 679 LINE",
"121 626 OFFCURVE",
"188 564 OFFCURVE",
"242 564 QCURVE SMOOTH",
"275 564 OFFCURVE",
"342 594 OFFCURVE",
"399 647 OFFCURVE",
"416 679 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 63 3 1 3 29 16 128 23 13 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[10110]\011/* MoveDirectRelPt */
DELTAP2[ ]\011/* DeltaExceptionP2 */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 377;
}
);
note = uniE004;
unicode = E004;
},
{
glyphname = uniE005;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"322 697 LINE",
"241 794 LINE SMOOTH",
"231 806 OFFCURVE",
"215 811 OFFCURVE",
"200 811 QCURVE SMOOTH",
"115 811 LINE",
"221 715 LINE SMOOTH",
"232 705 OFFCURVE",
"252 697 OFFCURVE",
"265 697 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"360 679 LINE SMOOTH",
"350 679 OFFCURVE",
"335 671 OFFCURVE",
"325 661 QCURVE SMOOTH",
"301 637 OFFCURVE",
"264 621 OFFCURVE",
"245 621 QCURVE SMOOTH",
"226 621 OFFCURVE",
"195 637 OFFCURVE",
"180 661 QCURVE",
"173 671 OFFCURVE",
"161 679 OFFCURVE",
"151 679 QCURVE SMOOTH",
"102 679 LINE",
"110 626 OFFCURVE",
"177 564 OFFCURVE",
"231 564 QCURVE SMOOTH",
"264 564 OFFCURVE",
"331 594 OFFCURVE",
"388 647 OFFCURVE",
"405 679 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
3 9 30 16 128 23 13 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[10110]\011/* MoveDirectRelPt */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 363;
}
);
note = uniE005;
unicode = E005;
},
{
glyphname = uniE006;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"324 714 OFFCURVE",
"367 729 OFFCURVE",
"386 744 QCURVE SMOOTH",
"399 754 OFFCURVE",
"410 770 OFFCURVE",
"410 781 QCURVE SMOOTH",
"410 817 LINE",
"390 798 OFFCURVE",
"346 772 OFFCURVE",
"328 772 QCURVE SMOOTH",
"317 772 OFFCURVE",
"297 781 OFFCURVE",
"285 790 QCURVE",
"265 803 OFFCURVE",
"233 816 OFFCURVE",
"210 816 QCURVE SMOOTH",
"192 816 OFFCURVE",
"149 801 OFFCURVE",
"130 786 QCURVE SMOOTH",
"117 776 OFFCURVE",
"106 760 OFFCURVE",
"106 749 QCURVE SMOOTH",
"106 713 LINE",
"126 732 OFFCURVE",
"170 758 OFFCURVE",
"188 758 QCURVE SMOOTH",
"199 758 OFFCURVE",
"219 749 OFFCURVE",
"231 740 QCURVE",
"251 727 OFFCURVE",
"283 714 OFFCURVE",
"306 714 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"357 680 LINE SMOOTH",
"347 680 OFFCURVE",
"334 672 OFFCURVE",
"324 662 QCURVE SMOOTH",
"299 638 OFFCURVE",
"265 622 OFFCURVE",
"248 622 QCURVE SMOOTH",
"229 622 OFFCURVE",
"198 637 OFFCURVE",
"185 662 QCURVE SMOOTH",
"176 680 OFFCURVE",
"156 680 QCURVE SMOOTH",
"103 680 LINE",
"111 626 OFFCURVE",
"176 565 OFFCURVE",
"230 565 QCURVE SMOOTH",
"263 565 OFFCURVE",
"330 595 OFFCURVE",
"387 648 OFFCURVE",
"406 680 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
8 5 38 5 24 15 21 31 51 38 128 44 35 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[10110]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 354;
}
);
note = uniE006;
unicode = E006;
},
{
glyphname = uniE007;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"280 676 LINE",
"281 685 LINE SMOOTH",
"282 695 OFFCURVE",
"295 713 OFFCURVE",
"307 722 QCURVE SMOOTH",
"318 730 OFFCURVE",
"320 732 QCURVE",
"344 749 OFFCURVE",
"370 783 OFFCURVE",
"370 810 QCURVE SMOOTH",
"370 837 OFFCURVE",
"330 863 OFFCURVE",
"292 863 QCURVE SMOOTH",
"269 863 OFFCURVE",
"224 854 OFFCURVE",
"207 848 QCURVE",
"209 820 LINE",
"210 811 OFFCURVE",
"215 802 OFFCURVE",
"223 802 QCURVE SMOOTH",
"227 802 OFFCURVE",
"240 806 OFFCURVE",
"243 807 QCURVE",
"261 815 OFFCURVE",
"275 815 QCURVE SMOOTH",
"290 815 OFFCURVE",
"305 804 OFFCURVE",
"305 793 QCURVE SMOOTH",
"305 784 OFFCURVE",
"289 767 OFFCURVE",
"272 754 QCURVE",
"248 734 OFFCURVE",
"224 706 OFFCURVE",
"224 688 QCURVE SMOOTH",
"224 681 OFFCURVE",
"230 676 OFFCURVE",
"237 676 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"359 679 LINE SMOOTH",
"349 679 OFFCURVE",
"334 671 OFFCURVE",
"324 661 QCURVE SMOOTH",
"300 637 OFFCURVE",
"263 621 OFFCURVE",
"244 621 QCURVE SMOOTH",
"225 621 OFFCURVE",
"193 637 OFFCURVE",
"179 661 QCURVE",
"172 671 OFFCURVE",
"160 679 OFFCURVE",
"150 679 QCURVE SMOOTH",
"101 679 LINE",
"108 626 OFFCURVE",
"175 564 OFFCURVE",
"229 564 QCURVE SMOOTH",
"262 564 OFFCURVE",
"329 594 OFFCURVE",
"386 647 OFFCURVE",
"404 679 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
23 11 106 23 35 35 57 43 128 50 40 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
MDAP[1]\011/* MoveDirectAbsPt */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 353;
}
);
note = uniE007;
unicode = E007;
},
{
glyphname = uniE020;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"610 962 LINE",
"531 962 LINE SMOOTH",
"517 962 OFFCURVE",
"499 957 OFFCURVE",
"485 945 QCURVE",
"382 863 LINE",
"436 863 LINE SMOOTH",
"449 863 OFFCURVE",
"473 871 OFFCURVE",
"487 881 QCURVE"
);
},
{
closed = 1;
nodes = (
"419 788 LINE",
"333 884 LINE SMOOTH",
"322 896 OFFCURVE",
"306 902 OFFCURVE",
"293 902 QCURVE SMOOTH",
"241 902 LINE",
"96 788 LINE",
"156 788 LINE SMOOTH",
"169 788 OFFCURVE",
"193 796 OFFCURVE",
"206 806 QCURVE SMOOTH",
"265 852 LINE",
"307 806 LINE SMOOTH",
"317 795 OFFCURVE",
"337 788 OFFCURVE",
"351 788 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
13 16 13 19 25 25 17 7 3 3 19 128 17 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDRP[01101]\011/* MoveDirectRelPt */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 533;
}
);
note = uniE020;
unicode = E020;
},
{
glyphname = uniE021;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"362 962 LINE",
"455 881 LINE SMOOTH",
"467 871 OFFCURVE",
"487 863 OFFCURVE",
"500 863 QCURVE SMOOTH",
"554 863 LINE",
"481 945 LINE SMOOTH",
"471 957 OFFCURVE",
"455 962 OFFCURVE",
"441 962 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"460 788 LINE",
"374 884 LINE SMOOTH",
"363 896 OFFCURVE",
"347 902 OFFCURVE",
"334 902 QCURVE SMOOTH",
"282 902 LINE",
"137 788 LINE",
"197 788 LINE SMOOTH",
"210 788 OFFCURVE",
"234 796 OFFCURVE",
"247 806 QCURVE SMOOTH",
"306 852 LINE",
"348 806 LINE",
"359 795 OFFCURVE",
"379 788 OFFCURVE",
"392 788 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
13 16 13 19 25 25 17 9 5 5 19 128 17 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDRP[01101]\011/* MoveDirectRelPt */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 454;
}
);
note = uniE021;
unicode = E021;
},
{
glyphname = uniE022;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"484 812 LINE",
"485 821 LINE SMOOTH",
"486 831 OFFCURVE",
"499 849 OFFCURVE",
"511 858 QCURVE SMOOTH",
"522 866 OFFCURVE",
"524 868 QCURVE",
"548 885 OFFCURVE",
"574 919 OFFCURVE",
"574 946 QCURVE SMOOTH",
"574 973 OFFCURVE",
"534 999 OFFCURVE",
"496 999 QCURVE SMOOTH",
"473 999 OFFCURVE",
"428 990 OFFCURVE",
"411 984 QCURVE",
"413 956 LINE",
"414 947 OFFCURVE",
"419 938 OFFCURVE",
"427 938 QCURVE SMOOTH",
"431 938 OFFCURVE",
"444 942 OFFCURVE",
"447 943 QCURVE",
"465 951 OFFCURVE",
"479 951 QCURVE SMOOTH",
"494 951 OFFCURVE",
"509 940 OFFCURVE",
"509 929 QCURVE SMOOTH",
"509 920 OFFCURVE",
"493 903 OFFCURVE",
"476 890 QCURVE",
"452 870 OFFCURVE",
"428 842 OFFCURVE",
"428 824 QCURVE SMOOTH",
"428 817 OFFCURVE",
"434 812 OFFCURVE",
"441 812 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"441 765 LINE",
"355 861 LINE SMOOTH",
"344 873 OFFCURVE",
"328 879 OFFCURVE",
"315 879 QCURVE SMOOTH",
"263 879 LINE",
"118 765 LINE",
"178 765 LINE SMOOTH",
"191 765 OFFCURVE",
"215 773 OFFCURVE",
"229 783 QCURVE",
"288 829 LINE",
"330 783 LINE SMOOTH",
"340 772 OFFCURVE",
"360 765 OFFCURVE",
"373 765 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
40 16 40 46 52 52 44 23 11 106 23 35 35 46 128 44 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 457;
}
);
note = uniE022;
unicode = E022;
},
{
glyphname = uniE023;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"371 895 OFFCURVE",
"414 910 OFFCURVE",
"433 925 QCURVE SMOOTH",
"446 935 OFFCURVE",
"457 951 OFFCURVE",
"457 962 QCURVE SMOOTH",
"457 998 LINE",
"437 979 OFFCURVE",
"393 953 OFFCURVE",
"375 953 QCURVE SMOOTH",
"364 953 OFFCURVE",
"344 962 OFFCURVE",
"332 971 QCURVE",
"312 984 OFFCURVE",
"280 997 OFFCURVE",
"257 997 QCURVE SMOOTH",
"239 997 OFFCURVE",
"196 982 OFFCURVE",
"177 967 QCURVE SMOOTH",
"164 957 OFFCURVE",
"153 941 OFFCURVE",
"153 930 QCURVE SMOOTH",
"153 894 LINE",
"173 913 OFFCURVE",
"217 939 OFFCURVE",
"235 939 QCURVE SMOOTH",
"246 939 OFFCURVE",
"266 930 OFFCURVE",
"278 921 QCURVE",
"298 908 OFFCURVE",
"330 895 OFFCURVE",
"353 895 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"434 765 LINE",
"348 861 LINE SMOOTH",
"337 873 OFFCURVE",
"322 879 OFFCURVE",
"309 879 QCURVE SMOOTH",
"257 879 LINE",
"111 765 LINE",
"171 765 LINE SMOOTH",
"184 765 OFFCURVE",
"208 773 OFFCURVE",
"222 783 QCURVE",
"281 829 LINE",
"323 783 LINE SMOOTH",
"333 772 OFFCURVE",
"353 765 OFFCURVE",
"366 765 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
35 16 35 46 46 40 8 41 5 5 24 223 15 239 15 255 15 3 15 21 31 41 128 40 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
MDRP[10110]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
SRP1[ ]\011/* SetRefPoint1 */
SHP[1]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
IP[ ]\011/* InterpolatePts */
SHPIX[ ]\011/* ShiftZoneByPixel */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 393;
}
);
note = uniE023;
unicode = E023;
},
{
glyphname = uniE024;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"460 973 LINE",
"381 973 LINE SMOOTH",
"367 973 OFFCURVE",
"349 968 OFFCURVE",
"335 956 QCURVE SMOOTH",
"233 874 LINE",
"287 874 LINE SMOOTH",
"300 874 OFFCURVE",
"323 882 OFFCURVE",
"338 892 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"377 862 LINE SMOOTH",
"367 862 OFFCURVE",
"352 854 OFFCURVE",
"341 844 QCURVE SMOOTH",
"327 831 OFFCURVE",
"295 817 OFFCURVE",
"272 817 QCURVE SMOOTH",
"248 817 OFFCURVE",
"219 830 OFFCURVE",
"209 844 QCURVE",
"203 854 OFFCURVE",
"193 862 OFFCURVE",
"183 862 QCURVE SMOOTH",
"129 862 LINE",
"140 809 OFFCURVE",
"205 766 OFFCURVE",
"259 766 QCURVE SMOOTH",
"310 766 OFFCURVE",
"399 816 OFFCURVE",
"427 862 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
7 3 29 15 128 22 12 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[10110]\011/* MoveDirectRelPt */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 377;
}
);
note = uniE024;
unicode = E024;
},
{
glyphname = uniE025;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"128 973 LINE",
"222 892 LINE SMOOTH",
"233 882 OFFCURVE",
"254 874 OFFCURVE",
"267 874 QCURVE SMOOTH",
"321 874 LINE",
"247 956 LINE",
"237 968 OFFCURVE",
"221 973 OFFCURVE",
"207 973 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"364 862 LINE SMOOTH",
"354 862 OFFCURVE",
"339 854 OFFCURVE",
"328 844 QCURVE SMOOTH",
"314 831 OFFCURVE",
"282 817 OFFCURVE",
"259 817 QCURVE SMOOTH",
"235 817 OFFCURVE",
"206 830 OFFCURVE",
"196 844 QCURVE",
"190 854 OFFCURVE",
"180 862 OFFCURVE",
"170 862 QCURVE SMOOTH",
"116 862 LINE",
"127 809 OFFCURVE",
"192 766 OFFCURVE",
"246 766 QCURVE SMOOTH",
"297 766 OFFCURVE",
"386 816 OFFCURVE",
"414 862 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
9 4 29 15 128 22 12 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[10110]\011/* MoveDirectRelPt */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 373;
}
);
note = uniE025;
unicode = E025;
},
{
glyphname = uniE026;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"351 895 OFFCURVE",
"394 910 OFFCURVE",
"413 925 QCURVE SMOOTH",
"426 935 OFFCURVE",
"437 951 OFFCURVE",
"437 962 QCURVE SMOOTH",
"437 998 LINE",
"417 979 OFFCURVE",
"373 953 OFFCURVE",
"355 953 QCURVE SMOOTH",
"344 953 OFFCURVE",
"324 962 OFFCURVE",
"312 971 QCURVE",
"292 984 OFFCURVE",
"260 997 OFFCURVE",
"237 997 QCURVE SMOOTH",
"219 997 OFFCURVE",
"176 982 OFFCURVE",
"157 967 QCURVE SMOOTH",
"144 957 OFFCURVE",
"133 941 OFFCURVE",
"133 930 QCURVE SMOOTH",
"133 894 LINE",
"153 913 OFFCURVE",
"197 939 OFFCURVE",
"215 939 QCURVE SMOOTH",
"226 939 OFFCURVE",
"246 930 OFFCURVE",
"258 921 QCURVE",
"278 908 OFFCURVE",
"310 895 OFFCURVE",
"333 895 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"367 862 LINE SMOOTH",
"357 862 OFFCURVE",
"342 854 OFFCURVE",
"331 844 QCURVE SMOOTH",
"317 831 OFFCURVE",
"285 817 OFFCURVE",
"262 817 QCURVE SMOOTH",
"238 817 OFFCURVE",
"209 830 OFFCURVE",
"199 844 QCURVE",
"193 854 OFFCURVE",
"183 862 OFFCURVE",
"173 862 QCURVE SMOOTH",
"119 862 LINE",
"130 809 OFFCURVE",
"195 766 OFFCURVE",
"249 766 QCURVE SMOOTH",
"300 766 OFFCURVE",
"388 815 OFFCURVE",
"417 862 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
8 5 38 5 24 15 21 31 51 38 128 44 35 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
SMD[ ]\011/* SetMinimumDistance */
MDRP[11101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[10110]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
MDRP[01101]\011/* MoveDirectRelPt */
SHP[0]\011/* ShiftPointByLastPoint */
SHP[0]\011/* ShiftPointByLastPoint */
SRP1[ ]\011/* SetRefPoint1 */
SRP2[ ]\011/* SetRefPoint2 */
IP[ ]\011/* InterpolatePts */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 354;
}
);
note = uniE026;
unicode = E026;
},
{
glyphname = uniE027;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"283 849 LINE",
"284 858 LINE SMOOTH",
"285 868 OFFCURVE",
"298 886 OFFCURVE",
"310 895 QCURVE SMOOTH",
"321 903 OFFCURVE",
"323 905 QCURVE",
"347 922 OFFCURVE",
"373 956 OFFCURVE",
"373 983 QCURVE SMOOTH",
"373 1010 OFFCURVE",
"333 1036 OFFCURVE",
"295 1036 QCURVE SMOOTH",
"272 1036 OFFCURVE",
"227 1027 OFFCURVE",
"210 1021 QCURVE",
"212 993 LINE",
"213 984 OFFCURVE",
"218 975 OFFCURVE",
"226 975 QCURVE SMOOTH",
"230 975 OFFCURVE",
"243 979 OFFCURVE",
"246 980 QCURVE",
"264 988 OFFCURVE",
"278 988 QCURVE SMOOTH",
"293 988 OFFCURVE",
"308 977 OFFCURVE",
"308 966 QCURVE SMOOTH",
"308 957 OFFCURVE",
"292 940 OFFCURVE",
"275 927 QCURVE",
"251 907 OFFCURVE",
"227 879 OFFCURVE",
"227 861 QCURVE SMOOTH",
"227 854 OFFCURVE",
"233 849 OFFCURVE",
"240 849 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"355 858 LINE SMOOTH",
"346 858 OFFCURVE",
"332 850 OFFCURVE",
"320 840 QCURVE SMOOTH",
"305 827 OFFCURVE",
"273 813 OFFCURVE",
"250 813 QCURVE SMOOTH",
"226 813 OFFCURVE",
"198 826 OFFCURVE",
"188 840 QCURVE SMOOTH",
"181 850 OFFCURVE",
"171 858 OFFCURVE",
"161 858 QCURVE SMOOTH",
"107 858 LINE",
"119 805 OFFCURVE",
"183 762 OFFCURVE",
"237 762 QCURVE SMOOTH",
"288 762 OFFCURVE",
"377 812 OFFCURVE",
"405 858 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
35 35 56 15 42 1 255 42 1 42 39 23 11 106 23 128 215 49 231 49 2 49 39 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SHP[1]\011/* ShiftPointByLastPoint */
DELTAP1[ ]\011/* DeltaExceptionP1 */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01100]\011/* MoveDirectRelPt */
CALL[ ]\011/* CallFunction */
SRP0[ ]\011/* SetRefPoint0 */
MDRP[01101]\011/* MoveDirectRelPt */
DELTAP1[ ]\011/* DeltaExceptionP1 */
DELTAP2[ ]\011/* DeltaExceptionP2 */
SHP[0]\011/* ShiftPointByLastPoint */
IP[ ]\011/* InterpolatePts */
MDAP[1]\011/* MoveDirectAbsPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 348;
}
);
note = uniE027;
unicode = E027;
},
{
glyphname = Cacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = glyph00641;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 600;
}
);
leftKerningGroup = C;
note = glyph00630;
rightKerningGroup = C;
changeCount = 2;
},
{
glyphname = cacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = glyph00640;
transform = "{1, 0, 0, 1, 35, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 449;
}
);
leftKerningGroup = c;
note = glyph00631;
rightKerningGroup = c;
changeCount = 2;
},
{
glyphname = Nacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = glyph00641;
transform = "{1, 0, 0, 1, 17, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 751;
}
);
note = glyph00632;
changeCount = 2;
},
{
glyphname = nacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = glyph00640;
transform = "{1, 0, 0, 1, 50, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 551;
}
);
leftKerningGroup = n;
note = glyph00633;
rightKerningGroup = n;
changeCount = 2;
},
{
glyphname = Oacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = glyph00641;
transform = "{1, 0, 0, 1, -20, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 715;
}
);
leftKerningGroup = O;
note = glyph00634;
rightKerningGroup = O;
changeCount = 2;
},
{
glyphname = oacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = glyph00640;
transform = "{1, 0, 0, 1, 50, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 566;
}
);
leftKerningGroup = o;
note = glyph00635;
rightKerningGroup = o;
changeCount = 2;
},
{
glyphname = Sacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = glyph00641;
transform = "{1, 0, 0, 1, -89, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 568;
}
);
leftKerningGroup = S;
note = glyph00636;
rightKerningGroup = S;
changeCount = 2;
},
{
glyphname = sacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = glyph00640;
transform = "{1, 0, 0, 1, -19, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 425;
}
);
leftKerningGroup = s;
note = glyph00637;
rightKerningGroup = s;
changeCount = 2;
},
{
glyphname = Zacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = glyph00641;
transform = "{1, 0, 0, 1, -86, 0}";
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 544;
}
);
leftKerningGroup = Z;
note = glyph00638;
rightKerningGroup = Z;
changeCount = 2;
},
{
glyphname = zacute.locl;
lastChange = "2019-06-03 11:07:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = glyph00640;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 434;
}
);
note = glyph00639;
rightKerningGroup = z;
changeCount = 2;
},
{
glyphname = glyph00640;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"454 746 LINE",
"407 746 LINE SMOOTH",
"382 746 OFFCURVE",
"358 735 OFFCURVE",
"347 718 QCURVE SMOOTH",
"267 592 LINE",
"303 592 LINE SMOOTH",
"316 592 OFFCURVE",
"330 594 OFFCURVE",
"343 604 OFFCURVE",
"352 615 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
8 128 3 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 434;
}
);
note = glyph00640;
rightKerningGroup = z;
},
{
glyphname = glyph00641;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"667 918 LINE",
"568 918 LINE SMOOTH",
"555 918 OFFCURVE",
"537 913 OFFCURVE",
"522 901 QCURVE SMOOTH",
"402 804 LINE",
"466 804 LINE SMOOTH",
"478 804 OFFCURVE",
"501 812 OFFCURVE",
"516 822 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 3 values pushed */
7 128 2 
SVTCA[0]\011/* SetFreedomAndProjectionVectorToAxis */
MDAP[1]\011/* MoveDirectAbsPt */
SMD[ ]\011/* SetMinimumDistance */
MDRP[01101]\011/* MoveDirectRelPt */
IUP[0]\011/* InterpolateUntPts */
IUP[1]\011/* InterpolateUntPts */";
};
width = 603;
}
);
leftKerningGroup = C;
note = glyph00641;
rightKerningGroup = C;
},
{
glyphname = nonbreakinghyphen;
layers = (
{
components = (
{
name = hyphen;
}
);
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
width = 380;
}
);
note = uni2011;
unicode = 2011;
},
{
glyphname = zeroWidthNoBreakSpace;
layers = (
{
layerId = "DEC32D14-9EEB-4E31-A016-AD32FECB2E7D";
paths = (
{
closed = 1;
nodes = (
"0 0 LINE"
);
}
);
width = 0;
}
);
note = uniFEFF;
unicode = FEFF;
}
);
instances = (
{
customParameters = (
{
name = postscriptFullName;
value = "Carlsberg Sans W05 Light Italic";
},
{
name = postscriptFontName;
value = "CarlsbergSansW05-LightIt";
}
);
instanceInterpolations = {
"DEC32D14-9EEB-4E31-A016-AD32FECB2E7D" = 1;
};
name = Regular;
weightClass = Light;
}
);
kerning = {
"DEC32D14-9EEB-4E31-A016-AD32FECB2E7D" = {
"@MMK_L_A" = {
"@MMK_R_A" = 40;
"@MMK_R_C" = -20;
"@MMK_R_G" = -20;
"@MMK_R_O" = -15;
"@MMK_R_Q" = -15;
"@MMK_R_T" = -60;
"@MMK_R_U" = -30;
"@MMK_R_V" = -65;
"@MMK_R_W" = -60;
"@MMK_R_X" = 20;
"@MMK_R_Y" = -60;
"@MMK_R_Z" = 15;
"@MMK_R_a" = -10;
"@MMK_R_asterisk" = -80;
"@MMK_R_c" = -10;
"@MMK_R_d" = -10;
"@MMK_R_e" = -10;
"@MMK_R_o" = -10;
"@MMK_R_q" = -10;
"@MMK_R_quotedblleft" = -60;
"@MMK_R_quotedblright" = -60;
"@MMK_R_slash" = 30;
"@MMK_R_t" = -10;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_y" = -10;
};
"@MMK_L_A-cy" = {
"@MMK_R_Che-cy" = -75;
"@MMK_R_O-cy" = -15;
"@MMK_R_Te-cy" = -60;
"@MMK_R_colon" = 16;
"@MMK_R_quotedblleft" = -60;
"@MMK_R_quotedblright" = -60;
};
"@MMK_L_AE" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_d" = -20;
"@MMK_R_e" = -20;
"@MMK_R_g" = -20;
"@MMK_R_o" = -20;
"@MMK_R_q" = -20;
"@MMK_R_t" = -10;
"@MMK_R_u" = -10;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_y" = -10;
};
"@MMK_L_B" = {
"@MMK_R_A" = 10;
"@MMK_R_T" = -10;
"@MMK_R_Y" = -10;
"@MMK_R_a" = -10;
"@MMK_R_c" = -10;
"@MMK_R_d" = -10;
"@MMK_R_e" = -10;
"@MMK_R_g" = -10;
"@MMK_R_o" = -10;
"@MMK_R_t" = -10;
"@MMK_R_u" = -10;
};
"@MMK_L_Be-cy" = {
"@MMK_R_Che-cy" = -50;
};
"@MMK_L_C" = {
"@MMK_R_C" = -20;
"@MMK_R_G" = -20;
"@MMK_R_J" = -20;
"@MMK_R_O" = -20;
"@MMK_R_Q" = -20;
"@MMK_R_S" = -10;
"@MMK_R_T" = 10;
"@MMK_R_W" = -10;
"@MMK_R_a" = -30;
"@MMK_R_c" = -30;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_g" = -30;
"@MMK_R_o" = -30;
"@MMK_R_q" = -30;
"@MMK_R_t" = -20;
"@MMK_R_u" = -30;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_y" = -30;
};
"@MMK_L_D" = {
"@MMK_R_A" = -10;
"@MMK_R_J" = -30;
"@MMK_R_M" = -10;
"@MMK_R_T" = -35;
"@MMK_R_V" = -30;
"@MMK_R_W" = -25;
"@MMK_R_X" = -25;
"@MMK_R_Y" = -25;
"@MMK_R_Z" = -10;
};
"@MMK_L_De-cy" = {
"@MMK_R_A-cy" = 30;
"@MMK_R_Je-cy" = 20;
"@MMK_R_Te-cy" = -10;
"@MMK_R_Zhe-cy" = 35;
"@MMK_R_je-cy" = 20;
};
"@MMK_L_Dze-cy" = {
"@MMK_R_Che-cy" = -37;
"@MMK_R_ii-cy" = -10;
};
"@MMK_L_E-cy" = {
"@MMK_R_guillemetleft" = -40;
};
"@MMK_L_Ef-cy" = {
"@MMK_R_El-cy" = -30;
"@MMK_R_Te-cy" = -40;
"@MMK_R_Zhe-cy" = -10;
"@MMK_R_a-cy" = -30;
"@MMK_R_comma" = -50;
"@MMK_R_el-cy" = -75;
"@MMK_R_period" = -50;
};
"@MMK_L_Er-cy" = {
"@MMK_R_El-cy" = -65;
"@MMK_R_Zhe-cy" = -25;
"@MMK_R_a-cy" = -30;
"@MMK_R_comma" = -140;
"@MMK_R_el-cy" = -40;
"@MMK_R_period" = -140;
"@MMK_R_quotedblleft" = 20;
"@MMK_R_quotedblright" = 35;
};
"@MMK_L_Ereversed-cy" = {
"@MMK_R_El-cy" = -25;
"@MMK_R_Te-cy" = -20;
"@MMK_R_comma" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_Es-cy" = {
"@MMK_R_O-cy" = -30;
"@MMK_R_guillemetleft" = -60;
"@MMK_R_ii-cy" = -40;
};
"@MMK_L_F" = {
"@MMK_R_A" = -30;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_S" = 10;
"@MMK_R_T" = 10;
"@MMK_R_a" = -30;
"@MMK_R_abreveacute" = -30;
"@MMK_R_c" = -30;
"@MMK_R_comma" = -90;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_ecircumflexacute" = -30;
"@MMK_R_g" = -30;
"@MMK_R_icircumflex" = 30;
"@MMK_R_o" = -30;
"@MMK_R_ocircumflexacute" = -30;
"@MMK_R_period" = -90;
"@MMK_R_y" = -50;
};
"@MMK_L_G" = {
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_Q" = -10;
"@MMK_R_T" = -20;
"@MMK_R_V" = -20;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -15;
};
"@MMK_L_Ge-cy" = {
"@MMK_R_A-cy" = -110;
"@MMK_R_De-cy" = -140;
"@MMK_R_Ef-cy" = -50;
"@MMK_R_El-cy" = -90;
"@MMK_R_Ia-cy" = -20;
"@MMK_R_Je-cy" = -180;
"@MMK_R_O-cy" = -20;
"@MMK_R_Te-cy" = 20;
"@MMK_R_a-cy" = -180;
"@MMK_R_comma" = -140;
"@MMK_R_de-cy" = -100;
"@MMK_R_dze-cy" = -160;
"@MMK_R_el-cy" = -199;
"@MMK_R_em-cy" = -190;
"@MMK_R_ereversed-cy" = -170;
"@MMK_R_ge-cy" = -160;
"@MMK_R_gje-cy" = -90;
"@MMK_R_guillemetleft" = -140;
"@MMK_R_guillemetright" = -130;
"@MMK_R_ha-cy" = -160;
"@MMK_R_hardsign-cy" = -160;
"@MMK_R_ia-cy" = -190;
"@MMK_R_ii-cy" = -160;
"@MMK_R_period" = -140;
"@MMK_R_te-cy" = -160;
"@MMK_R_ve-cy" = -180;
"@MMK_R_zhe-cy" = -160;
};
"@MMK_L_Ie-cy" = {
"@MMK_R_Zhe-cy" = -10;
};
"@MMK_L_Iu-cy" = {
"@MMK_R_El-cy" = -20;
"@MMK_R_Te-cy" = -40;
"@MMK_R_comma" = -50;
"@MMK_R_period" = -50;
};
"@MMK_L_J" = {
"@MMK_R_S" = -10;
"@MMK_R_a" = -10;
"@MMK_R_c" = -10;
"@MMK_R_comma" = -30;
"@MMK_R_d" = -10;
"@MMK_R_e" = -10;
"@MMK_R_g" = -10;
"@MMK_R_o" = -10;
"@MMK_R_period" = -10;
"@MMK_R_z" = -20;
};
"@MMK_L_K" = {
"@MMK_R_A" = 40;
"@MMK_R_C" = -35;
"@MMK_R_G" = -35;
"@MMK_R_J" = 20;
"@MMK_R_O" = -35;
"@MMK_R_Q" = -35;
"@MMK_R_U" = -20;
"@MMK_R_X" = 20;
"@MMK_R_Z" = 20;
"@MMK_R_a" = -20;
"@MMK_R_abreveacute" = -20;
"@MMK_R_c" = -20;
"@MMK_R_comma" = 10;
"@MMK_R_d" = -20;
"@MMK_R_e" = -20;
"@MMK_R_ecircumflexacute" = -20;
"@MMK_R_g" = -20;
"@MMK_R_hyphen" = -40;
"@MMK_R_o" = -20;
"@MMK_R_ocircumflexacute" = -20;
"@MMK_R_period" = 10;
"@MMK_R_q" = -20;
"@MMK_R_t" = -20;
"@MMK_R_u" = -20;
"@MMK_R_v" = -40;
"@MMK_R_w" = -40;
"@MMK_R_y" = -20;
};
"@MMK_L_L" = {
"@MMK_R_A" = 20;
"@MMK_R_C" = -30;
"@MMK_R_G" = -30;
"@MMK_R_O" = -30;
"@MMK_R_T" = -90;
"@MMK_R_V" = -90;
"@MMK_R_W" = -80;
"@MMK_R_Y" = -90;
"@MMK_R_Z" = 20;
"@MMK_R_a" = -30;
"@MMK_R_asterisk" = -100;
"@MMK_R_c" = -30;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_g" = -30;
"@MMK_R_hyphen" = -40;
"@MMK_R_period" = 20;
"@MMK_R_q" = -30;
"@MMK_R_t" = -10;
"@MMK_R_u" = -20;
"@MMK_R_v" = -40;
"@MMK_R_w" = -40;
"@MMK_R_y" = -20;
};
"@MMK_L_M" = {
"@MMK_R_C" = -20;
"@MMK_R_G" = -20;
"@MMK_R_O" = -20;
"@MMK_R_S" = -10;
"@MMK_R_T" = -50;
"@MMK_R_U" = -20;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -30;
"@MMK_R_c" = -30;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_g" = -30;
"@MMK_R_o" = -30;
"@MMK_R_t" = -14;
"@MMK_R_u" = -20;
"@MMK_R_z" = -20;
};
"@MMK_L_O" = {
"@MMK_R_A" = -10;
"@MMK_R_G" = -10;
"@MMK_R_J" = -30;
"@MMK_R_M" = -20;
"@MMK_R_O" = -10;
"@MMK_R_Q" = -10;
"@MMK_R_T" = -40;
"@MMK_R_V" = -25;
"@MMK_R_W" = -20;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -30;
"@MMK_R_Z" = -15;
"@MMK_R_comma" = -50;
"@MMK_R_period" = -50;
"@MMK_R_t" = -10;
};
"@MMK_L_O-cy" = {
"@MMK_R_De-cy" = -40;
"@MMK_R_El-cy" = -15;
"@MMK_R_Je-cy" = -30;
"@MMK_R_Te-cy" = -40;
"@MMK_R_Zhe-cy" = -30;
"@MMK_R_comma" = -70;
"@MMK_R_period" = -40;
};
"@MMK_L_P" = {
"@MMK_R_A" = -75;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_J" = -100;
"@MMK_R_M" = -40;
"@MMK_R_O" = -10;
"@MMK_R_V" = -20;
"@MMK_R_X" = -20;
"@MMK_R_Z" = -30;
"@MMK_R_a" = -30;
"@MMK_R_c" = -30;
"@MMK_R_comma" = -140;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_g" = -30;
"@MMK_R_o" = -30;
"@MMK_R_period" = -140;
"@MMK_R_q" = -30;
"@MMK_R_s" = 10;
"@MMK_R_slash" = -40;
"@MMK_R_v" = 10;
"@MMK_R_w" = 10;
"@MMK_R_x" = -30;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -10;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_T" = -40;
"@MMK_R_Y" = -20;
"@MMK_R_Z" = -10;
};
"@MMK_L_R" = {
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_Q" = -10;
"@MMK_R_S" = -10;
"@MMK_R_T" = -30;
"@MMK_R_U" = -10;
"@MMK_R_V" = -25;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -20;
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_d" = -20;
"@MMK_R_e" = -20;
"@MMK_R_g" = -20;
"@MMK_R_o" = -20;
"@MMK_R_q" = -20;
"@MMK_R_t" = -10;
"@MMK_R_v" = -30;
"@MMK_R_w" = -25;
};
"@MMK_L_S" = {
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_J" = -10;
"@MMK_R_M" = -10;
"@MMK_R_O" = -10;
"@MMK_R_S" = -20;
"@MMK_R_T" = -30;
"@MMK_R_W" = -30;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -30;
"@MMK_R_Z" = -10;
"@MMK_R_t" = -20;
"@MMK_R_u" = -10;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_x" = -30;
"@MMK_R_y" = -10;
};
"@MMK_L_Softsign-cy" = {
"@MMK_R_Che-cy" = -60;
"@MMK_R_Te-cy" = -130;
"@MMK_R_Ustraight-cy" = -100;
"@MMK_R_Ustraightstroke-cy" = -50;
};
"@MMK_L_T" = {
"@MMK_R_A" = -55;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_J" = -70;
"@MMK_R_M" = -20;
"@MMK_R_O" = -20;
"@MMK_R_Q" = -20;
"@MMK_R_S" = 10;
"@MMK_R_T" = 10;
"@MMK_R_V" = 40;
"@MMK_R_W" = 40;
"@MMK_R_X" = 30;
"@MMK_R_Y" = 40;
"@MMK_R_Z" = 35;
"@MMK_R_a" = -90;
"@MMK_R_abreveacute" = -90;
"@MMK_R_asterisk" = 50;
"@MMK_R_c" = -90;
"@MMK_R_colon" = -70;
"@MMK_R_comma" = -70;
"@MMK_R_d" = -90;
"@MMK_R_e" = -90;
"@MMK_R_ecircumflexacute" = -90;
"@MMK_R_f" = -40;
"@MMK_R_g" = -90;
"@MMK_R_hyphen" = -90;
"@MMK_R_icircumflex" = 40;
"@MMK_R_m" = -70;
"@MMK_R_n" = -70;
"@MMK_R_o" = -90;
"@MMK_R_ocircumflexacute" = -90;
"@MMK_R_p" = -70;
"@MMK_R_period" = -70;
"@MMK_R_q" = -90;
"@MMK_R_quotedblright" = 30;
"@MMK_R_r" = -70;
"@MMK_R_s" = -60;
"@MMK_R_slash" = -40;
"@MMK_R_t" = -30;
"@MMK_R_u" = -70;
"@MMK_R_v" = -70;
"@MMK_R_w" = -65;
"@MMK_R_y" = -70;
"@MMK_R_z" = -60;
};
"@MMK_L_Te-cy" = {
"@MMK_R_El-cy" = -90;
"@MMK_R_O-cy" = -20;
"@MMK_R_a-cy" = -90;
"@MMK_R_comma" = -70;
"@MMK_R_el-cy" = -90;
"@MMK_R_ha-cy" = -90;
"@MMK_R_ii-cy" = -70;
"@MMK_R_period" = -70;
};
"@MMK_L_Tshe-cy" = {
"@MMK_R_Che-cy" = -60;
"@MMK_R_Te-cy" = -90;
"@MMK_R_Zhe-cy" = -5;
};
"@MMK_L_U-cy" = {
"@MMK_R_A-cy" = -110;
"@MMK_R_De-cy" = -130;
"@MMK_R_Ef-cy" = -35;
"@MMK_R_El-cy" = -65;
"@MMK_R_Je-cy" = -135;
"@MMK_R_O-cy" = -25;
"@MMK_R_a-cy" = -90;
"@MMK_R_comma" = -140;
"@MMK_R_de-cy" = -70;
"@MMK_R_dze-cy" = -70;
"@MMK_R_el-cy" = -110;
"@MMK_R_em-cy" = -100;
"@MMK_R_ge-cy" = -80;
"@MMK_R_gje-cy" = -60;
"@MMK_R_ha-cy" = -50;
"@MMK_R_i-cy" = -10;
"@MMK_R_ia-cy" = -110;
"@MMK_R_ii-cy" = -60;
"@MMK_R_period" = -140;
"@MMK_R_te-cy" = -50;
"@MMK_R_ve-cy" = -90;
"@MMK_R_zhe-cy" = -50;
};
"@MMK_L_Ustraight-cy" = {
"@MMK_R_O-cy" = -10;
"@MMK_R_a-cy" = -65;
"@MMK_R_comma" = -80;
"@MMK_R_period" = -80;
};
"@MMK_L_Ustraightstroke-cy" = {
"@MMK_R_comma" = -80;
"@MMK_R_period" = -80;
};
"@MMK_L_V" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_S" = 10;
"@MMK_R_T" = 40;
"@MMK_R_Y" = 30;
"@MMK_R_Z" = 30;
"@MMK_R_a" = -30;
"@MMK_R_abreveacute" = -30;
"@MMK_R_c" = -30;
"@MMK_R_colon" = -50;
"@MMK_R_comma" = -80;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_ecircumflexacute" = -30;
"@MMK_R_g" = -30;
"@MMK_R_icircumflex" = 60;
"@MMK_R_n" = -10;
"@MMK_R_o" = -30;
"@MMK_R_ocircumflexacute" = -30;
"@MMK_R_period" = -80;
"@MMK_R_quotedblright" = 40;
"@MMK_R_r" = -10;
"@MMK_R_s" = -30;
"@MMK_R_t" = -20;
"@MMK_R_u" = -10;
"@MMK_R_y" = -10;
"@MMK_R_z" = -30;
};
"@MMK_L_Ve-cy" = {
"@MMK_R_Che-cy" = -10;
"@MMK_R_Te-cy" = -10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_S" = 10;
"@MMK_R_T" = 30;
"@MMK_R_Y" = 30;
"@MMK_R_a" = -30;
"@MMK_R_abreveacute" = -30;
"@MMK_R_c" = -30;
"@MMK_R_comma" = -70;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_ecircumflexacute" = -30;
"@MMK_R_g" = -30;
"@MMK_R_icircumflex" = 40;
"@MMK_R_n" = -10;
"@MMK_R_o" = -30;
"@MMK_R_ocircumflexacute" = -30;
"@MMK_R_period" = -70;
"@MMK_R_quotedblright" = 40;
"@MMK_R_r" = -10;
"@MMK_R_s" = -10;
"@MMK_R_u" = -10;
"@MMK_R_y" = -10;
"@MMK_R_z" = -10;
};
"@MMK_L_X" = {
"@MMK_R_A" = 20;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_O" = -10;
"@MMK_R_Z" = 10;
"@MMK_R_a" = -30;
"@MMK_R_abreveacute" = -30;
"@MMK_R_c" = -30;
"@MMK_R_d" = -30;
"@MMK_R_e" = -30;
"@MMK_R_ecircumflexacute" = -30;
"@MMK_R_g" = -30;
"@MMK_R_icircumflex" = 30;
"@MMK_R_o" = -30;
"@MMK_R_ocircumflexacute" = -30;
"@MMK_R_quotedblright" = 10;
"@MMK_R_t" = -20;
"@MMK_R_u" = -10;
"@MMK_R_y" = -10;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_J" = -60;
"@MMK_R_M" = -30;
"@MMK_R_O" = -10;
"@MMK_R_Q" = -10;
"@MMK_R_S" = 10;
"@MMK_R_T" = 30;
"@MMK_R_V" = 30;
"@MMK_R_W" = 30;
"@MMK_R_Y" = 30;
"@MMK_R_a" = -60;
"@MMK_R_abreveacute" = -60;
"@MMK_R_asterisk" = 50;
"@MMK_R_c" = -60;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -80;
"@MMK_R_d" = -60;
"@MMK_R_e" = -60;
"@MMK_R_ecircumflexacute" = -60;
"@MMK_R_g" = -60;
"@MMK_R_hyphen" = -80;
"@MMK_R_icircumflex" = 50;
"@MMK_R_m" = -30;
"@MMK_R_n" = -30;
"@MMK_R_o" = -60;
"@MMK_R_ocircumflexacute" = -60;
"@MMK_R_p" = -30;
"@MMK_R_period" = -80;
"@MMK_R_q" = -60;
"@MMK_R_quotedblright" = 30;
"@MMK_R_r" = -30;
"@MMK_R_s" = -50;
"@MMK_R_slash" = -60;
"@MMK_R_t" = -20;
"@MMK_R_u" = -30;
"@MMK_R_v" = -30;
"@MMK_R_w" = -30;
"@MMK_R_x" = -30;
"@MMK_R_y" = -30;
"@MMK_R_z" = -30;
};
"@MMK_L_Z" = {
"@MMK_R_A" = 20;
"@MMK_R_C" = -10;
"@MMK_R_G" = -10;
"@MMK_R_J" = 20;
"@MMK_R_O" = -10;
"@MMK_R_Q" = -10;
"@MMK_R_T" = 20;
"@MMK_R_V" = 20;
"@MMK_R_X" = 10;
"@MMK_R_Y" = 10;
"@MMK_R_a" = -20;
"@MMK_R_c" = -20;
"@MMK_R_d" = -20;
"@MMK_R_e" = -20;
"@MMK_R_g" = -20;
"@MMK_R_hyphen" = -30;
"@MMK_R_icircumflex" = 30;
"@MMK_R_o" = -20;
"@MMK_R_q" = -20;
"@MMK_R_quotedblright" = 20;
"@MMK_R_t" = -10;
"@MMK_R_u" = -10;
"@MMK_R_v" = -20;
"@MMK_R_w" = -20;
"@MMK_R_y" = -10;
};
"@MMK_L_Zhe-cy" = {
"@MMK_R_Che-cy" = -20;
"@MMK_R_Ef-cy" = -60;
"@MMK_R_El-cy" = 30;
"@MMK_R_O-cy" = -30;
"@MMK_R_be-cy" = -20;
"@MMK_R_ii-cy" = -20;
};
"@MMK_L_ae" = {
"@MMK_R_z" = -10;
};
"@MMK_L_b" = {
"@MMK_R_v" = -10;
"@MMK_R_x" = -10;
"@MMK_R_z" = -20;
};
"@MMK_L_be-cy" = {
"@MMK_R_comma" = -25;
"@MMK_R_ha-cy" = -15;
"@MMK_R_hardsign-cy" = -20;
"@MMK_R_period" = -25;
"@MMK_R_zhe-cy" = -20;
};
"@MMK_L_c" = {
"@MMK_R_a" = -5;
"@MMK_R_c" = -15;
"@MMK_R_d" = -5;
"@MMK_R_e" = -5;
"@MMK_R_g" = -5;
"@MMK_R_o" = -5;
"@MMK_R_q" = -5;
};
"@MMK_L_comma" = {
"@MMK_R_El-cy" = 60;
"@MMK_R_O-cy" = -20;
"@MMK_R_T" = -50;
"@MMK_R_Te-cy" = -50;
"@MMK_R_V" = -40;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -65;
"@MMK_R_Zhe-cy" = 20;
"@MMK_R_v" = -35;
"@MMK_R_w" = -40;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 45;
"@MMK_R_f" = 25;
"@MMK_R_i" = 40;
"@MMK_R_j" = 35;
};
"@MMK_L_es-cy" = {
"@MMK_R_Te-cy" = -90;
"@MMK_R_a-cy" = -5;
};
"@MMK_L_f" = {
"@MMK_R_a" = -25;
"@MMK_R_abreveacute" = -25;
"@MMK_R_c" = -25;
"@MMK_R_comma" = -40;
"@MMK_R_d" = -25;
"@MMK_R_e" = -25;
"@MMK_R_ecircumflexacute" = -25;
"@MMK_R_g" = -25;
"@MMK_R_icircumflex" = 60;
"@MMK_R_o" = -25;
"@MMK_R_ocircumflexacute" = -25;
"@MMK_R_period" = -40;
"@MMK_R_quotedblleft" = 40;
"@MMK_R_quotedblright" = 40;
};
"@MMK_L_g" = {
"@MMK_R_slash" = 20;
};
"@MMK_L_ge-cy" = {
"@MMK_R_el-cy" = 10;
};
"@MMK_L_gheupturn-cy" = {
"@MMK_R_a-cy" = -15;
"@MMK_R_el-cy" = -20;
};
"@MMK_L_guillemetleft" = {
"@MMK_R_J" = -50;
"@MMK_R_Je-cy" = -50;
"@MMK_R_T" = -50;
"@MMK_R_Te-cy" = -60;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -30;
};
"@MMK_L_guillemetright" = {
"@MMK_R_T" = -100;
"@MMK_R_Te-cy" = -100;
"@MMK_R_V" = -30;
"@MMK_R_W" = -30;
"@MMK_R_X" = -50;
"@MMK_R_Y" = -60;
"@MMK_R_Zhe-cy" = -50;
};
"@MMK_L_hyphen" = {
"@MMK_R_T" = -70;
"@MMK_R_Y" = -40;
"@MMK_R_ha-cy" = -25;
};
"@MMK_L_i" = {
"@MMK_R_quotedblleft" = 50;
"@MMK_R_quotedblright" = 60;
};
"@MMK_L_k" = {
"@MMK_R_a" = -15;
"@MMK_R_c" = -15;
"@MMK_R_d" = -15;
"@MMK_R_e" = -15;
"@MMK_R_g" = -15;
"@MMK_R_o" = -15;
"@MMK_R_period" = 20;
"@MMK_R_q" = -15;
"@MMK_R_u" = -5;
"@MMK_R_y" = -5;
};
"@MMK_L_ka-cy" = {
"@MMK_R_a-cy" = -15;
"@MMK_R_comma" = 20;
"@MMK_R_el-cy" = 10;
"@MMK_R_hyphen" = -25;
"@MMK_R_ii-cy" = -5;
"@MMK_R_period" = 20;
};
"@MMK_L_n" = {
"@MMK_R_v" = -10;
"@MMK_R_w" = -10;
};
"@MMK_L_o" = {
"@MMK_R_colon" = -20;
"@MMK_R_comma" = -30;
"@MMK_R_v" = -10;
"@MMK_R_w" = -10;
"@MMK_R_x" = -30;
"@MMK_R_z" = -10;
};
"@MMK_L_p" = {
"@MMK_R_z" = -10;
};
"@MMK_L_parenleft" = {
"@MMK_R_four" = -30;
};
"@MMK_L_period" = {
"@MMK_R_El-cy" = 60;
"@MMK_R_O-cy" = -20;
"@MMK_R_T" = -60;
"@MMK_R_Te-cy" = -60;
"@MMK_R_V" = -40;
"@MMK_R_W" = -20;
"@MMK_R_Y" = -45;
"@MMK_R_Zhe-cy" = 20;
"@MMK_R_v" = -35;
"@MMK_R_w" = -40;
};
"@MMK_L_quotedblleft" = {
"@MMK_R_A" = -60;
"@MMK_R_El-cy" = -80;
"@MMK_R_I" = 20;
"@MMK_R_Je-cy" = -70;
"@MMK_R_T" = 40;
"@MMK_R_Te-cy" = 50;
"@MMK_R_V" = 50;
"@MMK_R_W" = 50;
"@MMK_R_X" = 30;
"@MMK_R_Y" = 50;
"@MMK_R_Z" = 20;
"@MMK_R_f" = 30;
"@MMK_R_five" = 30;
"@MMK_R_four" = -40;
"@MMK_R_icircumflex" = 100;
"@MMK_R_seven" = 40;
"@MMK_R_three" = 20;
"@MMK_R_v" = 40;
"@MMK_R_w" = 40;
"@MMK_R_x" = 20;
};
"@MMK_L_quotedblright" = {
"@MMK_R_El-cy" = -80;
"@MMK_R_Je-cy" = -150;
"@MMK_R_Te-cy" = 60;
"@MMK_R_a-cy" = -20;
"@MMK_R_colon" = -50;
"@MMK_R_comma" = -100;
"@MMK_R_dze-cy" = -40;
"@MMK_R_period" = -90;
};
"@MMK_L_r" = {
"@MMK_R_a" = -10;
"@MMK_R_abreveacute" = -10;
"@MMK_R_asterisk" = 30;
"@MMK_R_c" = -10;
"@MMK_R_comma" = -60;
"@MMK_R_d" = -10;
"@MMK_R_e" = -10;
"@MMK_R_ecircumflexacute" = -10;
"@MMK_R_g" = -10;
"@MMK_R_hyphen" = -40;
"@MMK_R_o" = -10;
"@MMK_R_ocircumflexacute" = -10;
"@MMK_R_period" = -60;
"@MMK_R_q" = -10;
"@MMK_R_quotedblleft" = 40;
"@MMK_R_slash" = -20;
"@MMK_R_v" = 25;
"@MMK_R_w" = 25;
};
"@MMK_L_s" = {
"@MMK_R_s" = -10;
};
"@MMK_L_seven" = {
"@MMK_R_comma" = -70;
"@MMK_R_parenright" = -20;
"@MMK_R_period" = -50;
"@MMK_R_quotedblright" = 30;
};
"@MMK_L_slash" = {
"@MMK_R_A" = -120;
"@MMK_R_S" = -10;
"@MMK_R_T" = 20;
"@MMK_R_Y" = 15;
"@MMK_R_a" = -60;
"@MMK_R_c" = -60;
"@MMK_R_d" = -60;
"@MMK_R_e" = -60;
"@MMK_R_g" = -60;
"@MMK_R_n" = -30;
"@MMK_R_o" = -60;
"@MMK_R_r" = -30;
"@MMK_R_s" = -60;
"@MMK_R_u" = -30;
"@MMK_R_y" = -30;
};
"@MMK_L_t" = {
"@MMK_R_hyphen" = -20;
};
"@MMK_L_v" = {
"@MMK_R_comma" = -40;
"@MMK_R_period" = -40;
"@MMK_R_quotedblleft" = 30;
"@MMK_R_quotedblright" = 30;
};
"@MMK_L_w" = {
"@MMK_R_comma" = -40;
"@MMK_R_period" = -40;
"@MMK_R_quotedblleft" = 30;
"@MMK_R_quotedblright" = 30;
};
"@MMK_L_x" = {
"@MMK_R_a" = -15;
"@MMK_R_c" = -15;
"@MMK_R_d" = -15;
"@MMK_R_e" = -15;
"@MMK_R_ecircumflexacute" = -15;
"@MMK_R_g" = -15;
"@MMK_R_o" = -15;
"@MMK_R_quotedblright" = 30;
};
"@MMK_L_z" = {
"@MMK_R_a" = -10;
"@MMK_R_c" = -10;
"@MMK_R_d" = -10;
"@MMK_R_e" = -10;
"@MMK_R_g" = -10;
"@MMK_R_o" = -10;
"@MMK_R_q" = -10;
};
"@MMK_L_zhe-cy" = {
"@MMK_R_comma" = 40;
"@MMK_R_el-cy" = 10;
"@MMK_R_period" = 40;
};
"A-cy" = {
"De-cy" = 30;
"Ef-cy" = -30;
"Ustraight-cy" = -60;
"Ustraightstroke-cy" = -50;
};
B = {
J = -15;
V = -10;
W = -10;
X = -10;
q = -10;
v = -10;
w = -10;
};
"E-cy" = {
"Ef-cy" = -35;
};
"Ef-cy" = {
"Dze-cy" = -15;
"Je-cy" = -60;
"Ze-cy" = -40;
"Zhe-cy" = -60;
};
"Er-cy" = {
"A-cy" = -75;
"De-cy" = -135;
"Ef-cy" = 10;
"Je-cy" = -170;
"Ze-cy" = -35;
};
"Ereversed-cy" = {
"Je-cy" = -40;
};
"Es-cy" = {
"Ef-cy" = -60;
"hardsign-cy" = -50;
};
F = {
J = -90;
M = -30;
V = 10;
q = -30;
question = 30;
slash = -30;
x = -20;
};
"Iu-cy" = {
"Je-cy" = -30;
};
J = {
J = -30;
M = -10;
X = -10;
q = -10;
};
M = {
M = -20;
Q = -20;
V = -30;
W = -30;
q = -30;
v = -20;
w = -20;
};
Q = {
J = -30;
M = -10;
Q = -10;
V = -25;
W = -20;
X = -20;
};
T = {
idieresis = 60;
};
"Te-cy" = {
"A-cy" = -55;
"De-cy" = -117;
"Je-cy" = -70;
"de-cy" = -90;
"em-cy" = -100;
"ereversed-cy" = -80;
"ge-cy" = -80;
"te-cy" = -70;
"ve-cy" = -90;
"zhe-cy" = -90;
};
"Tshe-cy" = {
"Ef-cy" = -10;
};
"Ustraight-cy" = {
"A-cy" = -40;
"ve-cy" = -80;
};
"Ustraightstroke-cy" = {
"A-cy" = -40;
};
V = {
J = -50;
M = -25;
Q = -10;
V = 30;
W = 30;
X = 30;
asterisk = 30;
f = 20;
hyphen = -50;
m = -10;
p = -10;
q = -30;
slash = -80;
w = -20;
x = -20;
};
W = {
J = -40;
M = -15;
Q = -10;
V = 30;
asterisk = 20;
hyphen = -40;
m = -10;
p = -10;
q = -30;
slash = -80;
w = -10;
x = -10;
};
X = {
J = 20;
Q = -10;
V = 10;
hyphen = -40;
q = -30;
v = -20;
w = -20;
};
backslash = {
three = 30;
};
"dje-cy" = {
"je-cy" = 10;
};
eight = {
seven = -20;
};
f = {
asterisk = 30;
hyphen = -20;
periodcentered = -20;
q = -25;
question = 30;
w = 20;
};
five = {
nine = -10;
};
florin = {
one = 20;
seven = 50;
};
four = {
nine = -10;
seven = -10;
three = 10;
};
fraction = {
five = 20;
four = -70;
one = 30;
seven = 60;
six = -20;
three = 50;
two = 20;
};
"gheupturn-cy" = {
"de-cy" = -15;
"ia-cy" = -15;
};
h = {
v = -10;
w = -10;
};
hyphen = {
V = -20;
x = -30;
};
"je-cy" = {
"je-cy" = 20;
};
m = {
v = -10;
w = -10;
};
nine = {
seven = -10;
};
p = {
v = -10;
x = -30;
};
q = {
j = 20;
slash = 20;
};
questiondown = {
j = 30;
};
seven = {
asterisk = 30;
backslash = 30;
four = -30;
fraction = -60;
hyphen = -50;
nine = 10;
one = 30;
question = 50;
seven = 40;
six = -15;
slash = 20;
yen = 50;
};
slash = {
J = -100;
V = 20;
W = 20;
four = -50;
m = -30;
p = -30;
q = -60;
seven = 30;
six = -20;
three = 20;
v = -20;
w = -20;
};
sterling = {
five = 10;
three = 40;
two = 40;
};
two = {
fraction = 30;
two = 40;
};
v = {
asterisk = 30;
v = 15;
w = 15;
};
"ve-cy" = {
"hardsign-cy" = -10;
};
w = {
asterisk = 30;
v = 20;
w = 20;
};
x = {
hyphen = -30;
q = -15;
};
yen = {
seven = 20;
};
"zhe-cy" = {
hyphen = -20;
};
};
};
manufacturer = "Monotype Imaging Inc.";
manufacturerURL = "http://www.monotype.com";
unitsPerEm = 1000;
versionMajor = 3;
versionMinor = 0;
}
